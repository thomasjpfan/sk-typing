{
  "CCA": {
    "name": "sklearn.cross_decomposition._cca.CCA",
    "common_name": "CCA",
    "description": "CCA Canonical Correlation Analysis. CCA inherits from PLS with mode=\"B\" and deflation_mode=\"canonical\".  Read more in the :ref:`User Guide <cross_decomposition>`.",
    "sklearn_version": "0.22.2.post1",
    "Hyperparams": [
      {
        "type": "Hyperparameter",
        "name": "n_components",
        "init_args": {
          "semantic_types": [
            "n_components"
          ],
          "_structural_type": "int",
          "default": 2,
          "description": "number of components to keep."
        }
      },
      {
        "type": "Hyperparameter",
        "name": "scale",
        "init_args": {
          "semantic_types": [
            "scale"
          ],
          "_structural_type": "bool",
          "default": "True",
          "description": "whether to scale the data?"
        }
      },
      {
        "type": "Hyperparameter",
        "name": "max_iter",
        "init_args": {
          "semantic_types": [
            "max_iter"
          ],
          "_structural_type": "int",
          "default": 500,
          "description": "the maximum number of iterations of the NIPALS inner loop"
        }
      },
      {
        "type": "Hyperparameter",
        "name": "tol",
        "init_args": {
          "semantic_types": [
            "tol"
          ],
          "_structural_type": "float",
          "default": 1e-06,
          "description": "the tolerance used in the iterative algorithm"
        }
      },
      {
        "type": "Hyperparameter",
        "name": "copy",
        "init_args": {
          "semantic_types": [
            "copy"
          ],
          "_structural_type": "bool",
          "default": "True",
          "description": "Whether the deflation be done on a copy. Let the default value to True unless you don't care about side effects"
        }
      }
    ],
    "Params": []
  },
  "PLSCanonical": {
    "name": "sklearn.cross_decomposition._pls.PLSCanonical",
    "common_name": "PLSCanonical",
    "description": "PLSCanonical implements the 2 blocks canonical PLS of the original Wold algorithm [Tenenhaus 1998] p.204, referred as PLS-C2A in [Wegelin 2000]. This class inherits from PLS with mode=\"A\" and deflation_mode=\"canonical\", norm_y_weights=True and algorithm=\"nipals\", but svd should provide similar results up to numerical errors.  Read more in the :ref:`User Guide <cross_decomposition>`.  .. versionadded:: 0.8",
    "sklearn_version": "0.22.2.post1",
    "Hyperparams": [
      {
        "type": "Hyperparameter",
        "name": "n_components",
        "init_args": {
          "semantic_types": [
            "n_components"
          ],
          "_structural_type": "int",
          "default": 2,
          "description": "Number of components to keep"
        }
      },
      {
        "type": "Hyperparameter",
        "name": "scale",
        "init_args": {
          "semantic_types": [
            "scale"
          ],
          "_structural_type": "bool",
          "default": "True",
          "description": "Option to scale data"
        }
      },
      {
        "type": "Enumeration",
        "name": "algorithm",
        "init_args": {
          "semantic_types": [
            "algorithm"
          ],
          "values": [
            "nipals",
            "svd"
          ],
          "_structural_type": "str",
          "default": "nipals",
          "description": "The algorithm used to estimate the weights. It will be called n_components times, i.e. once for each iteration of the outer loop."
        }
      },
      {
        "type": "Hyperparameter",
        "name": "max_iter",
        "init_args": {
          "semantic_types": [
            "max_iter"
          ],
          "_structural_type": "int",
          "default": 500,
          "description": "the maximum number of iterations of the NIPALS inner loop (used only if algorithm=\"nipals\")"
        }
      },
      {
        "type": "Hyperparameter",
        "name": "tol",
        "init_args": {
          "semantic_types": [
            "tol"
          ],
          "_structural_type": "float",
          "default": 1e-06,
          "description": "the tolerance used in the iterative algorithm"
        }
      },
      {
        "type": "Hyperparameter",
        "name": "copy",
        "init_args": {
          "semantic_types": [
            "copy"
          ],
          "_structural_type": "bool",
          "default": "True",
          "description": "Whether the deflation should be done on a copy. Let the default value to True unless you don't care about side effect"
        }
      }
    ],
    "Params": []
  },
  "PLSRegression": {
    "name": "sklearn.cross_decomposition._pls.PLSRegression",
    "common_name": "PLSRegression",
    "description": "PLS regression PLSRegression implements the PLS 2 blocks regression known as PLS2 or PLS1 in case of one dimensional response. This class inherits from _PLS with mode=\"A\", deflation_mode=\"regression\", norm_y_weights=False and algorithm=\"nipals\".  Read more in the :ref:`User Guide <cross_decomposition>`.  .. versionadded:: 0.8",
    "sklearn_version": "0.22.2.post1",
    "Hyperparams": [
      {
        "type": "Hyperparameter",
        "name": "n_components",
        "init_args": {
          "semantic_types": [
            "n_components"
          ],
          "_structural_type": "int",
          "default": 2,
          "description": "Number of components to keep."
        }
      },
      {
        "type": "Hyperparameter",
        "name": "scale",
        "init_args": {
          "semantic_types": [
            "scale"
          ],
          "_structural_type": "bool",
          "default": "True",
          "description": "whether to scale the data"
        }
      },
      {
        "type": "Hyperparameter",
        "name": "max_iter",
        "init_args": {
          "semantic_types": [
            "max_iter"
          ],
          "_structural_type": "int",
          "default": 500,
          "description": "the maximum number of iterations of the NIPALS inner loop (used only if algorithm=\"nipals\")"
        }
      },
      {
        "type": "Hyperparameter",
        "name": "tol",
        "init_args": {
          "semantic_types": [
            "tol"
          ],
          "_structural_type": "float",
          "default": 1e-06,
          "description": "Tolerance used in the iterative algorithm default 1e-06."
        }
      },
      {
        "type": "Hyperparameter",
        "name": "copy",
        "init_args": {
          "semantic_types": [
            "copy"
          ],
          "_structural_type": "bool",
          "default": "True",
          "description": "Whether the deflation should be done on a copy. Let the default value to True unless you don't care about side effect"
        }
      }
    ],
    "Params": []
  },
  "PLSSVD": {
    "name": "sklearn.cross_decomposition._pls.PLSSVD",
    "common_name": "PLSSVD",
    "description": "Partial Least Square SVD Simply perform a svd on the crosscovariance matrix: X'Y There are no iterative deflation here.  Read more in the :ref:`User Guide <cross_decomposition>`.  .. versionadded:: 0.8",
    "sklearn_version": "0.22.2.post1",
    "Hyperparams": [
      {
        "type": "Hyperparameter",
        "name": "n_components",
        "init_args": {
          "semantic_types": [
            "n_components"
          ],
          "_structural_type": "int",
          "default": 2,
          "description": "Number of components to keep."
        }
      },
      {
        "type": "Hyperparameter",
        "name": "scale",
        "init_args": {
          "semantic_types": [
            "scale"
          ],
          "_structural_type": "bool",
          "default": "True",
          "description": "Whether to scale X and Y."
        }
      },
      {
        "type": "Hyperparameter",
        "name": "copy",
        "init_args": {
          "semantic_types": [
            "copy"
          ],
          "_structural_type": "bool",
          "default": "True",
          "description": "Whether to copy X and Y, or perform in-place computations."
        }
      }
    ],
    "Params": []
  }
}