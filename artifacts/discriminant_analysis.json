{
  "LinearDiscriminantAnalysis": {
    "name": "sklearn.discriminant_analysis.LinearDiscriminantAnalysis",
    "common_name": "LinearDiscriminantAnalysis",
    "description": "Linear Discriminant Analysis A classifier with a linear decision boundary, generated by fitting class conditional densities to the data and using Bayes' rule.  The model fits a Gaussian density to each class, assuming that all classes share the same covariance matrix.  The fitted model can also be used to reduce the dimensionality of the input by projecting it to the most discriminative directions.  .. versionadded:: 0.17    *LinearDiscriminantAnalysis*.  Read more in the :ref:`User Guide <lda_qda>`.",
    "sklearn_version": "0.22.2.post1",
    "Hyperparams": [
      {
        "type": "Enumeration",
        "name": "solver",
        "init_args": {
          "semantic_types": [
            "solver"
          ],
          "values": [
            "svd",
            "lsqr",
            "eigen"
          ],
          "_structural_type": "str",
          "default": "svd",
          "description": "Solver to use, possible values:   - 'svd': Singular value decomposition (default).     Does not compute the covariance matrix, therefore this solver is     recommended for data with a large number of features.   - 'lsqr': Least squares solution, can be combined with shrinkage.   - 'eigen': Eigenvalue decomposition, can be combined with shrinkage."
        }
      },
      {
        "name": "shrinkage",
        "type": "Union",
        "init_args": {
          "semantic_types": [
            "shrinkage"
          ],
          "default": "shrinkage__None",
          "description": "Shrinkage parameter, possible values:   - None: no shrinkage (default).   - 'auto': automatic shrinkage using the Ledoit-Wolf lemma.   - float between 0 and 1: fixed shrinkage parameter.  Note that shrinkage works only with 'lsqr' and 'eigen' solvers."
        },
        "hyperparams": [
          {
            "type": "Constant",
            "name": "shrinkage__str",
            "init_args": {
              "semantic_types": [
                "shrinkage"
              ],
              "_structural_type": "str"
            }
          },
          {
            "type": "Hyperparameter",
            "name": "shrinkage__float",
            "init_args": {
              "semantic_types": [
                "shrinkage"
              ],
              "_structural_type": "float"
            }
          },
          {
            "type": "Constant",
            "name": "shrinkage__None",
            "init_args": {
              "semantic_types": [
                "shrinkage"
              ],
              "_structural_type": "None",
              "default": "None"
            }
          }
        ]
      },
      {
        "name": "priors",
        "type": "Union",
        "init_args": {
          "semantic_types": [
            "priors"
          ],
          "default": "priors__None",
          "description": "Class priors."
        },
        "hyperparams": [
          {
            "name": "priors__ndarray",
            "type": "Hyperparameter",
            "init_args": {
              "_structural_type": "ndarray",
              "semantic_types": [
                "priors"
              ]
            }
          },
          {
            "type": "Constant",
            "name": "priors__None",
            "init_args": {
              "semantic_types": [
                "priors"
              ],
              "_structural_type": "None",
              "default": "None"
            }
          }
        ]
      },
      {
        "name": "n_components",
        "type": "Union",
        "init_args": {
          "semantic_types": [
            "n_components"
          ],
          "default": "n_components__None",
          "description": "Number of components (<= min(n_classes - 1, n_features)) for dimensionality reduction. If None, will be set to min(n_classes - 1, n_features)."
        },
        "hyperparams": [
          {
            "type": "Hyperparameter",
            "name": "n_components__int",
            "init_args": {
              "semantic_types": [
                "n_components"
              ],
              "_structural_type": "int"
            }
          },
          {
            "type": "Constant",
            "name": "n_components__None",
            "init_args": {
              "semantic_types": [
                "n_components"
              ],
              "_structural_type": "None",
              "default": "None"
            }
          }
        ]
      },
      {
        "type": "Hyperparameter",
        "name": "store_covariance",
        "init_args": {
          "semantic_types": [
            "store_covariance"
          ],
          "_structural_type": "bool",
          "default": "False",
          "description": "Additionally compute class covariance matrix (default False), used only in 'svd' solver.  .. versionadded:: 0.17"
        }
      },
      {
        "type": "Hyperparameter",
        "name": "tol",
        "init_args": {
          "semantic_types": [
            "tol"
          ],
          "_structural_type": "float",
          "default": 0.0001,
          "description": "Threshold used for rank estimation in SVD solver.  .. versionadded:: 0.17"
        }
      }
    ]
  },
  "QuadraticDiscriminantAnalysis": {
    "name": "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis",
    "common_name": "QuadraticDiscriminantAnalysis",
    "description": "Quadratic Discriminant Analysis A classifier with a quadratic decision boundary, generated by fitting class conditional densities to the data and using Bayes' rule.  The model fits a Gaussian density to each class.  .. versionadded:: 0.17    *QuadraticDiscriminantAnalysis*  Read more in the :ref:`User Guide <lda_qda>`.",
    "sklearn_version": "0.22.2.post1",
    "Hyperparams": [
      {
        "name": "priors",
        "type": "Union",
        "init_args": {
          "semantic_types": [
            "priors"
          ],
          "default": "priors__None",
          "description": "Priors on classes"
        },
        "hyperparams": [
          {
            "name": "priors__ndarray",
            "type": "Hyperparameter",
            "init_args": {
              "_structural_type": "ndarray",
              "semantic_types": [
                "priors"
              ]
            }
          },
          {
            "type": "Constant",
            "name": "priors__None",
            "init_args": {
              "semantic_types": [
                "priors"
              ],
              "_structural_type": "None",
              "default": "None"
            }
          }
        ]
      },
      {
        "type": "Hyperparameter",
        "name": "reg_param",
        "init_args": {
          "semantic_types": [
            "reg_param"
          ],
          "_structural_type": "float",
          "default": 0.0,
          "description": "Regularizes the covariance estimate as ``(1-reg_param)*Sigma + reg_param*np.eye(n_features)``"
        }
      },
      {
        "type": "Hyperparameter",
        "name": "store_covariance",
        "init_args": {
          "semantic_types": [
            "store_covariance"
          ],
          "_structural_type": "bool",
          "default": "False",
          "description": "If True the covariance matrices are computed and stored in the `self.covariance_` attribute.  .. versionadded:: 0.17"
        }
      },
      {
        "type": "Hyperparameter",
        "name": "tol",
        "init_args": {
          "semantic_types": [
            "tol"
          ],
          "_structural_type": "float",
          "default": 0.0001,
          "description": "Threshold used for rank estimation.  .. versionadded:: 0.17"
        }
      }
    ]
  }
}