{
  "LinearDiscriminantAnalysis": {
    "name": "sklearn.discriminant_analysis.LinearDiscriminantAnalysis",
    "common_name": "LinearDiscriminantAnalysis",
    "description": "Linear Discriminant Analysis A classifier with a linear decision boundary, generated by fitting class conditional densities to the data and using Bayes' rule.  The model fits a Gaussian density to each class, assuming that all classes share the same covariance matrix.  The fitted model can also be used to reduce the dimensionality of the input by projecting it to the most discriminative directions, using the `transform` method.  .. versionadded:: 0.17    *LinearDiscriminantAnalysis*.  Read more in the :ref:`User Guide <lda_qda>`.",
    "sklearn_version": "0.24.0",
    "Hyperparams": [
      {
        "type": "Enumeration",
        "name": "solver",
        "init_args": {
          "semantic_types": [
            "solver"
          ],
          "values": [
            "svd",
            "lsqr",
            "eigen"
          ],
          "_structural_type": "str",
          "default": "svd",
          "description": "Solver to use, possible values:   - 'svd': Singular value decomposition (default).     Does not compute the covariance matrix, therefore this solver is     recommended for data with a large number of features.   - 'lsqr': Least squares solution.     Can be combined with shrinkage or custom covariance estimator.   - 'eigen': Eigenvalue decomposition.     Can be combined with shrinkage or custom covariance estimator."
        }
      },
      {
        "name": "shrinkage",
        "type": "Union",
        "init_args": {
          "semantic_types": [
            "shrinkage"
          ],
          "default": "shrinkage__None",
          "description": "Shrinkage parameter, possible values:   - None: no shrinkage (default).   - 'auto': automatic shrinkage using the Ledoit-Wolf lemma.   - float between 0 and 1: fixed shrinkage parameter.  This should be left to None if `covariance_estimator` is used. Note that shrinkage works only with 'lsqr' and 'eigen' solvers."
        },
        "hyperparams": [
          {
            "type": "Constant",
            "name": "shrinkage__str",
            "init_args": {
              "semantic_types": [
                "shrinkage"
              ],
              "_structural_type": "str"
            }
          },
          {
            "type": "Hyperparameter",
            "name": "shrinkage__float",
            "init_args": {
              "semantic_types": [
                "shrinkage"
              ],
              "_structural_type": "float"
            }
          },
          {
            "type": "Constant",
            "name": "shrinkage__None",
            "init_args": {
              "semantic_types": [
                "shrinkage"
              ],
              "_structural_type": "None",
              "default": "None"
            }
          }
        ]
      },
      {
        "name": "priors",
        "type": "Union",
        "init_args": {
          "semantic_types": [
            "priors"
          ],
          "default": "priors__None",
          "description": "The class prior probabilities. By default, the class proportions are inferred from the training data."
        },
        "hyperparams": [
          {
            "name": "priors__ndarray",
            "type": "Hyperparameter",
            "init_args": {
              "_structural_type": "ndarray",
              "semantic_types": [
                "priors"
              ]
            }
          },
          {
            "type": "Constant",
            "name": "priors__None",
            "init_args": {
              "semantic_types": [
                "priors"
              ],
              "_structural_type": "None",
              "default": "None"
            }
          }
        ]
      },
      {
        "name": "n_components",
        "type": "Union",
        "init_args": {
          "semantic_types": [
            "n_components"
          ],
          "default": "n_components__None",
          "description": "Number of components (<= min(n_classes - 1, n_features)) for dimensionality reduction. If None, will be set to min(n_classes - 1, n_features). This parameter only affects the `transform` method."
        },
        "hyperparams": [
          {
            "type": "Hyperparameter",
            "name": "n_components__int",
            "init_args": {
              "semantic_types": [
                "n_components"
              ],
              "_structural_type": "int"
            }
          },
          {
            "type": "Constant",
            "name": "n_components__None",
            "init_args": {
              "semantic_types": [
                "n_components"
              ],
              "_structural_type": "None",
              "default": "None"
            }
          }
        ]
      },
      {
        "type": "Hyperparameter",
        "name": "store_covariance",
        "init_args": {
          "semantic_types": [
            "store_covariance"
          ],
          "_structural_type": "bool",
          "default": "False",
          "description": "If True, explicitely compute the weighted within-class covariance matrix when solver is 'svd'. The matrix is always computed and stored for the other solvers.  .. versionadded:: 0.17"
        }
      },
      {
        "type": "Hyperparameter",
        "name": "tol",
        "init_args": {
          "semantic_types": [
            "tol"
          ],
          "_structural_type": "float",
          "default": 0.0001,
          "description": "Absolute threshold for a singular value of X to be considered significant, used to estimate the rank of X. Dimensions whose singular values are non-significant are discarded. Only used if solver is 'svd'.  .. versionadded:: 0.17"
        }
      },
      {
        "name": "covariance_estimator",
        "type": "Union",
        "init_args": {
          "semantic_types": [
            "covariance_estimator"
          ],
          "default": "covariance_estimator__None",
          "description": "If not None, `covariance_estimator` is used to estimate the covariance matrices instead of relying on the empirical covariance estimator (with potential shrinkage). The object should have a fit method and a ``covariance_`` attribute like the estimators in :mod:`sklearn.covariance`. if None the shrinkage parameter drives the estimate.  This should be left to None if `shrinkage` is used. Note that `covariance_estimator` works only with 'lsqr' and 'eigen' solvers.  .. versionadded:: 0.24"
        },
        "hyperparams": [
          {
            "name": "covariance_estimator__Estimator",
            "type": "Hyperparameter",
            "init_args": {
              "_structural_type": "Estimator",
              "semantic_types": [
                "covariance_estimator"
              ]
            }
          },
          {
            "type": "Constant",
            "name": "covariance_estimator__None",
            "init_args": {
              "semantic_types": [
                "covariance_estimator"
              ],
              "_structural_type": "None",
              "default": "None"
            }
          }
        ]
      }
    ],
    "Params": [
      {
        "name": "coef_",
        "type": "ndarray of shape (n_features,) or (n_classes, n_features)",
        "description": "Weight vector(s)."
      },
      {
        "name": "intercept_",
        "type": "ndarray of shape (n_classes,)",
        "description": "Intercept term."
      },
      {
        "name": "covariance_",
        "type": "array-like of shape (n_features, n_features)",
        "description": "Weighted within-class covariance matrix. It corresponds to `sum_k prior_k * C_k` where `C_k` is the covariance matrix of the samples in class `k`. The `C_k` are estimated using the (potentially shrunk) biased estimator of covariance. If solver is 'svd', only exists when `store_covariance` is True."
      },
      {
        "name": "explained_variance_ratio_",
        "type": "ndarray of shape (n_components,)",
        "description": "Percentage of variance explained by each of the selected components. If ``n_components`` is not set then all components are stored and the sum of explained variances is equal to 1.0. Only available when eigen or svd solver is used."
      },
      {
        "name": "means_",
        "type": "array-like of shape (n_classes, n_features)",
        "description": "Class-wise means."
      },
      {
        "name": "priors_",
        "type": "array-like of shape (n_classes,)",
        "description": "Class priors (sum to 1)."
      },
      {
        "name": "scalings_",
        "type": "array-like of shape (rank, n_classes - 1)",
        "description": "Scaling of the features in the space spanned by the class centroids. Only available for 'svd' and 'eigen' solvers."
      },
      {
        "name": "xbar_",
        "type": "array-like of shape (n_features,)",
        "description": "Overall mean. Only present if solver is 'svd'."
      },
      {
        "name": "classes_",
        "type": "array-like of shape (n_classes,)",
        "description": "Unique class labels."
      }
    ]
  },
  "QuadraticDiscriminantAnalysis": {
    "name": "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis",
    "common_name": "QuadraticDiscriminantAnalysis",
    "description": "Quadratic Discriminant Analysis A classifier with a quadratic decision boundary, generated by fitting class conditional densities to the data and using Bayes' rule.  The model fits a Gaussian density to each class.  .. versionadded:: 0.17    *QuadraticDiscriminantAnalysis*  Read more in the :ref:`User Guide <lda_qda>`.",
    "sklearn_version": "0.24.0",
    "Hyperparams": [
      {
        "name": "priors",
        "type": "Union",
        "init_args": {
          "semantic_types": [
            "priors"
          ],
          "default": "priors__None",
          "description": "Class priors. By default, the class proportions are inferred from the training data."
        },
        "hyperparams": [
          {
            "name": "priors__ndarray",
            "type": "Hyperparameter",
            "init_args": {
              "_structural_type": "ndarray",
              "semantic_types": [
                "priors"
              ]
            }
          },
          {
            "type": "Constant",
            "name": "priors__None",
            "init_args": {
              "semantic_types": [
                "priors"
              ],
              "_structural_type": "None",
              "default": "None"
            }
          }
        ]
      },
      {
        "type": "Hyperparameter",
        "name": "reg_param",
        "init_args": {
          "semantic_types": [
            "reg_param"
          ],
          "_structural_type": "float",
          "default": 0.0,
          "description": "Regularizes the per-class covariance estimates by transforming S2 as ``S2 = (1 - reg_param) * S2 + reg_param * np.eye(n_features)``, where S2 corresponds to the `scaling_` attribute of a given class."
        }
      },
      {
        "type": "Hyperparameter",
        "name": "store_covariance",
        "init_args": {
          "semantic_types": [
            "store_covariance"
          ],
          "_structural_type": "bool",
          "default": "False",
          "description": "If True, the class covariance matrices are explicitely computed and stored in the `self.covariance_` attribute.  .. versionadded:: 0.17"
        }
      },
      {
        "type": "Hyperparameter",
        "name": "tol",
        "init_args": {
          "semantic_types": [
            "tol"
          ],
          "_structural_type": "float",
          "default": 0.0001,
          "description": "Absolute threshold for a singular value to be considered significant, used to estimate the rank of `Xk` where `Xk` is the centered matrix of samples in class k. This parameter does not affect the predictions. It only controls a warning that is raised when features are considered to be colinear.  .. versionadded:: 0.17"
        }
      }
    ],
    "Params": [
      {
        "name": "covariance_",
        "type": "list of len n_classes of ndarray             of shape (n_features, n_features)",
        "description": "For each class, gives the covariance matrix estimated using the samples of that class. The estimations are unbiased. Only present if `store_covariance` is True."
      },
      {
        "name": "means_",
        "type": "array-like of shape (n_classes, n_features)",
        "description": "Class-wise means."
      },
      {
        "name": "priors_",
        "type": "array-like of shape (n_classes,)",
        "description": "Class priors (sum to 1)."
      },
      {
        "name": "rotations_",
        "type": "list of len n_classes of ndarray of shape (n_features, n_k)",
        "description": "For each class k an array of shape (n_features, n_k), where ``n_k = min(n_features, number of elements in class k)`` It is the rotation of the Gaussian distribution, i.e. its principal axis. It corresponds to `V`, the matrix of eigenvectors coming from the SVD of `Xk = U S Vt` where `Xk` is the centered matrix of samples from class k."
      },
      {
        "name": "scalings_",
        "type": "list of len n_classes of ndarray of shape (n_k,)",
        "description": "For each class, contains the scaling of the Gaussian distributions along its principal axes, i.e. the variance in the rotated coordinate system. It corresponds to `S^2 / (n_samples - 1)`, where `S` is the diagonal matrix of singular values from the SVD of `Xk`, where `Xk` is the centered matrix of samples from class k."
      },
      {
        "name": "classes_",
        "type": "ndarray of shape (n_classes,)",
        "description": "Unique class labels."
      }
    ]
  }
}