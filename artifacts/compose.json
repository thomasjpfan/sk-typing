{
  "ColumnTransformer": {
    "name": "sklearn.compose._column_transformer.ColumnTransformer",
    "common_name": "ColumnTransformer",
    "description": "Applies transformers to columns of an array or pandas DataFrame. This estimator allows different columns or column subsets of the input to be transformed separately and the features generated by each transformer will be concatenated to form a single feature space. This is useful for heterogeneous or columnar data, to combine several feature extraction mechanisms or transformations into a single transformer.  Read more in the :ref:`User Guide <column_transformer>`.  .. versionadded:: 0.20",
    "sklearn_version": "0.22.2.post1",
    "Hyperparams": [
      {
        "name": "remainder",
        "type": "Union",
        "init_args": {
          "semantic_types": [
            "remainder"
          ],
          "default": "remainder__str",
          "description": "By default, only the specified columns in `transformers` are transformed and combined in the output, and the non-specified columns are dropped. (default of ``'drop'``). By specifying ``remainder='passthrough'``, all remaining columns that were not specified in `transformers` will be automatically passed through. This subset of columns is concatenated with the output of the transformers. By setting ``remainder`` to be an estimator, the remaining non-specified columns will use the ``remainder`` estimator. The estimator must support :term:`fit` and :term:`transform`. Note that using this feature requires that the DataFrame columns input at :term:`fit` and :term:`transform` have identical order."
        },
        "hyperparams": [
          {
            "type": "Enumeration",
            "name": "remainder__str",
            "init_args": {
              "semantic_types": [
                "remainder"
              ],
              "values": [
                "drop",
                "passthrough"
              ],
              "_structural_type": "str",
              "default": "drop"
            }
          },
          {
            "name": "remainder__Estimator",
            "type": "Hyperparameter",
            "init_args": {
              "_structural_type": "Estimator",
              "semantic_types": [
                "remainder"
              ]
            }
          }
        ]
      },
      {
        "type": "Hyperparameter",
        "name": "sparse_threshold",
        "init_args": {
          "semantic_types": [
            "sparse_threshold"
          ],
          "_structural_type": "float",
          "default": 0.3,
          "description": "If the output of the different transformers contains sparse matrices, these will be stacked as a sparse matrix if the overall density is lower than this value. Use ``sparse_threshold=0`` to always return dense.  When the transformed output consists of all dense data, the stacked result will be dense, and this keyword will be ignored."
        }
      },
      {
        "name": "n_jobs",
        "type": "Union",
        "init_args": {
          "semantic_types": [
            "n_jobs"
          ],
          "default": "n_jobs__None",
          "description": "Number of jobs to run in parallel. ``None`` means 1 unless in a :obj:`joblib.parallel_backend` context. ``-1`` means using all processors. See :term:`Glossary <n_jobs>` for more details."
        },
        "hyperparams": [
          {
            "type": "Hyperparameter",
            "name": "n_jobs__int",
            "init_args": {
              "semantic_types": [
                "n_jobs"
              ],
              "_structural_type": "int"
            }
          },
          {
            "type": "Constant",
            "name": "n_jobs__None",
            "init_args": {
              "semantic_types": [
                "n_jobs"
              ],
              "_structural_type": "None",
              "default": "None"
            }
          }
        ]
      },
      {
        "name": "transformer_weights",
        "type": "Union",
        "init_args": {
          "semantic_types": [
            "transformer_weights"
          ],
          "default": "transformer_weights__None",
          "description": "Multiplicative weights for features per transformer. The output of the transformer is multiplied by these weights. Keys are transformer names, values the weights."
        },
        "hyperparams": [
          {
            "type": "Hyperparameter",
            "name": "transformer_weights__dict",
            "init_args": {
              "semantic_types": [
                "transformer_weights"
              ],
              "_structural_type": "dict"
            }
          },
          {
            "type": "Constant",
            "name": "transformer_weights__None",
            "init_args": {
              "semantic_types": [
                "transformer_weights"
              ],
              "_structural_type": "None",
              "default": "None"
            }
          }
        ]
      },
      {
        "type": "Hyperparameter",
        "name": "verbose",
        "init_args": {
          "semantic_types": [
            "verbose"
          ],
          "_structural_type": "bool",
          "default": "False",
          "description": "If True, the time elapsed while fitting each transformer will be printed as it is completed."
        }
      }
    ]
  },
  "TransformedTargetRegressor": {
    "name": "sklearn.compose._target.TransformedTargetRegressor",
    "common_name": "TransformedTargetRegressor",
    "description": "Meta-estimator to regress on a transformed target. Useful for applying a non-linear transformation to the target ``y`` in regression problems. This transformation can be given as a Transformer such as the QuantileTransformer or as a function and its inverse such as ``log`` and ``exp``.  The computation during ``fit`` is::      regressor.fit(X, func(y))  or::      regressor.fit(X, transformer.transform(y))  The computation during ``predict`` is::      inverse_func(regressor.predict(X))  or::      transformer.inverse_transform(regressor.predict(X))  Read more in the :ref:`User Guide <transformed_target_regressor>`.",
    "sklearn_version": "0.22.2.post1",
    "Hyperparams": [
      {
        "name": "regressor",
        "type": "Union",
        "init_args": {
          "semantic_types": [
            "regressor"
          ],
          "default": "regressor__None",
          "description": "Regressor object such as derived from ``RegressorMixin``. This regressor will automatically be cloned each time prior to fitting."
        },
        "hyperparams": [
          {
            "name": "regressor__Estimator",
            "type": "Hyperparameter",
            "init_args": {
              "_structural_type": "Estimator",
              "semantic_types": [
                "regressor"
              ]
            }
          },
          {
            "type": "Constant",
            "name": "regressor__None",
            "init_args": {
              "semantic_types": [
                "regressor"
              ],
              "_structural_type": "None",
              "default": "None"
            }
          }
        ]
      },
      {
        "name": "transformer",
        "type": "Union",
        "init_args": {
          "semantic_types": [
            "transformer"
          ],
          "default": "transformer__None",
          "description": "Estimator object such as derived from ``TransformerMixin``. Cannot be set at the same time as ``func`` and ``inverse_func``. If ``transformer`` is ``None`` as well as ``func`` and ``inverse_func``, the transformer will be an identity transformer. Note that the transformer will be cloned during fitting. Also, the transformer is restricting ``y`` to be a numpy array."
        },
        "hyperparams": [
          {
            "name": "transformer__Estimator",
            "type": "Hyperparameter",
            "init_args": {
              "_structural_type": "Estimator",
              "semantic_types": [
                "transformer"
              ]
            }
          },
          {
            "type": "Constant",
            "name": "transformer__None",
            "init_args": {
              "semantic_types": [
                "transformer"
              ],
              "_structural_type": "None",
              "default": "None"
            }
          }
        ]
      },
      {
        "type": "Hyperparameter",
        "name": "func",
        "init_args": {
          "semantic_types": [
            "func"
          ],
          "_structural_type": "Callable",
          "default": "None",
          "description": "Function to apply to ``y`` before passing to ``fit``. Cannot be set at the same time as ``transformer``. The function needs to return a 2-dimensional array. If ``func`` is ``None``, the function used will be the identity function."
        }
      },
      {
        "type": "Hyperparameter",
        "name": "inverse_func",
        "init_args": {
          "semantic_types": [
            "inverse_func"
          ],
          "_structural_type": "Callable",
          "default": "None",
          "description": "Function to apply to the prediction of the regressor. Cannot be set at the same time as ``transformer`` as well. The function needs to return a 2-dimensional array. The inverse function is used to return predictions to the same space of the original training labels."
        }
      },
      {
        "type": "Hyperparameter",
        "name": "check_inverse",
        "init_args": {
          "semantic_types": [
            "check_inverse"
          ],
          "_structural_type": "bool",
          "default": "True",
          "description": "Whether to check that ``transform`` followed by ``inverse_transform`` or ``func`` followed by ``inverse_func`` leads to the original targets."
        }
      }
    ]
  }
}