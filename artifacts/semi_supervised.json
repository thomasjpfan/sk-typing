{
  "LabelPropagation": {
    "name": "sklearn.semi_supervised._label_propagation.LabelPropagation",
    "common_name": "LabelPropagation",
    "description": "Label Propagation classifier Read more in the :ref:`User Guide <label_propagation>`.",
    "sklearn_version": "0.22.2.post1",
    "Hyperparams": [
      {
        "name": "kernel",
        "type": "Union",
        "init_args": {
          "semantic_types": [
            "kernel"
          ],
          "default": "kernel__str",
          "description": "String identifier for kernel function to use or the kernel function itself. Only 'rbf' and 'knn' strings are valid inputs. The function passed should take two inputs, each of shape [n_samples, n_features], and return a [n_samples, n_samples] shaped weight matrix."
        },
        "hyperparams": [
          {
            "type": "Enumeration",
            "name": "kernel__str",
            "init_args": {
              "semantic_types": [
                "kernel"
              ],
              "values": [
                "knn",
                "rbf"
              ],
              "_structural_type": "str",
              "default": "rbf"
            }
          },
          {
            "type": "Hyperparameter",
            "name": "kernel__Callable",
            "init_args": {
              "semantic_types": [
                "kernel"
              ],
              "_structural_type": "Callable"
            }
          }
        ]
      },
      {
        "type": "Hyperparameter",
        "name": "gamma",
        "init_args": {
          "semantic_types": [
            "gamma"
          ],
          "_structural_type": "float",
          "default": 20,
          "description": "Parameter for rbf kernel"
        }
      },
      {
        "type": "Hyperparameter",
        "name": "n_neighbors",
        "init_args": {
          "semantic_types": [
            "n_neighbors"
          ],
          "_structural_type": "int",
          "default": 7,
          "description": "Parameter for knn kernel"
        }
      },
      {
        "type": "Hyperparameter",
        "name": "max_iter",
        "init_args": {
          "semantic_types": [
            "max_iter"
          ],
          "_structural_type": "int",
          "default": 1000,
          "description": "Change maximum number of iterations allowed"
        }
      },
      {
        "type": "Hyperparameter",
        "name": "tol",
        "init_args": {
          "semantic_types": [
            "tol"
          ],
          "_structural_type": "float",
          "default": 0.001,
          "description": "Convergence tolerance: threshold to consider the system at steady state"
        }
      },
      {
        "name": "n_jobs",
        "type": "Union",
        "init_args": {
          "semantic_types": [
            "n_jobs"
          ],
          "default": "n_jobs__None",
          "description": "The number of parallel jobs to run. ``None`` means 1 unless in a :obj:`joblib.parallel_backend` context. ``-1`` means using all processors. See :term:`Glossary <n_jobs>` for more details."
        },
        "hyperparams": [
          {
            "type": "Hyperparameter",
            "name": "n_jobs__int",
            "init_args": {
              "semantic_types": [
                "n_jobs"
              ],
              "_structural_type": "int"
            }
          },
          {
            "type": "Constant",
            "name": "n_jobs__None",
            "init_args": {
              "semantic_types": [
                "n_jobs"
              ],
              "_structural_type": "None",
              "default": "None"
            }
          }
        ]
      }
    ]
  },
  "LabelSpreading": {
    "name": "sklearn.semi_supervised._label_propagation.LabelSpreading",
    "common_name": "LabelSpreading",
    "description": "LabelSpreading model for semi-supervised learning This model is similar to the basic Label Propagation algorithm, but uses affinity matrix based on the normalized graph Laplacian and soft clamping across the labels.  Read more in the :ref:`User Guide <label_propagation>`.",
    "sklearn_version": "0.22.2.post1",
    "Hyperparams": [
      {
        "name": "kernel",
        "type": "Union",
        "init_args": {
          "semantic_types": [
            "kernel"
          ],
          "default": "kernel__str",
          "description": "String identifier for kernel function to use or the kernel function itself. Only 'rbf' and 'knn' strings are valid inputs. The function passed should take two inputs, each of shape [n_samples, n_features], and return a [n_samples, n_samples] shaped weight matrix"
        },
        "hyperparams": [
          {
            "type": "Enumeration",
            "name": "kernel__str",
            "init_args": {
              "semantic_types": [
                "kernel"
              ],
              "values": [
                "knn",
                "rbf"
              ],
              "_structural_type": "str",
              "default": "rbf"
            }
          },
          {
            "type": "Hyperparameter",
            "name": "kernel__Callable",
            "init_args": {
              "semantic_types": [
                "kernel"
              ],
              "_structural_type": "Callable"
            }
          }
        ]
      },
      {
        "type": "Hyperparameter",
        "name": "gamma",
        "init_args": {
          "semantic_types": [
            "gamma"
          ],
          "_structural_type": "float",
          "default": 20,
          "description": "parameter for rbf kernel"
        }
      },
      {
        "type": "Hyperparameter",
        "name": "n_neighbors",
        "init_args": {
          "semantic_types": [
            "n_neighbors"
          ],
          "_structural_type": "int",
          "default": 7,
          "description": "parameter for knn kernel"
        }
      },
      {
        "type": "Hyperparameter",
        "name": "alpha",
        "init_args": {
          "semantic_types": [
            "alpha"
          ],
          "_structural_type": "float",
          "default": 0.2,
          "description": "Clamping factor. A value in (0, 1) that specifies the relative amount that an instance should adopt the information from its neighbors as opposed to its initial label. alpha=0 means keeping the initial label information; alpha=1 means replacing all initial information."
        }
      },
      {
        "type": "Hyperparameter",
        "name": "max_iter",
        "init_args": {
          "semantic_types": [
            "max_iter"
          ],
          "_structural_type": "int",
          "default": 30,
          "description": "maximum number of iterations allowed"
        }
      },
      {
        "type": "Hyperparameter",
        "name": "tol",
        "init_args": {
          "semantic_types": [
            "tol"
          ],
          "_structural_type": "float",
          "default": 0.001,
          "description": "Convergence tolerance: threshold to consider the system at steady state"
        }
      },
      {
        "name": "n_jobs",
        "type": "Union",
        "init_args": {
          "semantic_types": [
            "n_jobs"
          ],
          "default": "n_jobs__None",
          "description": "The number of parallel jobs to run. ``None`` means 1 unless in a :obj:`joblib.parallel_backend` context. ``-1`` means using all processors. See :term:`Glossary <n_jobs>` for more details."
        },
        "hyperparams": [
          {
            "type": "Hyperparameter",
            "name": "n_jobs__int",
            "init_args": {
              "semantic_types": [
                "n_jobs"
              ],
              "_structural_type": "int"
            }
          },
          {
            "type": "Constant",
            "name": "n_jobs__None",
            "init_args": {
              "semantic_types": [
                "n_jobs"
              ],
              "_structural_type": "None",
              "default": "None"
            }
          }
        ]
      }
    ]
  }
}