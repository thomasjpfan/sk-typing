{
  "GaussianRandomProjection": {
    "name": "sklearn.random_projection.GaussianRandomProjection",
    "common_name": "GaussianRandomProjection",
    "description": "Reduce dimensionality through Gaussian random projection The components of the random matrix are drawn from N(0, 1 / n_components).  Read more in the :ref:`User Guide <gaussian_random_matrix>`.  .. versionadded:: 0.13",
    "sklearn_version": "0.22.2.post1",
    "Hyperparams": [
      {
        "name": "n_components",
        "type": "Union",
        "init_args": {
          "semantic_types": [
            "n_components"
          ],
          "default": "n_components__str",
          "description": "Dimensionality of the target projection space.  n_components can be automatically adjusted according to the number of samples in the dataset and the bound given by the Johnson-Lindenstrauss lemma. In that case the quality of the embedding is controlled by the ``eps`` parameter.  It should be noted that Johnson-Lindenstrauss lemma can yield very conservative estimated of the required number of components as it makes no assumption on the structure of the dataset."
        },
        "hyperparams": [
          {
            "type": "Hyperparameter",
            "name": "n_components__int",
            "init_args": {
              "semantic_types": [
                "n_components"
              ],
              "_structural_type": "int"
            }
          },
          {
            "type": "Constant",
            "name": "n_components__str",
            "init_args": {
              "semantic_types": [
                "n_components"
              ],
              "_structural_type": "str",
              "default": "auto"
            }
          }
        ]
      },
      {
        "type": "Hyperparameter",
        "name": "eps",
        "init_args": {
          "semantic_types": [
            "eps"
          ],
          "_structural_type": "float",
          "default": 0.1,
          "description": "Parameter to control the quality of the embedding according to the Johnson-Lindenstrauss lemma when n_components is set to 'auto'.  Smaller values lead to better embedding and higher number of dimensions (n_components) in the target projection space."
        }
      },
      {
        "name": "random_state",
        "type": "Union",
        "init_args": {
          "semantic_types": [
            "random_state"
          ],
          "default": "random_state__None",
          "description": "Control the pseudo random number generator used to generate the matrix at fit time.  If int, random_state is the seed used by the random number generator; If RandomState instance, random_state is the random number generator; If None, the random number generator is the RandomState instance used by `np.random`."
        },
        "hyperparams": [
          {
            "type": "Hyperparameter",
            "name": "random_state__int",
            "init_args": {
              "semantic_types": [
                "random_state"
              ],
              "_structural_type": "int"
            }
          },
          {
            "type": "Constant",
            "name": "random_state__None",
            "init_args": {
              "semantic_types": [
                "random_state"
              ],
              "_structural_type": "None",
              "default": "None"
            }
          }
        ]
      }
    ]
  },
  "SparseRandomProjection": {
    "name": "sklearn.random_projection.SparseRandomProjection",
    "common_name": "SparseRandomProjection",
    "description": "Reduce dimensionality through sparse random projection Sparse random matrix is an alternative to dense random projection matrix that guarantees similar embedding quality while being much more memory efficient and allowing faster computation of the projected data.  If we note `s = 1 / density` the components of the random matrix are drawn from:    - -sqrt(s) / sqrt(n_components)   with probability 1 / 2s   -  0                              with probability 1 - 1 / s   - +sqrt(s) / sqrt(n_components)   with probability 1 / 2s  Read more in the :ref:`User Guide <sparse_random_matrix>`.  .. versionadded:: 0.13",
    "sklearn_version": "0.22.2.post1",
    "Hyperparams": [
      {
        "name": "n_components",
        "type": "Union",
        "init_args": {
          "semantic_types": [
            "n_components"
          ],
          "default": "n_components__str",
          "description": "Dimensionality of the target projection space.  n_components can be automatically adjusted according to the number of samples in the dataset and the bound given by the Johnson-Lindenstrauss lemma. In that case the quality of the embedding is controlled by the ``eps`` parameter.  It should be noted that Johnson-Lindenstrauss lemma can yield very conservative estimated of the required number of components as it makes no assumption on the structure of the dataset."
        },
        "hyperparams": [
          {
            "type": "Hyperparameter",
            "name": "n_components__int",
            "init_args": {
              "semantic_types": [
                "n_components"
              ],
              "_structural_type": "int"
            }
          },
          {
            "type": "Constant",
            "name": "n_components__str",
            "init_args": {
              "semantic_types": [
                "n_components"
              ],
              "_structural_type": "str",
              "default": "auto"
            }
          }
        ]
      },
      {
        "name": "density",
        "type": "Union",
        "init_args": {
          "semantic_types": [
            "density"
          ],
          "default": "density__str",
          "description": "Ratio of non-zero component in the random projection matrix.  If density = 'auto', the value is set to the minimum density as recommended by Ping Li et al.: 1 / sqrt(n_features).  Use density = 1 / 3.0 if you want to reproduce the results from Achlioptas, 2001."
        },
        "hyperparams": [
          {
            "type": "Hyperparameter",
            "name": "density__float",
            "init_args": {
              "semantic_types": [
                "density"
              ],
              "_structural_type": "float"
            }
          },
          {
            "type": "Constant",
            "name": "density__str",
            "init_args": {
              "semantic_types": [
                "density"
              ],
              "_structural_type": "str",
              "default": "auto"
            }
          }
        ]
      },
      {
        "type": "Hyperparameter",
        "name": "eps",
        "init_args": {
          "semantic_types": [
            "eps"
          ],
          "_structural_type": "float",
          "default": 0.1,
          "description": "Parameter to control the quality of the embedding according to the Johnson-Lindenstrauss lemma when n_components is set to 'auto'.  Smaller values lead to better embedding and higher number of dimensions (n_components) in the target projection space."
        }
      },
      {
        "type": "Hyperparameter",
        "name": "dense_output",
        "init_args": {
          "semantic_types": [
            "dense_output"
          ],
          "_structural_type": "bool",
          "default": "False",
          "description": "If True, ensure that the output of the random projection is a dense numpy array even if the input and random projection matrix are both sparse. In practice, if the number of components is small the number of zero components in the projected data will be very small and it will be more CPU and memory efficient to use a dense representation.  If False, the projected data uses a sparse representation if the input is sparse."
        }
      },
      {
        "name": "random_state",
        "type": "Union",
        "init_args": {
          "semantic_types": [
            "random_state"
          ],
          "default": "random_state__None",
          "description": "Control the pseudo random number generator used to generate the matrix at fit time.  If int, random_state is the seed used by the random number generator; If RandomState instance, random_state is the random number generator; If None, the random number generator is the RandomState instance used by `np.random`."
        },
        "hyperparams": [
          {
            "type": "Hyperparameter",
            "name": "random_state__int",
            "init_args": {
              "semantic_types": [
                "random_state"
              ],
              "_structural_type": "int"
            }
          },
          {
            "type": "Constant",
            "name": "random_state__None",
            "init_args": {
              "semantic_types": [
                "random_state"
              ],
              "_structural_type": "None",
              "default": "None"
            }
          }
        ]
      }
    ]
  }
}