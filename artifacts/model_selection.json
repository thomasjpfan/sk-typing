{
  "GridSearchCV": {
    "name": "sklearn.model_selection._search.GridSearchCV",
    "common_name": "GridSearchCV",
    "description": "Exhaustive search over specified parameter values for an estimator. Important members are fit, predict.  GridSearchCV implements a \"fit\" and a \"score\" method. It also implements \"predict\", \"predict_proba\", \"decision_function\", \"transform\" and \"inverse_transform\" if they are implemented in the estimator used.  The parameters of the estimator used to apply these methods are optimized by cross-validated grid-search over a parameter grid.  Read more in the :ref:`User Guide <grid_search>`.",
    "sklearn_version": "0.22.2.post1",
    "Hyperparams": [
      {
        "name": "scoring",
        "type": "Union",
        "init_args": {
          "semantic_types": [
            "scoring"
          ],
          "default": "scoring__None",
          "description": "A single string (see :ref:`scoring_parameter`) or a callable (see :ref:`scoring`) to evaluate the predictions on the test set.  For evaluating multiple metrics, either give a list of (unique) strings or a dict with names as keys and callables as values.  NOTE that when using custom scorers, each scorer should return a single value. Metric functions returning a list/array of values can be wrapped into multiple scorers that return one value each.  See :ref:`multimetric_grid_search` for an example.  If None, the estimator's score method is used."
        },
        "hyperparams": [
          {
            "type": "Hyperparameter",
            "name": "scoring__str",
            "init_args": {
              "semantic_types": [
                "scoring"
              ],
              "_structural_type": "str"
            }
          },
          {
            "type": "Hyperparameter",
            "name": "scoring__Callable",
            "init_args": {
              "semantic_types": [
                "scoring"
              ],
              "_structural_type": "Callable"
            }
          },
          {
            "type": "Hyperparameter",
            "name": "scoring__list",
            "init_args": {
              "semantic_types": [
                "scoring"
              ],
              "_structural_type": "list"
            }
          },
          {
            "type": "Hyperparameter",
            "name": "scoring__tuple",
            "init_args": {
              "semantic_types": [
                "scoring"
              ],
              "_structural_type": "tuple"
            }
          },
          {
            "type": "Hyperparameter",
            "name": "scoring__dict",
            "init_args": {
              "semantic_types": [
                "scoring"
              ],
              "_structural_type": "dict"
            }
          },
          {
            "type": "Constant",
            "name": "scoring__None",
            "init_args": {
              "semantic_types": [
                "scoring"
              ],
              "_structural_type": "None",
              "default": "None"
            }
          }
        ]
      },
      {
        "name": "n_jobs",
        "type": "Union",
        "init_args": {
          "semantic_types": [
            "n_jobs"
          ],
          "default": "n_jobs__None",
          "description": "Number of jobs to run in parallel. ``None`` means 1 unless in a :obj:`joblib.parallel_backend` context. ``-1`` means using all processors. See :term:`Glossary <n_jobs>` for more details."
        },
        "hyperparams": [
          {
            "type": "Hyperparameter",
            "name": "n_jobs__int",
            "init_args": {
              "semantic_types": [
                "n_jobs"
              ],
              "_structural_type": "int"
            }
          },
          {
            "type": "Constant",
            "name": "n_jobs__None",
            "init_args": {
              "semantic_types": [
                "n_jobs"
              ],
              "_structural_type": "None",
              "default": "None"
            }
          }
        ]
      },
      {
        "name": "refit",
        "type": "Union",
        "init_args": {
          "semantic_types": [
            "refit"
          ],
          "default": "refit__bool",
          "description": "Refit an estimator using the best found parameters on the whole dataset.  For multiple metric evaluation, this needs to be a string denoting the scorer that would be used to find the best parameters for refitting the estimator at the end.  Where there are considerations other than maximum score in choosing a best estimator, ``refit`` can be set to a function which returns the selected ``best_index_`` given ``cv_results_``. In that case, the ``best_estimator_`` and ``best_parameters_`` will be set according to the returned ``best_index_`` while the ``best_score_`` attribute will not be available.  The refitted estimator is made available at the ``best_estimator_`` attribute and permits using ``predict`` directly on this ``GridSearchCV`` instance.  Also for multiple metric evaluation, the attributes ``best_index_``, ``best_score_`` and ``best_params_`` will only be available if ``refit`` is set and all of them will be determined w.r.t this specific scorer.  See ``scoring`` parameter to know more about multiple metric evaluation.  .. versionchanged:: 0.20     Support for callable added."
        },
        "hyperparams": [
          {
            "type": "Hyperparameter",
            "name": "refit__bool",
            "init_args": {
              "semantic_types": [
                "refit"
              ],
              "_structural_type": "bool",
              "default": "True"
            }
          },
          {
            "type": "Hyperparameter",
            "name": "refit__str",
            "init_args": {
              "semantic_types": [
                "refit"
              ],
              "_structural_type": "str"
            }
          },
          {
            "type": "Hyperparameter",
            "name": "refit__Callable",
            "init_args": {
              "semantic_types": [
                "refit"
              ],
              "_structural_type": "Callable"
            }
          }
        ]
      },
      {
        "name": "cv",
        "type": "Union",
        "init_args": {
          "semantic_types": [
            "cv"
          ],
          "default": "cv__None",
          "description": "Determines the cross-validation splitting strategy. Possible inputs for cv are:  - None, to use the default 5-fold cross validation, - integer, to specify the number of folds in a `(Stratified)KFold`, - :term:`CV splitter`, - An iterable yielding (train, test) splits as arrays of indices.  For integer/None inputs, if the estimator is a classifier and ``y`` is either binary or multiclass, :class:`StratifiedKFold` is used. In all other cases, :class:`KFold` is used.  Refer :ref:`User Guide <cross_validation>` for the various cross-validation strategies that can be used here.  .. versionchanged:: 0.22     ``cv`` default value if None changed from 3-fold to 5-fold."
        },
        "hyperparams": [
          {
            "type": "Hyperparameter",
            "name": "cv__int",
            "init_args": {
              "semantic_types": [
                "cv"
              ],
              "_structural_type": "int"
            }
          },
          {
            "type": "Constant",
            "name": "cv__None",
            "init_args": {
              "semantic_types": [
                "cv"
              ],
              "_structural_type": "None",
              "default": "None"
            }
          }
        ]
      },
      {
        "type": "Hyperparameter",
        "name": "verbose",
        "init_args": {
          "semantic_types": [
            "verbose"
          ],
          "_structural_type": "int",
          "default": 0,
          "description": "Controls the verbosity: the higher, the more messages."
        }
      },
      {
        "type": "Hyperparameter",
        "name": "pre_dispatch",
        "init_args": {
          "semantic_types": [
            "pre_dispatch"
          ],
          "_structural_type": "str",
          "default": "2*n_jobs",
          "description": "Controls the number of jobs that get dispatched during parallel execution. Reducing this number can be useful to avoid an explosion of memory consumption when more jobs get dispatched than CPUs can process. This parameter can be:      - None, in which case all the jobs are immediately       created and spawned. Use this for lightweight and       fast-running jobs, to avoid delays due to on-demand       spawning of the jobs      - An int, giving the exact number of total jobs that are       spawned      - A string, giving an expression as a function of n_jobs,       as in '2*n_jobs'"
        }
      },
      {
        "name": "iid",
        "type": "Union",
        "init_args": {
          "semantic_types": [
            "iid"
          ],
          "default": "iid__str",
          "description": "If True, return the average score across folds, weighted by the number of samples in each test set. In this case, the data is assumed to be identically distributed across the folds, and the loss minimized is the total loss per sample, and not the mean loss across the folds.  .. deprecated:: 0.22     Parameter ``iid`` is deprecated in 0.22 and will be removed in 0.24"
        },
        "hyperparams": [
          {
            "type": "Hyperparameter",
            "name": "iid__bool",
            "init_args": {
              "semantic_types": [
                "iid"
              ],
              "_structural_type": "bool"
            }
          },
          {
            "type": "Constant",
            "name": "iid__str",
            "init_args": {
              "semantic_types": [
                "iid"
              ],
              "_structural_type": "str",
              "default": "deprecated"
            }
          }
        ]
      },
      {
        "name": "error_score",
        "type": "Union",
        "init_args": {
          "semantic_types": [
            "error_score"
          ],
          "default": "error_score__float",
          "description": "Value to assign to the score if an error occurs in estimator fitting. If set to 'raise', the error is raised. If a numeric value is given, FitFailedWarning is raised. This parameter does not affect the refit step, which will always raise the error. Default is ``np.nan``."
        },
        "hyperparams": [
          {
            "type": "Constant",
            "name": "error_score__str",
            "init_args": {
              "semantic_types": [
                "error_score"
              ],
              "_structural_type": "str"
            }
          },
          {
            "type": "Hyperparameter",
            "name": "error_score__float",
            "init_args": {
              "semantic_types": [
                "error_score"
              ],
              "_structural_type": "float",
              "default": NaN
            }
          }
        ]
      },
      {
        "type": "Hyperparameter",
        "name": "return_train_score",
        "init_args": {
          "semantic_types": [
            "return_train_score"
          ],
          "_structural_type": "bool",
          "default": "False",
          "description": "If ``False``, the ``cv_results_`` attribute will not include training scores. Computing training scores is used to get insights on how different parameter settings impact the overfitting/underfitting trade-off. However computing the scores on the training set can be computationally expensive and is not strictly required to select the parameters that yield the best generalization performance."
        }
      }
    ]
  },
  "RandomizedSearchCV": {
    "name": "sklearn.model_selection._search.RandomizedSearchCV",
    "common_name": "RandomizedSearchCV",
    "description": "Randomized search on hyper parameters. RandomizedSearchCV implements a \"fit\" and a \"score\" method. It also implements \"predict\", \"predict_proba\", \"decision_function\", \"transform\" and \"inverse_transform\" if they are implemented in the estimator used.  The parameters of the estimator used to apply these methods are optimized by cross-validated search over parameter settings.  In contrast to GridSearchCV, not all parameter values are tried out, but rather a fixed number of parameter settings is sampled from the specified distributions. The number of parameter settings that are tried is given by n_iter.  If all parameters are presented as a list, sampling without replacement is performed. If at least one parameter is given as a distribution, sampling with replacement is used. It is highly recommended to use continuous distributions for continuous parameters.  Read more in the :ref:`User Guide <randomized_parameter_search>`.  .. versionadded:: 0.14",
    "sklearn_version": "0.22.2.post1",
    "Hyperparams": [
      {
        "type": "Hyperparameter",
        "name": "n_iter",
        "init_args": {
          "semantic_types": [
            "n_iter"
          ],
          "_structural_type": "int",
          "default": 10,
          "description": "Number of parameter settings that are sampled. n_iter trades off runtime vs quality of the solution."
        }
      },
      {
        "name": "scoring",
        "type": "Union",
        "init_args": {
          "semantic_types": [
            "scoring"
          ],
          "default": "scoring__None",
          "description": "A single string (see :ref:`scoring_parameter`) or a callable (see :ref:`scoring`) to evaluate the predictions on the test set.  For evaluating multiple metrics, either give a list of (unique) strings or a dict with names as keys and callables as values.  NOTE that when using custom scorers, each scorer should return a single value. Metric functions returning a list/array of values can be wrapped into multiple scorers that return one value each.  See :ref:`multimetric_grid_search` for an example.  If None, the estimator's score method is used."
        },
        "hyperparams": [
          {
            "type": "Hyperparameter",
            "name": "scoring__str",
            "init_args": {
              "semantic_types": [
                "scoring"
              ],
              "_structural_type": "str"
            }
          },
          {
            "type": "Hyperparameter",
            "name": "scoring__Callable",
            "init_args": {
              "semantic_types": [
                "scoring"
              ],
              "_structural_type": "Callable"
            }
          },
          {
            "type": "Hyperparameter",
            "name": "scoring__list",
            "init_args": {
              "semantic_types": [
                "scoring"
              ],
              "_structural_type": "list"
            }
          },
          {
            "type": "Hyperparameter",
            "name": "scoring__tuple",
            "init_args": {
              "semantic_types": [
                "scoring"
              ],
              "_structural_type": "tuple"
            }
          },
          {
            "type": "Hyperparameter",
            "name": "scoring__dict",
            "init_args": {
              "semantic_types": [
                "scoring"
              ],
              "_structural_type": "dict"
            }
          },
          {
            "type": "Constant",
            "name": "scoring__None",
            "init_args": {
              "semantic_types": [
                "scoring"
              ],
              "_structural_type": "None",
              "default": "None"
            }
          }
        ]
      },
      {
        "name": "n_jobs",
        "type": "Union",
        "init_args": {
          "semantic_types": [
            "n_jobs"
          ],
          "default": "n_jobs__None",
          "description": "Number of jobs to run in parallel. ``None`` means 1 unless in a :obj:`joblib.parallel_backend` context. ``-1`` means using all processors. See :term:`Glossary <n_jobs>` for more details."
        },
        "hyperparams": [
          {
            "type": "Hyperparameter",
            "name": "n_jobs__int",
            "init_args": {
              "semantic_types": [
                "n_jobs"
              ],
              "_structural_type": "int"
            }
          },
          {
            "type": "Constant",
            "name": "n_jobs__None",
            "init_args": {
              "semantic_types": [
                "n_jobs"
              ],
              "_structural_type": "None",
              "default": "None"
            }
          }
        ]
      },
      {
        "name": "refit",
        "type": "Union",
        "init_args": {
          "semantic_types": [
            "refit"
          ],
          "default": "refit__bool",
          "description": "Refit an estimator using the best found parameters on the whole dataset.  For multiple metric evaluation, this needs to be a string denoting the scorer that would be used to find the best parameters for refitting the estimator at the end.  Where there are considerations other than maximum score in choosing a best estimator, ``refit`` can be set to a function which returns the selected ``best_index_`` given the ``cv_results``. In that case, the ``best_estimator_`` and ``best_parameters_`` will be set according to the returned ``best_index_`` while the ``best_score_`` attribute will not be available.  The refitted estimator is made available at the ``best_estimator_`` attribute and permits using ``predict`` directly on this ``RandomizedSearchCV`` instance.  Also for multiple metric evaluation, the attributes ``best_index_``, ``best_score_`` and ``best_params_`` will only be available if ``refit`` is set and all of them will be determined w.r.t this specific scorer.  See ``scoring`` parameter to know more about multiple metric evaluation.  .. versionchanged:: 0.20     Support for callable added."
        },
        "hyperparams": [
          {
            "type": "Hyperparameter",
            "name": "refit__bool",
            "init_args": {
              "semantic_types": [
                "refit"
              ],
              "_structural_type": "bool",
              "default": "True"
            }
          },
          {
            "type": "Hyperparameter",
            "name": "refit__str",
            "init_args": {
              "semantic_types": [
                "refit"
              ],
              "_structural_type": "str"
            }
          },
          {
            "type": "Hyperparameter",
            "name": "refit__Callable",
            "init_args": {
              "semantic_types": [
                "refit"
              ],
              "_structural_type": "Callable"
            }
          }
        ]
      },
      {
        "name": "cv",
        "type": "Union",
        "init_args": {
          "semantic_types": [
            "cv"
          ],
          "default": "cv__None",
          "description": "Determines the cross-validation splitting strategy. Possible inputs for cv are:  - None, to use the default 5-fold cross validation, - integer, to specify the number of folds in a `(Stratified)KFold`, - :term:`CV splitter`, - An iterable yielding (train, test) splits as arrays of indices.  For integer/None inputs, if the estimator is a classifier and ``y`` is either binary or multiclass, :class:`StratifiedKFold` is used. In all other cases, :class:`KFold` is used.  Refer :ref:`User Guide <cross_validation>` for the various cross-validation strategies that can be used here.  .. versionchanged:: 0.22     ``cv`` default value if None changed from 3-fold to 5-fold."
        },
        "hyperparams": [
          {
            "type": "Hyperparameter",
            "name": "cv__int",
            "init_args": {
              "semantic_types": [
                "cv"
              ],
              "_structural_type": "int"
            }
          },
          {
            "type": "Constant",
            "name": "cv__None",
            "init_args": {
              "semantic_types": [
                "cv"
              ],
              "_structural_type": "None",
              "default": "None"
            }
          }
        ]
      },
      {
        "type": "Hyperparameter",
        "name": "verbose",
        "init_args": {
          "semantic_types": [
            "verbose"
          ],
          "_structural_type": "int",
          "default": 0,
          "description": "Controls the verbosity: the higher, the more messages."
        }
      },
      {
        "type": "Hyperparameter",
        "name": "pre_dispatch",
        "init_args": {
          "semantic_types": [
            "pre_dispatch"
          ],
          "_structural_type": "str",
          "default": "2*n_jobs",
          "description": "Controls the number of jobs that get dispatched during parallel execution. Reducing this number can be useful to avoid an explosion of memory consumption when more jobs get dispatched than CPUs can process. This parameter can be:      - None, in which case all the jobs are immediately       created and spawned. Use this for lightweight and       fast-running jobs, to avoid delays due to on-demand       spawning of the jobs      - An int, giving the exact number of total jobs that are       spawned      - A string, giving an expression as a function of n_jobs,       as in '2*n_jobs'"
        }
      },
      {
        "name": "iid",
        "type": "Union",
        "init_args": {
          "semantic_types": [
            "iid"
          ],
          "default": "iid__str",
          "description": "If True, return the average score across folds, weighted by the number of samples in each test set. In this case, the data is assumed to be identically distributed across the folds, and the loss minimized is the total loss per sample, and not the mean loss across the folds.  .. deprecated:: 0.22     Parameter ``iid`` is deprecated in 0.22 and will be removed in 0.24"
        },
        "hyperparams": [
          {
            "type": "Hyperparameter",
            "name": "iid__bool",
            "init_args": {
              "semantic_types": [
                "iid"
              ],
              "_structural_type": "bool"
            }
          },
          {
            "type": "Constant",
            "name": "iid__str",
            "init_args": {
              "semantic_types": [
                "iid"
              ],
              "_structural_type": "str",
              "default": "deprecated"
            }
          }
        ]
      },
      {
        "name": "random_state",
        "type": "Union",
        "init_args": {
          "semantic_types": [
            "random_state"
          ],
          "default": "random_state__None",
          "description": "Pseudo random number generator state used for random uniform sampling from lists of possible values instead of scipy.stats distributions. If int, random_state is the seed used by the random number generator; If RandomState instance, random_state is the random number generator; If None, the random number generator is the RandomState instance used by `np.random`."
        },
        "hyperparams": [
          {
            "type": "Hyperparameter",
            "name": "random_state__int",
            "init_args": {
              "semantic_types": [
                "random_state"
              ],
              "_structural_type": "int"
            }
          },
          {
            "type": "Constant",
            "name": "random_state__None",
            "init_args": {
              "semantic_types": [
                "random_state"
              ],
              "_structural_type": "None",
              "default": "None"
            }
          }
        ]
      },
      {
        "name": "error_score",
        "type": "Union",
        "init_args": {
          "semantic_types": [
            "error_score"
          ],
          "default": "error_score__float",
          "description": "Value to assign to the score if an error occurs in estimator fitting. If set to 'raise', the error is raised. If a numeric value is given, FitFailedWarning is raised. This parameter does not affect the refit step, which will always raise the error. Default is ``np.nan``."
        },
        "hyperparams": [
          {
            "type": "Constant",
            "name": "error_score__str",
            "init_args": {
              "semantic_types": [
                "error_score"
              ],
              "_structural_type": "str"
            }
          },
          {
            "type": "Hyperparameter",
            "name": "error_score__float",
            "init_args": {
              "semantic_types": [
                "error_score"
              ],
              "_structural_type": "float",
              "default": NaN
            }
          }
        ]
      },
      {
        "type": "Hyperparameter",
        "name": "return_train_score",
        "init_args": {
          "semantic_types": [
            "return_train_score"
          ],
          "_structural_type": "bool",
          "default": "False",
          "description": "If ``False``, the ``cv_results_`` attribute will not include training scores. Computing training scores is used to get insights on how different parameter settings impact the overfitting/underfitting trade-off. However computing the scores on the training set can be computationally expensive and is not strictly required to select the parameters that yield the best generalization performance."
        }
      }
    ]
  }
}