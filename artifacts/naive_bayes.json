{
  "BernoulliNB": {
    "name": "sklearn.naive_bayes.BernoulliNB",
    "common_name": "BernoulliNB",
    "description": "Naive Bayes classifier for multivariate Bernoulli models. Like MultinomialNB, this classifier is suitable for discrete data. The difference is that while MultinomialNB works with occurrence counts, BernoulliNB is designed for binary/boolean features.  Read more in the :ref:`User Guide <bernoulli_naive_bayes>`.",
    "sklearn_version": "0.24.0",
    "Hyperparams": [
      {
        "type": "Hyperparameter",
        "name": "alpha",
        "init_args": {
          "semantic_types": [
            "alpha"
          ],
          "_structural_type": "float",
          "default": 1.0,
          "description": "Additive (Laplace/Lidstone) smoothing parameter (0 for no smoothing)."
        }
      },
      {
        "name": "binarize",
        "type": "Union",
        "init_args": {
          "semantic_types": [
            "binarize"
          ],
          "default": "binarize__float",
          "description": "Threshold for binarizing (mapping to booleans) of sample features. If None, input is presumed to already consist of binary vectors."
        },
        "hyperparams": [
          {
            "type": "Hyperparameter",
            "name": "binarize__float",
            "init_args": {
              "semantic_types": [
                "binarize"
              ],
              "_structural_type": "float",
              "default": 0.0
            }
          },
          {
            "type": "Constant",
            "name": "binarize__None",
            "init_args": {
              "semantic_types": [
                "binarize"
              ],
              "_structural_type": "None"
            }
          }
        ]
      },
      {
        "type": "Hyperparameter",
        "name": "fit_prior",
        "init_args": {
          "semantic_types": [
            "fit_prior"
          ],
          "_structural_type": "bool",
          "default": "True",
          "description": "Whether to learn class prior probabilities or not. If false, a uniform prior will be used."
        }
      },
      {
        "name": "class_prior",
        "type": "Union",
        "init_args": {
          "semantic_types": [
            "class_prior"
          ],
          "default": "class_prior__None",
          "description": "Prior probabilities of the classes. If specified the priors are not adjusted according to the data."
        },
        "hyperparams": [
          {
            "name": "class_prior__ndarray",
            "type": "Hyperparameter",
            "init_args": {
              "_structural_type": "ndarray",
              "semantic_types": [
                "class_prior"
              ]
            }
          },
          {
            "type": "Constant",
            "name": "class_prior__None",
            "init_args": {
              "semantic_types": [
                "class_prior"
              ],
              "_structural_type": "None",
              "default": "None"
            }
          }
        ]
      }
    ],
    "Params": []
  },
  "CategoricalNB": {
    "name": "sklearn.naive_bayes.CategoricalNB",
    "common_name": "CategoricalNB",
    "description": "Naive Bayes classifier for categorical features The categorical Naive Bayes classifier is suitable for classification with discrete features that are categorically distributed. The categories of each feature are drawn from a categorical distribution.  Read more in the :ref:`User Guide <categorical_naive_bayes>`.",
    "sklearn_version": "0.24.0",
    "Hyperparams": [
      {
        "type": "Hyperparameter",
        "name": "alpha",
        "init_args": {
          "semantic_types": [
            "alpha"
          ],
          "_structural_type": "float",
          "default": 1.0,
          "description": "Additive (Laplace/Lidstone) smoothing parameter (0 for no smoothing)."
        }
      },
      {
        "type": "Hyperparameter",
        "name": "fit_prior",
        "init_args": {
          "semantic_types": [
            "fit_prior"
          ],
          "_structural_type": "bool",
          "default": "True",
          "description": "Whether to learn class prior probabilities or not. If false, a uniform prior will be used."
        }
      },
      {
        "name": "class_prior",
        "type": "Union",
        "init_args": {
          "semantic_types": [
            "class_prior"
          ],
          "default": "class_prior__None",
          "description": "Prior probabilities of the classes. If specified the priors are not adjusted according to the data."
        },
        "hyperparams": [
          {
            "name": "class_prior__ndarray",
            "type": "Hyperparameter",
            "init_args": {
              "_structural_type": "ndarray",
              "semantic_types": [
                "class_prior"
              ]
            }
          },
          {
            "type": "Constant",
            "name": "class_prior__None",
            "init_args": {
              "semantic_types": [
                "class_prior"
              ],
              "_structural_type": "None",
              "default": "None"
            }
          }
        ]
      },
      {
        "name": "min_categories",
        "type": "Union",
        "init_args": {
          "semantic_types": [
            "min_categories"
          ],
          "default": "min_categories__None",
          "description": "Minimum number of categories per feature.  - integer: Sets the minimum number of categories per feature to   `n_categories` for each features. - array-like: shape (n_features,) where `n_categories[i]` holds the   minimum number of categories for the ith column of the input. - None (default): Determines the number of categories automatically   from the training data.  .. versionadded:: 0.24"
        },
        "hyperparams": [
          {
            "type": "Hyperparameter",
            "name": "min_categories__int",
            "init_args": {
              "semantic_types": [
                "min_categories"
              ],
              "_structural_type": "int"
            }
          },
          {
            "name": "min_categories__ndarray",
            "type": "Hyperparameter",
            "init_args": {
              "_structural_type": "ndarray",
              "semantic_types": [
                "min_categories"
              ]
            }
          },
          {
            "type": "Constant",
            "name": "min_categories__None",
            "init_args": {
              "semantic_types": [
                "min_categories"
              ],
              "_structural_type": "None",
              "default": "None"
            }
          }
        ]
      }
    ],
    "Params": []
  },
  "ComplementNB": {
    "name": "sklearn.naive_bayes.ComplementNB",
    "common_name": "ComplementNB",
    "description": "The Complement Naive Bayes classifier described in Rennie et al. (2003). The Complement Naive Bayes classifier was designed to correct the \"severe assumptions\" made by the standard Multinomial Naive Bayes classifier. It is particularly suited for imbalanced data sets.  Read more in the :ref:`User Guide <complement_naive_bayes>`.  .. versionadded:: 0.20",
    "sklearn_version": "0.24.0",
    "Hyperparams": [
      {
        "type": "Hyperparameter",
        "name": "alpha",
        "init_args": {
          "semantic_types": [
            "alpha"
          ],
          "_structural_type": "float",
          "default": 1.0,
          "description": "Additive (Laplace/Lidstone) smoothing parameter (0 for no smoothing)."
        }
      },
      {
        "type": "Hyperparameter",
        "name": "fit_prior",
        "init_args": {
          "semantic_types": [
            "fit_prior"
          ],
          "_structural_type": "bool",
          "default": "True",
          "description": "Only used in edge case with a single class in the training set."
        }
      },
      {
        "name": "class_prior",
        "type": "Union",
        "init_args": {
          "semantic_types": [
            "class_prior"
          ],
          "default": "class_prior__None",
          "description": "Prior probabilities of the classes. Not used."
        },
        "hyperparams": [
          {
            "name": "class_prior__ndarray",
            "type": "Hyperparameter",
            "init_args": {
              "_structural_type": "ndarray",
              "semantic_types": [
                "class_prior"
              ]
            }
          },
          {
            "type": "Constant",
            "name": "class_prior__None",
            "init_args": {
              "semantic_types": [
                "class_prior"
              ],
              "_structural_type": "None",
              "default": "None"
            }
          }
        ]
      },
      {
        "type": "Hyperparameter",
        "name": "norm",
        "init_args": {
          "semantic_types": [
            "norm"
          ],
          "_structural_type": "bool",
          "default": "False",
          "description": "Whether or not a second normalization of the weights is performed. The default behavior mirrors the implementations found in Mahout and Weka, which do not follow the full algorithm described in Table 9 of the paper."
        }
      }
    ],
    "Params": []
  },
  "GaussianNB": {
    "name": "sklearn.naive_bayes.GaussianNB",
    "common_name": "GaussianNB",
    "description": "Gaussian Naive Bayes (GaussianNB) Can perform online updates to model parameters via :meth:`partial_fit`. For details on algorithm used to update feature means and variance online, see Stanford CS tech report STAN-CS-79-773 by Chan, Golub, and LeVeque:      http://i.stanford.edu/pub/cstr/reports/cs/tr/79/773/CS-TR-79-773.pdf  Read more in the :ref:`User Guide <gaussian_naive_bayes>`.",
    "sklearn_version": "0.24.0",
    "Hyperparams": [
      {
        "name": "priors",
        "type": "Union",
        "init_args": {
          "semantic_types": [
            "priors"
          ],
          "default": "priors__None",
          "description": "Prior probabilities of the classes. If specified the priors are not adjusted according to the data."
        },
        "hyperparams": [
          {
            "name": "priors__ndarray",
            "type": "Hyperparameter",
            "init_args": {
              "_structural_type": "ndarray",
              "semantic_types": [
                "priors"
              ]
            }
          },
          {
            "type": "Constant",
            "name": "priors__None",
            "init_args": {
              "semantic_types": [
                "priors"
              ],
              "_structural_type": "None",
              "default": "None"
            }
          }
        ]
      },
      {
        "type": "Hyperparameter",
        "name": "var_smoothing",
        "init_args": {
          "semantic_types": [
            "var_smoothing"
          ],
          "_structural_type": "float",
          "default": 1e-09,
          "description": "Portion of the largest variance of all features that is added to variances for calculation stability.  .. versionadded:: 0.20"
        }
      }
    ],
    "Params": []
  },
  "MultinomialNB": {
    "name": "sklearn.naive_bayes.MultinomialNB",
    "common_name": "MultinomialNB",
    "description": "Naive Bayes classifier for multinomial models The multinomial Naive Bayes classifier is suitable for classification with discrete features (e.g., word counts for text classification). The multinomial distribution normally requires integer feature counts. However, in practice, fractional counts such as tf-idf may also work.  Read more in the :ref:`User Guide <multinomial_naive_bayes>`.",
    "sklearn_version": "0.24.0",
    "Hyperparams": [
      {
        "type": "Hyperparameter",
        "name": "alpha",
        "init_args": {
          "semantic_types": [
            "alpha"
          ],
          "_structural_type": "float",
          "default": 1.0,
          "description": "Additive (Laplace/Lidstone) smoothing parameter (0 for no smoothing)."
        }
      },
      {
        "type": "Hyperparameter",
        "name": "fit_prior",
        "init_args": {
          "semantic_types": [
            "fit_prior"
          ],
          "_structural_type": "bool",
          "default": "True",
          "description": "Whether to learn class prior probabilities or not. If false, a uniform prior will be used."
        }
      },
      {
        "name": "class_prior",
        "type": "Union",
        "init_args": {
          "semantic_types": [
            "class_prior"
          ],
          "default": "class_prior__None",
          "description": "Prior probabilities of the classes. If specified the priors are not adjusted according to the data."
        },
        "hyperparams": [
          {
            "name": "class_prior__ndarray",
            "type": "Hyperparameter",
            "init_args": {
              "_structural_type": "ndarray",
              "semantic_types": [
                "class_prior"
              ]
            }
          },
          {
            "type": "Constant",
            "name": "class_prior__None",
            "init_args": {
              "semantic_types": [
                "class_prior"
              ],
              "_structural_type": "None",
              "default": "None"
            }
          }
        ]
      }
    ],
    "Params": []
  }
}