{
  "FeatureUnion": {
    "name": "sklearn.pipeline.FeatureUnion",
    "common_name": "FeatureUnion",
    "description": "Concatenates results of multiple transformer objects. This estimator applies a list of transformer objects in parallel to the input data, then concatenates the results. This is useful to combine several feature extraction mechanisms into a single transformer.  Parameters of the transformers may be set using its name and the parameter name separated by a '__'. A transformer may be replaced entirely by setting the parameter with its name to another transformer, or removed by setting to 'drop'.  Read more in the :ref:`User Guide <feature_union>`.  .. versionadded:: 0.13",
    "sklearn_version": "0.22.2.post1",
    "Hyperparams": [
      {
        "name": "n_jobs",
        "type": "Union",
        "init_args": {
          "semantic_types": [
            "n_jobs"
          ],
          "default": "n_jobs__None",
          "description": "Number of jobs to run in parallel. ``None`` means 1 unless in a :obj:`joblib.parallel_backend` context. ``-1`` means using all processors. See :term:`Glossary <n_jobs>` for more details."
        },
        "hyperparams": [
          {
            "type": "Hyperparameter",
            "name": "n_jobs__int",
            "init_args": {
              "semantic_types": [
                "n_jobs"
              ],
              "_structural_type": "int"
            }
          },
          {
            "type": "Constant",
            "name": "n_jobs__None",
            "init_args": {
              "semantic_types": [
                "n_jobs"
              ],
              "_structural_type": "None",
              "default": "None"
            }
          }
        ]
      },
      {
        "name": "transformer_weights",
        "type": "Union",
        "init_args": {
          "semantic_types": [
            "transformer_weights"
          ],
          "default": "transformer_weights__None",
          "description": "Multiplicative weights for features per transformer. Keys are transformer names, values the weights."
        },
        "hyperparams": [
          {
            "type": "Hyperparameter",
            "name": "transformer_weights__dict",
            "init_args": {
              "semantic_types": [
                "transformer_weights"
              ],
              "_structural_type": "dict"
            }
          },
          {
            "type": "Constant",
            "name": "transformer_weights__None",
            "init_args": {
              "semantic_types": [
                "transformer_weights"
              ],
              "_structural_type": "None",
              "default": "None"
            }
          }
        ]
      },
      {
        "type": "Hyperparameter",
        "name": "verbose",
        "init_args": {
          "semantic_types": [
            "verbose"
          ],
          "_structural_type": "bool",
          "default": "False",
          "description": "If True, the time elapsed while fitting each transformer will be printed as it is completed."
        }
      }
    ]
  },
  "Pipeline": {
    "name": "sklearn.pipeline.Pipeline",
    "common_name": "Pipeline",
    "description": "Pipeline of transforms with a final estimator. Sequentially apply a list of transforms and a final estimator. Intermediate steps of the pipeline must be 'transforms', that is, they must implement fit and transform methods. The final estimator only needs to implement fit. The transformers in the pipeline can be cached using ``memory`` argument.  The purpose of the pipeline is to assemble several steps that can be cross-validated together while setting different parameters. For this, it enables setting parameters of the various steps using their names and the parameter name separated by a '__', as in the example below. A step's estimator may be replaced entirely by setting the parameter with its name to another estimator, or a transformer removed by setting it to 'passthrough' or ``None``.  Read more in the :ref:`User Guide <pipeline>`.  .. versionadded:: 0.5",
    "sklearn_version": "0.22.2.post1",
    "Hyperparams": [
      {
        "name": "memory",
        "type": "Union",
        "init_args": {
          "semantic_types": [
            "memory"
          ],
          "default": "memory__None",
          "description": "Used to cache the fitted transformers of the pipeline. By default, no caching is performed. If a string is given, it is the path to the caching directory. Enabling caching triggers a clone of the transformers before fitting. Therefore, the transformer instance given to the pipeline cannot be inspected directly. Use the attribute ``named_steps`` or ``steps`` to inspect estimators within the pipeline. Caching the transformers is advantageous when fitting is time consuming."
        },
        "hyperparams": [
          {
            "type": "Hyperparameter",
            "name": "memory__str",
            "init_args": {
              "semantic_types": [
                "memory"
              ],
              "_structural_type": "str"
            }
          },
          {
            "type": "Constant",
            "name": "memory__None",
            "init_args": {
              "semantic_types": [
                "memory"
              ],
              "_structural_type": "None",
              "default": "None"
            }
          }
        ]
      },
      {
        "type": "Hyperparameter",
        "name": "verbose",
        "init_args": {
          "semantic_types": [
            "verbose"
          ],
          "_structural_type": "bool",
          "default": "False",
          "description": "If True, the time elapsed while fitting each step will be printed as it is completed."
        }
      }
    ]
  }
}