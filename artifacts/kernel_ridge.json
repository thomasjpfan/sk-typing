{
  "KernelRidge": {
    "name": "sklearn.kernel_ridge.KernelRidge",
    "common_name": "KernelRidge",
    "description": "Kernel ridge regression. Kernel ridge regression (KRR) combines ridge regression (linear least squares with l2-norm regularization) with the kernel trick. It thus learns a linear function in the space induced by the respective kernel and the data. For non-linear kernels, this corresponds to a non-linear function in the original space.  The form of the model learned by KRR is identical to support vector regression (SVR). However, different loss functions are used: KRR uses squared error loss while support vector regression uses epsilon-insensitive loss, both combined with l2 regularization. In contrast to SVR, fitting a KRR model can be done in closed-form and is typically faster for medium-sized datasets. On the other hand, the learned model is non-sparse and thus slower than SVR, which learns a sparse model for epsilon > 0, at prediction-time.  This estimator has built-in support for multi-variate regression (i.e., when y is a 2d-array of shape [n_samples, n_targets]).  Read more in the :ref:`User Guide <kernel_ridge>`.",
    "sklearn_version": "0.22.2.post1",
    "Hyperparams": [
      {
        "type": "Hyperparameter",
        "name": "alpha",
        "init_args": {
          "semantic_types": [
            "alpha"
          ],
          "_structural_type": "float",
          "default": 1,
          "description": "Small positive values of alpha improve the conditioning of the problem and reduce the variance of the estimates.  Alpha corresponds to ``(2*C)^-1`` in other linear models such as LogisticRegression or LinearSVC. If an array is passed, penalties are assumed to be specific to the targets. Hence they must correspond in number."
        }
      },
      {
        "name": "kernel",
        "type": "Union",
        "init_args": {
          "semantic_types": [
            "kernel"
          ],
          "default": "kernel__str",
          "description": "Kernel mapping used internally. A callable should accept two arguments and the keyword arguments passed to this object as kernel_params, and should return a floating point number. Set to \"precomputed\" in order to pass a precomputed kernel matrix to the estimator methods instead of samples."
        },
        "hyperparams": [
          {
            "type": "Hyperparameter",
            "name": "kernel__str",
            "init_args": {
              "semantic_types": [
                "kernel"
              ],
              "_structural_type": "str",
              "default": "linear"
            }
          },
          {
            "type": "Hyperparameter",
            "name": "kernel__Callable",
            "init_args": {
              "semantic_types": [
                "kernel"
              ],
              "_structural_type": "Callable"
            }
          }
        ]
      },
      {
        "name": "gamma",
        "type": "Union",
        "init_args": {
          "semantic_types": [
            "gamma"
          ],
          "default": "gamma__None",
          "description": "Gamma parameter for the RBF, laplacian, polynomial, exponential chi2 and sigmoid kernels. Interpretation of the default value is left to the kernel; see the documentation for sklearn.metrics.pairwise. Ignored by other kernels."
        },
        "hyperparams": [
          {
            "type": "Hyperparameter",
            "name": "gamma__float",
            "init_args": {
              "semantic_types": [
                "gamma"
              ],
              "_structural_type": "float"
            }
          },
          {
            "type": "Constant",
            "name": "gamma__None",
            "init_args": {
              "semantic_types": [
                "gamma"
              ],
              "_structural_type": "None",
              "default": "None"
            }
          }
        ]
      },
      {
        "type": "Hyperparameter",
        "name": "degree",
        "init_args": {
          "semantic_types": [
            "degree"
          ],
          "_structural_type": "float",
          "default": 3,
          "description": "Degree of the polynomial kernel. Ignored by other kernels."
        }
      },
      {
        "type": "Hyperparameter",
        "name": "coef0",
        "init_args": {
          "semantic_types": [
            "coef0"
          ],
          "_structural_type": "float",
          "default": 1,
          "description": "Zero coefficient for polynomial and sigmoid kernels. Ignored by other kernels."
        }
      },
      {
        "name": "kernel_params",
        "type": "Union",
        "init_args": {
          "semantic_types": [
            "kernel_params"
          ],
          "default": "kernel_params__None",
          "description": "Additional parameters (keyword arguments) for kernel function passed as callable object."
        },
        "hyperparams": [
          {
            "type": "Hyperparameter",
            "name": "kernel_params__dict",
            "init_args": {
              "semantic_types": [
                "kernel_params"
              ],
              "_structural_type": "dict"
            }
          },
          {
            "type": "Constant",
            "name": "kernel_params__None",
            "init_args": {
              "semantic_types": [
                "kernel_params"
              ],
              "_structural_type": "None",
              "default": "None"
            }
          }
        ]
      }
    ]
  }
}