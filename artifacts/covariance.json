{
  "EllipticEnvelope": {
    "name": "sklearn.covariance._elliptic_envelope.EllipticEnvelope",
    "common_name": "EllipticEnvelope",
    "description": "An object for detecting outliers in a Gaussian distributed dataset. Read more in the :ref:`User Guide <outlier_detection>`.",
    "sklearn_version": "0.22.2.post1",
    "Hyperparams": [
      {
        "type": "Hyperparameter",
        "name": "store_precision",
        "init_args": {
          "semantic_types": [
            "store_precision"
          ],
          "_structural_type": "bool",
          "default": "True",
          "description": "Specify if the estimated precision is stored."
        }
      },
      {
        "type": "Hyperparameter",
        "name": "assume_centered",
        "init_args": {
          "semantic_types": [
            "assume_centered"
          ],
          "_structural_type": "bool",
          "default": "False",
          "description": "If True, the support of robust location and covariance estimates is computed, and a covariance estimate is recomputed from it, without centering the data. Useful to work with data whose mean is significantly equal to zero but is not exactly zero. If False, the robust location and covariance are directly computed with the FastMCD algorithm without additional treatment."
        }
      },
      {
        "name": "support_fraction",
        "type": "Union",
        "init_args": {
          "semantic_types": [
            "support_fraction"
          ],
          "default": "support_fraction__None",
          "description": "The proportion of points to be included in the support of the raw MCD estimate. If None, the minimum value of support_fraction will be used within the algorithm: `[n_sample + n_features + 1] / 2`."
        },
        "hyperparams": [
          {
            "type": "Hyperparameter",
            "name": "support_fraction__float",
            "init_args": {
              "semantic_types": [
                "support_fraction"
              ],
              "_structural_type": "float"
            }
          },
          {
            "type": "Constant",
            "name": "support_fraction__None",
            "init_args": {
              "semantic_types": [
                "support_fraction"
              ],
              "_structural_type": "None",
              "default": "None"
            }
          }
        ]
      },
      {
        "type": "Hyperparameter",
        "name": "contamination",
        "init_args": {
          "semantic_types": [
            "contamination"
          ],
          "_structural_type": "float",
          "default": 0.1,
          "description": "The amount of contamination of the data set, i.e. the proportion of outliers in the data set."
        }
      },
      {
        "name": "random_state",
        "type": "Union",
        "init_args": {
          "semantic_types": [
            "random_state"
          ],
          "default": "random_state__None",
          "description": "The seed of the pseudo random number generator to use when shuffling the data.  If int, random_state is the seed used by the random number generator; If RandomState instance, random_state is the random number generator; If None, the random number generator is the RandomState instance used by `np.random`."
        },
        "hyperparams": [
          {
            "type": "Hyperparameter",
            "name": "random_state__int",
            "init_args": {
              "semantic_types": [
                "random_state"
              ],
              "_structural_type": "int"
            }
          },
          {
            "type": "Constant",
            "name": "random_state__None",
            "init_args": {
              "semantic_types": [
                "random_state"
              ],
              "_structural_type": "None",
              "default": "None"
            }
          }
        ]
      }
    ]
  },
  "EmpiricalCovariance": {
    "name": "sklearn.covariance._empirical_covariance.EmpiricalCovariance",
    "common_name": "EmpiricalCovariance",
    "description": "Maximum likelihood covariance estimator Read more in the :ref:`User Guide <covariance>`.",
    "sklearn_version": "0.22.2.post1",
    "Hyperparams": [
      {
        "type": "Hyperparameter",
        "name": "store_precision",
        "init_args": {
          "semantic_types": [
            "store_precision"
          ],
          "_structural_type": "bool",
          "default": "True",
          "description": "Specifies if the estimated precision is stored."
        }
      },
      {
        "type": "Hyperparameter",
        "name": "assume_centered",
        "init_args": {
          "semantic_types": [
            "assume_centered"
          ],
          "_structural_type": "bool",
          "default": "False",
          "description": "If True, data are not centered before computation. Useful when working with data whose mean is almost, but not exactly zero. If False (default), data are centered before computation."
        }
      }
    ]
  },
  "GraphicalLasso": {
    "name": "sklearn.covariance._graph_lasso.GraphicalLasso",
    "common_name": "GraphicalLasso",
    "description": "Sparse inverse covariance estimation with an l1-penalized estimator. Read more in the :ref:`User Guide <sparse_inverse_covariance>`.",
    "sklearn_version": "0.22.2.post1",
    "Hyperparams": [
      {
        "type": "Hyperparameter",
        "name": "alpha",
        "init_args": {
          "semantic_types": [
            "alpha"
          ],
          "_structural_type": "float",
          "default": 0.01,
          "description": "The regularization parameter: the higher alpha, the more regularization, the sparser the inverse covariance."
        }
      },
      {
        "type": "Enumeration",
        "name": "mode",
        "init_args": {
          "semantic_types": [
            "mode"
          ],
          "values": [
            "cd",
            "lars"
          ],
          "_structural_type": "str",
          "default": "cd",
          "description": "The Lasso solver to use: coordinate descent or LARS. Use LARS for very sparse underlying graphs, where p > n. Elsewhere prefer cd which is more numerically stable."
        }
      },
      {
        "type": "Hyperparameter",
        "name": "tol",
        "init_args": {
          "semantic_types": [
            "tol"
          ],
          "_structural_type": "float",
          "default": 0.0001,
          "description": "The tolerance to declare convergence: if the dual gap goes below this value, iterations are stopped."
        }
      },
      {
        "type": "Hyperparameter",
        "name": "enet_tol",
        "init_args": {
          "semantic_types": [
            "enet_tol"
          ],
          "_structural_type": "float",
          "default": 0.0001,
          "description": "The tolerance for the elastic net solver used to calculate the descent direction. This parameter controls the accuracy of the search direction for a given column update, not of the overall parameter estimate. Only used for mode='cd'."
        }
      },
      {
        "type": "Hyperparameter",
        "name": "max_iter",
        "init_args": {
          "semantic_types": [
            "max_iter"
          ],
          "_structural_type": "int",
          "default": 100,
          "description": "The maximum number of iterations."
        }
      },
      {
        "type": "Hyperparameter",
        "name": "verbose",
        "init_args": {
          "semantic_types": [
            "verbose"
          ],
          "_structural_type": "bool",
          "default": "False",
          "description": "If verbose is True, the objective function and dual gap are plotted at each iteration."
        }
      },
      {
        "type": "Hyperparameter",
        "name": "assume_centered",
        "init_args": {
          "semantic_types": [
            "assume_centered"
          ],
          "_structural_type": "bool",
          "default": "False",
          "description": "If True, data are not centered before computation. Useful when working with data whose mean is almost, but not exactly zero. If False, data are centered before computation."
        }
      }
    ]
  },
  "GraphicalLassoCV": {
    "name": "sklearn.covariance._graph_lasso.GraphicalLassoCV",
    "common_name": "GraphicalLassoCV",
    "description": "Sparse inverse covariance w/ cross-validated choice of the l1 penalty. See glossary entry for :term:`cross-validation estimator`.  Read more in the :ref:`User Guide <sparse_inverse_covariance>`.",
    "sklearn_version": "0.22.2.post1",
    "Hyperparams": [
      {
        "name": "alphas",
        "type": "Union",
        "init_args": {
          "semantic_types": [
            "alphas"
          ],
          "default": "alphas__int",
          "description": "If an integer is given, it fixes the number of points on the grids of alpha to be used. If a list is given, it gives the grid to be used. See the notes in the class docstring for more details."
        },
        "hyperparams": [
          {
            "type": "Hyperparameter",
            "name": "alphas__int",
            "init_args": {
              "semantic_types": [
                "alphas"
              ],
              "_structural_type": "int",
              "default": 4
            }
          },
          {
            "name": "alphas__ndarray",
            "type": "Hyperparameter",
            "init_args": {
              "_structural_type": "ndarray",
              "semantic_types": [
                "alphas"
              ]
            }
          }
        ]
      },
      {
        "type": "Hyperparameter",
        "name": "n_refinements",
        "init_args": {
          "semantic_types": [
            "n_refinements"
          ],
          "_structural_type": "int",
          "default": 4,
          "description": "The number of times the grid is refined. Not used if explicit values of alphas are passed."
        }
      },
      {
        "name": "cv",
        "type": "Union",
        "init_args": {
          "semantic_types": [
            "cv"
          ],
          "default": "cv__None",
          "description": "Determines the cross-validation splitting strategy. Possible inputs for cv are:  - None, to use the default 5-fold cross-validation, - integer, to specify the number of folds. - :term:`CV splitter`, - An iterable yielding (train, test) splits as arrays of indices.  For integer/None inputs :class:`KFold` is used.  Refer :ref:`User Guide <cross_validation>` for the various cross-validation strategies that can be used here.  .. versionchanged:: 0.20     ``cv`` default value if None changed from 3-fold to 5-fold."
        },
        "hyperparams": [
          {
            "type": "Hyperparameter",
            "name": "cv__int",
            "init_args": {
              "semantic_types": [
                "cv"
              ],
              "_structural_type": "int"
            }
          },
          {
            "type": "Constant",
            "name": "cv__None",
            "init_args": {
              "semantic_types": [
                "cv"
              ],
              "_structural_type": "None",
              "default": "None"
            }
          }
        ]
      },
      {
        "type": "Hyperparameter",
        "name": "tol",
        "init_args": {
          "semantic_types": [
            "tol"
          ],
          "_structural_type": "float",
          "default": 0.0001,
          "description": "The tolerance to declare convergence: if the dual gap goes below this value, iterations are stopped."
        }
      },
      {
        "type": "Hyperparameter",
        "name": "enet_tol",
        "init_args": {
          "semantic_types": [
            "enet_tol"
          ],
          "_structural_type": "float",
          "default": 0.0001,
          "description": "The tolerance for the elastic net solver used to calculate the descent direction. This parameter controls the accuracy of the search direction for a given column update, not of the overall parameter estimate. Only used for mode='cd'."
        }
      },
      {
        "type": "Hyperparameter",
        "name": "max_iter",
        "init_args": {
          "semantic_types": [
            "max_iter"
          ],
          "_structural_type": "int",
          "default": 100,
          "description": "Maximum number of iterations."
        }
      },
      {
        "type": "Enumeration",
        "name": "mode",
        "init_args": {
          "semantic_types": [
            "mode"
          ],
          "values": [
            "cd",
            "lars"
          ],
          "_structural_type": "str",
          "default": "cd",
          "description": "The Lasso solver to use: coordinate descent or LARS. Use LARS for very sparse underlying graphs, where number of features is greater than number of samples. Elsewhere prefer cd which is more numerically stable."
        }
      },
      {
        "name": "n_jobs",
        "type": "Union",
        "init_args": {
          "semantic_types": [
            "n_jobs"
          ],
          "default": "n_jobs__None",
          "description": "number of jobs to run in parallel. ``None`` means 1 unless in a :obj:`joblib.parallel_backend` context. ``-1`` means using all processors. See :term:`Glossary <n_jobs>` for more details."
        },
        "hyperparams": [
          {
            "type": "Hyperparameter",
            "name": "n_jobs__int",
            "init_args": {
              "semantic_types": [
                "n_jobs"
              ],
              "_structural_type": "int"
            }
          },
          {
            "type": "Constant",
            "name": "n_jobs__None",
            "init_args": {
              "semantic_types": [
                "n_jobs"
              ],
              "_structural_type": "None",
              "default": "None"
            }
          }
        ]
      },
      {
        "type": "Hyperparameter",
        "name": "verbose",
        "init_args": {
          "semantic_types": [
            "verbose"
          ],
          "_structural_type": "bool",
          "default": "False",
          "description": "If verbose is True, the objective function and duality gap are printed at each iteration."
        }
      },
      {
        "type": "Hyperparameter",
        "name": "assume_centered",
        "init_args": {
          "semantic_types": [
            "assume_centered"
          ],
          "_structural_type": "bool",
          "default": "False",
          "description": "If True, data are not centered before computation. Useful when working with data whose mean is almost, but not exactly zero. If False, data are centered before computation."
        }
      }
    ]
  },
  "LedoitWolf": {
    "name": "sklearn.covariance._shrunk_covariance.LedoitWolf",
    "common_name": "LedoitWolf",
    "description": "LedoitWolf Estimator Ledoit-Wolf is a particular form of shrinkage, where the shrinkage coefficient is computed using O. Ledoit and M. Wolf's formula as described in \"A Well-Conditioned Estimator for Large-Dimensional Covariance Matrices\", Ledoit and Wolf, Journal of Multivariate Analysis, Volume 88, Issue 2, February 2004, pages 365-411.  Read more in the :ref:`User Guide <shrunk_covariance>`.",
    "sklearn_version": "0.22.2.post1",
    "Hyperparams": [
      {
        "type": "Hyperparameter",
        "name": "store_precision",
        "init_args": {
          "semantic_types": [
            "store_precision"
          ],
          "_structural_type": "bool",
          "default": "True",
          "description": "Specify if the estimated precision is stored."
        }
      },
      {
        "type": "Hyperparameter",
        "name": "assume_centered",
        "init_args": {
          "semantic_types": [
            "assume_centered"
          ],
          "_structural_type": "bool",
          "default": "False",
          "description": "If True, data will not be centered before computation. Useful when working with data whose mean is almost, but not exactly zero. If False (default), data will be centered before computation."
        }
      },
      {
        "type": "Hyperparameter",
        "name": "block_size",
        "init_args": {
          "semantic_types": [
            "block_size"
          ],
          "_structural_type": "int",
          "default": 1000,
          "description": "Size of the blocks into which the covariance matrix will be split during its Ledoit-Wolf estimation. This is purely a memory optimization and does not affect results."
        }
      }
    ]
  },
  "MinCovDet": {
    "name": "sklearn.covariance._robust_covariance.MinCovDet",
    "common_name": "MinCovDet",
    "description": "Minimum Covariance Determinant (MCD): robust estimator of covariance. The Minimum Covariance Determinant covariance estimator is to be applied on Gaussian-distributed data, but could still be relevant on data drawn from a unimodal, symmetric distribution. It is not meant to be used with multi-modal data (the algorithm used to fit a MinCovDet object is likely to fail in such a case). One should consider projection pursuit methods to deal with multi-modal datasets.  Read more in the :ref:`User Guide <robust_covariance>`.",
    "sklearn_version": "0.22.2.post1",
    "Hyperparams": [
      {
        "type": "Hyperparameter",
        "name": "store_precision",
        "init_args": {
          "semantic_types": [
            "store_precision"
          ],
          "_structural_type": "bool",
          "default": "True",
          "description": "Specify if the estimated precision is stored."
        }
      },
      {
        "type": "Hyperparameter",
        "name": "assume_centered",
        "init_args": {
          "semantic_types": [
            "assume_centered"
          ],
          "_structural_type": "bool",
          "default": "False",
          "description": "If True, the support of the robust location and the covariance estimates is computed, and a covariance estimate is recomputed from it, without centering the data. Useful to work with data whose mean is significantly equal to zero but is not exactly zero. If False, the robust location and covariance are directly computed with the FastMCD algorithm without additional treatment."
        }
      },
      {
        "name": "support_fraction",
        "type": "Union",
        "init_args": {
          "semantic_types": [
            "support_fraction"
          ],
          "default": "support_fraction__None",
          "description": "The proportion of points to be included in the support of the raw MCD estimate. Default is None, which implies that the minimum value of support_fraction will be used within the algorithm: [n_sample + n_features + 1] / 2"
        },
        "hyperparams": [
          {
            "type": "Hyperparameter",
            "name": "support_fraction__float",
            "init_args": {
              "semantic_types": [
                "support_fraction"
              ],
              "_structural_type": "float"
            }
          },
          {
            "type": "Constant",
            "name": "support_fraction__None",
            "init_args": {
              "semantic_types": [
                "support_fraction"
              ],
              "_structural_type": "None",
              "default": "None"
            }
          }
        ]
      },
      {
        "name": "random_state",
        "type": "Union",
        "init_args": {
          "semantic_types": [
            "random_state"
          ],
          "default": "random_state__None",
          "description": "If int, random_state is the seed used by the random number generator; If RandomState instance, random_state is the random number generator; If None, the random number generator is the RandomState instance used by `np.random`."
        },
        "hyperparams": [
          {
            "type": "Hyperparameter",
            "name": "random_state__int",
            "init_args": {
              "semantic_types": [
                "random_state"
              ],
              "_structural_type": "int"
            }
          },
          {
            "type": "Constant",
            "name": "random_state__None",
            "init_args": {
              "semantic_types": [
                "random_state"
              ],
              "_structural_type": "None",
              "default": "None"
            }
          }
        ]
      }
    ]
  },
  "OAS": {
    "name": "sklearn.covariance._shrunk_covariance.OAS",
    "common_name": "OAS",
    "description": "Oracle Approximating Shrinkage Estimator Read more in the :ref:`User Guide <shrunk_covariance>`.  OAS is a particular form of shrinkage described in \"Shrinkage Algorithms for MMSE Covariance Estimation\" Chen et al., IEEE Trans. on Sign. Proc., Volume 58, Issue 10, October 2010.  The formula used here does not correspond to the one given in the article. In the original article, formula (23) states that 2/p is multiplied by Trace(cov*cov) in both the numerator and denominator, but this operation is omitted because for a large p, the value of 2/p is so small that it doesn't affect the value of the estimator.",
    "sklearn_version": "0.22.2.post1",
    "Hyperparams": [
      {
        "type": "Hyperparameter",
        "name": "store_precision",
        "init_args": {
          "semantic_types": [
            "store_precision"
          ],
          "_structural_type": "bool",
          "default": "True",
          "description": "Specify if the estimated precision is stored."
        }
      },
      {
        "type": "Hyperparameter",
        "name": "assume_centered",
        "init_args": {
          "semantic_types": [
            "assume_centered"
          ],
          "_structural_type": "bool",
          "default": "False",
          "description": "If True, data will not be centered before computation. Useful when working with data whose mean is almost, but not exactly zero. If False (default), data will be centered before computation."
        }
      }
    ]
  },
  "ShrunkCovariance": {
    "name": "sklearn.covariance._shrunk_covariance.ShrunkCovariance",
    "common_name": "ShrunkCovariance",
    "description": "Covariance estimator with shrinkage Read more in the :ref:`User Guide <shrunk_covariance>`.",
    "sklearn_version": "0.22.2.post1",
    "Hyperparams": [
      {
        "type": "Hyperparameter",
        "name": "store_precision",
        "init_args": {
          "semantic_types": [
            "store_precision"
          ],
          "_structural_type": "bool",
          "default": "True",
          "description": "Specify if the estimated precision is stored"
        }
      },
      {
        "type": "Hyperparameter",
        "name": "assume_centered",
        "init_args": {
          "semantic_types": [
            "assume_centered"
          ],
          "_structural_type": "bool",
          "default": "False",
          "description": "If True, data will not be centered before computation. Useful when working with data whose mean is almost, but not exactly zero. If False, data will be centered before computation."
        }
      },
      {
        "type": "Hyperparameter",
        "name": "shrinkage",
        "init_args": {
          "semantic_types": [
            "shrinkage"
          ],
          "_structural_type": "float",
          "default": 0.1,
          "description": "Coefficient in the convex combination used for the computation of the shrunk estimate."
        }
      }
    ]
  }
}