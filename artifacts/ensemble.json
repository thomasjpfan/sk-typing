{
  "AdaBoostClassifier": {
    "name": "sklearn.ensemble._weight_boosting.AdaBoostClassifier",
    "common_name": "AdaBoostClassifier",
    "description": "An AdaBoost classifier. An AdaBoost [1] classifier is a meta-estimator that begins by fitting a classifier on the original dataset and then fits additional copies of the classifier on the same dataset but where the weights of incorrectly classified instances are adjusted such that subsequent classifiers focus more on difficult cases.  This class implements the algorithm known as AdaBoost-SAMME [2].  Read more in the :ref:`User Guide <adaboost>`.  .. versionadded:: 0.14",
    "sklearn_version": "0.22.2.post1",
    "Hyperparams": [
      {
        "name": "base_estimator",
        "type": "Union",
        "init_args": {
          "semantic_types": [
            "base_estimator"
          ],
          "default": "base_estimator__None",
          "description": "The base estimator from which the boosted ensemble is built. Support for sample weighting is required, as well as proper ``classes_`` and ``n_classes_`` attributes. If ``None``, then the base estimator is ``DecisionTreeClassifier(max_depth=1)``."
        },
        "hyperparams": [
          {
            "name": "base_estimator__Estimator",
            "type": "Hyperparameter",
            "init_args": {
              "_structural_type": "Estimator",
              "semantic_types": [
                "base_estimator"
              ]
            }
          },
          {
            "type": "Constant",
            "name": "base_estimator__None",
            "init_args": {
              "semantic_types": [
                "base_estimator"
              ],
              "_structural_type": "None",
              "default": "None"
            }
          }
        ]
      },
      {
        "type": "Hyperparameter",
        "name": "n_estimators",
        "init_args": {
          "semantic_types": [
            "n_estimators"
          ],
          "_structural_type": "int",
          "default": 50,
          "description": "The maximum number of estimators at which boosting is terminated. In case of perfect fit, the learning procedure is stopped early."
        }
      },
      {
        "type": "Hyperparameter",
        "name": "learning_rate",
        "init_args": {
          "semantic_types": [
            "learning_rate"
          ],
          "_structural_type": "float",
          "default": 1.0,
          "description": "Learning rate shrinks the contribution of each classifier by ``learning_rate``. There is a trade-off between ``learning_rate`` and ``n_estimators``."
        }
      },
      {
        "type": "Enumeration",
        "name": "algorithm",
        "init_args": {
          "semantic_types": [
            "algorithm"
          ],
          "values": [
            "SAMME",
            "SAMME.R"
          ],
          "_structural_type": "str",
          "default": "SAMME.R",
          "description": "If 'SAMME.R' then use the SAMME.R real boosting algorithm. ``base_estimator`` must support calculation of class probabilities. If 'SAMME' then use the SAMME discrete boosting algorithm. The SAMME.R algorithm typically converges faster than SAMME, achieving a lower test error with fewer boosting iterations."
        }
      },
      {
        "name": "random_state",
        "type": "Union",
        "init_args": {
          "semantic_types": [
            "random_state"
          ],
          "default": "random_state__None",
          "description": "If int, random_state is the seed used by the random number generator; If RandomState instance, random_state is the random number generator; If None, the random number generator is the RandomState instance used by `np.random`."
        },
        "hyperparams": [
          {
            "type": "Hyperparameter",
            "name": "random_state__int",
            "init_args": {
              "semantic_types": [
                "random_state"
              ],
              "_structural_type": "int"
            }
          },
          {
            "type": "Constant",
            "name": "random_state__None",
            "init_args": {
              "semantic_types": [
                "random_state"
              ],
              "_structural_type": "None",
              "default": "None"
            }
          }
        ]
      }
    ]
  },
  "AdaBoostRegressor": {
    "name": "sklearn.ensemble._weight_boosting.AdaBoostRegressor",
    "common_name": "AdaBoostRegressor",
    "description": "An AdaBoost regressor. An AdaBoost [1] regressor is a meta-estimator that begins by fitting a regressor on the original dataset and then fits additional copies of the regressor on the same dataset but where the weights of instances are adjusted according to the error of the current prediction. As such, subsequent regressors focus more on difficult cases.  This class implements the algorithm known as AdaBoost.R2 [2].  Read more in the :ref:`User Guide <adaboost>`.  .. versionadded:: 0.14",
    "sklearn_version": "0.22.2.post1",
    "Hyperparams": [
      {
        "name": "base_estimator",
        "type": "Union",
        "init_args": {
          "semantic_types": [
            "base_estimator"
          ],
          "default": "base_estimator__None",
          "description": "The base estimator from which the boosted ensemble is built. If ``None``, then the base estimator is ``DecisionTreeRegressor(max_depth=3)``."
        },
        "hyperparams": [
          {
            "name": "base_estimator__Estimator",
            "type": "Hyperparameter",
            "init_args": {
              "_structural_type": "Estimator",
              "semantic_types": [
                "base_estimator"
              ]
            }
          },
          {
            "type": "Constant",
            "name": "base_estimator__None",
            "init_args": {
              "semantic_types": [
                "base_estimator"
              ],
              "_structural_type": "None",
              "default": "None"
            }
          }
        ]
      },
      {
        "type": "Hyperparameter",
        "name": "n_estimators",
        "init_args": {
          "semantic_types": [
            "n_estimators"
          ],
          "_structural_type": "int",
          "default": 50,
          "description": "The maximum number of estimators at which boosting is terminated. In case of perfect fit, the learning procedure is stopped early."
        }
      },
      {
        "type": "Hyperparameter",
        "name": "learning_rate",
        "init_args": {
          "semantic_types": [
            "learning_rate"
          ],
          "_structural_type": "float",
          "default": 1.0,
          "description": "Learning rate shrinks the contribution of each regressor by ``learning_rate``. There is a trade-off between ``learning_rate`` and ``n_estimators``."
        }
      },
      {
        "type": "Enumeration",
        "name": "loss",
        "init_args": {
          "semantic_types": [
            "loss"
          ],
          "values": [
            "linear",
            "square",
            "exponential"
          ],
          "_structural_type": "str",
          "default": "linear",
          "description": "The loss function to use when updating the weights after each boosting iteration."
        }
      },
      {
        "name": "random_state",
        "type": "Union",
        "init_args": {
          "semantic_types": [
            "random_state"
          ],
          "default": "random_state__None",
          "description": "If int, random_state is the seed used by the random number generator; If RandomState instance, random_state is the random number generator; If None, the random number generator is the RandomState instance used by `np.random`."
        },
        "hyperparams": [
          {
            "type": "Hyperparameter",
            "name": "random_state__int",
            "init_args": {
              "semantic_types": [
                "random_state"
              ],
              "_structural_type": "int"
            }
          },
          {
            "type": "Constant",
            "name": "random_state__None",
            "init_args": {
              "semantic_types": [
                "random_state"
              ],
              "_structural_type": "None",
              "default": "None"
            }
          }
        ]
      }
    ]
  },
  "BaggingClassifier": {
    "name": "sklearn.ensemble._bagging.BaggingClassifier",
    "common_name": "BaggingClassifier",
    "description": "A Bagging classifier. A Bagging classifier is an ensemble meta-estimator that fits base classifiers each on random subsets of the original dataset and then aggregate their individual predictions (either by voting or by averaging) to form a final prediction. Such a meta-estimator can typically be used as a way to reduce the variance of a black-box estimator (e.g., a decision tree), by introducing randomization into its construction procedure and then making an ensemble out of it.  This algorithm encompasses several works from the literature. When random subsets of the dataset are drawn as random subsets of the samples, then this algorithm is known as Pasting [1]_. If samples are drawn with replacement, then the method is known as Bagging [2]_. When random subsets of the dataset are drawn as random subsets of the features, then the method is known as Random Subspaces [3]_. Finally, when base estimators are built on subsets of both samples and features, then the method is known as Random Patches [4]_.  Read more in the :ref:`User Guide <bagging>`.  .. versionadded:: 0.15",
    "sklearn_version": "0.22.2.post1",
    "Hyperparams": [
      {
        "name": "base_estimator",
        "type": "Union",
        "init_args": {
          "semantic_types": [
            "base_estimator"
          ],
          "default": "base_estimator__None",
          "description": "The base estimator to fit on random subsets of the dataset. If None, then the base estimator is a decision tree."
        },
        "hyperparams": [
          {
            "name": "base_estimator__Estimator",
            "type": "Hyperparameter",
            "init_args": {
              "_structural_type": "Estimator",
              "semantic_types": [
                "base_estimator"
              ]
            }
          },
          {
            "type": "Constant",
            "name": "base_estimator__None",
            "init_args": {
              "semantic_types": [
                "base_estimator"
              ],
              "_structural_type": "None",
              "default": "None"
            }
          }
        ]
      },
      {
        "type": "Hyperparameter",
        "name": "n_estimators",
        "init_args": {
          "semantic_types": [
            "n_estimators"
          ],
          "_structural_type": "int",
          "default": 10,
          "description": "The number of base estimators in the ensemble."
        }
      },
      {
        "name": "max_samples",
        "type": "Union",
        "init_args": {
          "semantic_types": [
            "max_samples"
          ],
          "default": "max_samples__float",
          "description": "The number of samples to draw from X to train each base estimator.  - If int, then draw `max_samples` samples. - If float, then draw `max_samples * X.shape[0]` samples."
        },
        "hyperparams": [
          {
            "type": "Hyperparameter",
            "name": "max_samples__float",
            "init_args": {
              "semantic_types": [
                "max_samples"
              ],
              "_structural_type": "float",
              "default": 1.0
            }
          },
          {
            "type": "Hyperparameter",
            "name": "max_samples__int",
            "init_args": {
              "semantic_types": [
                "max_samples"
              ],
              "_structural_type": "int"
            }
          }
        ]
      },
      {
        "name": "max_features",
        "type": "Union",
        "init_args": {
          "semantic_types": [
            "max_features"
          ],
          "default": "max_features__float",
          "description": "The number of features to draw from X to train each base estimator.  - If int, then draw `max_features` features. - If float, then draw `max_features * X.shape[1]` features."
        },
        "hyperparams": [
          {
            "type": "Hyperparameter",
            "name": "max_features__float",
            "init_args": {
              "semantic_types": [
                "max_features"
              ],
              "_structural_type": "float",
              "default": 1.0
            }
          },
          {
            "type": "Hyperparameter",
            "name": "max_features__int",
            "init_args": {
              "semantic_types": [
                "max_features"
              ],
              "_structural_type": "int"
            }
          }
        ]
      },
      {
        "type": "Hyperparameter",
        "name": "bootstrap",
        "init_args": {
          "semantic_types": [
            "bootstrap"
          ],
          "_structural_type": "bool",
          "default": "True",
          "description": "Whether samples are drawn with replacement. If False, sampling without replacement is performed."
        }
      },
      {
        "type": "Hyperparameter",
        "name": "bootstrap_features",
        "init_args": {
          "semantic_types": [
            "bootstrap_features"
          ],
          "_structural_type": "bool",
          "default": "False",
          "description": "Whether features are drawn with replacement."
        }
      },
      {
        "type": "Hyperparameter",
        "name": "oob_score",
        "init_args": {
          "semantic_types": [
            "oob_score"
          ],
          "_structural_type": "bool",
          "default": "False",
          "description": "Whether to use out-of-bag samples to estimate the generalization error."
        }
      },
      {
        "type": "Hyperparameter",
        "name": "warm_start",
        "init_args": {
          "semantic_types": [
            "warm_start"
          ],
          "_structural_type": "bool",
          "default": "False",
          "description": "When set to True, reuse the solution of the previous call to fit and add more estimators to the ensemble, otherwise, just fit a whole new ensemble. See :term:`the Glossary <warm_start>`.  .. versionadded:: 0.17    *warm_start* constructor parameter."
        }
      },
      {
        "name": "n_jobs",
        "type": "Union",
        "init_args": {
          "semantic_types": [
            "n_jobs"
          ],
          "default": "n_jobs__None",
          "description": "The number of jobs to run in parallel for both :meth:`fit` and :meth:`predict`. ``None`` means 1 unless in a :obj:`joblib.parallel_backend` context. ``-1`` means using all processors. See :term:`Glossary <n_jobs>` for more details."
        },
        "hyperparams": [
          {
            "type": "Hyperparameter",
            "name": "n_jobs__int",
            "init_args": {
              "semantic_types": [
                "n_jobs"
              ],
              "_structural_type": "int"
            }
          },
          {
            "type": "Constant",
            "name": "n_jobs__None",
            "init_args": {
              "semantic_types": [
                "n_jobs"
              ],
              "_structural_type": "None",
              "default": "None"
            }
          }
        ]
      },
      {
        "name": "random_state",
        "type": "Union",
        "init_args": {
          "semantic_types": [
            "random_state"
          ],
          "default": "random_state__None",
          "description": "If int, random_state is the seed used by the random number generator; If RandomState instance, random_state is the random number generator; If None, the random number generator is the RandomState instance used by `np.random`."
        },
        "hyperparams": [
          {
            "type": "Hyperparameter",
            "name": "random_state__int",
            "init_args": {
              "semantic_types": [
                "random_state"
              ],
              "_structural_type": "int"
            }
          },
          {
            "type": "Constant",
            "name": "random_state__None",
            "init_args": {
              "semantic_types": [
                "random_state"
              ],
              "_structural_type": "None",
              "default": "None"
            }
          }
        ]
      },
      {
        "type": "Hyperparameter",
        "name": "verbose",
        "init_args": {
          "semantic_types": [
            "verbose"
          ],
          "_structural_type": "int",
          "default": 0,
          "description": "Controls the verbosity when fitting and predicting."
        }
      }
    ]
  },
  "BaggingRegressor": {
    "name": "sklearn.ensemble._bagging.BaggingRegressor",
    "common_name": "BaggingRegressor",
    "description": "A Bagging regressor. A Bagging regressor is an ensemble meta-estimator that fits base regressors each on random subsets of the original dataset and then aggregate their individual predictions (either by voting or by averaging) to form a final prediction. Such a meta-estimator can typically be used as a way to reduce the variance of a black-box estimator (e.g., a decision tree), by introducing randomization into its construction procedure and then making an ensemble out of it.  This algorithm encompasses several works from the literature. When random subsets of the dataset are drawn as random subsets of the samples, then this algorithm is known as Pasting [1]_. If samples are drawn with replacement, then the method is known as Bagging [2]_. When random subsets of the dataset are drawn as random subsets of the features, then the method is known as Random Subspaces [3]_. Finally, when base estimators are built on subsets of both samples and features, then the method is known as Random Patches [4]_.  Read more in the :ref:`User Guide <bagging>`.  .. versionadded:: 0.15",
    "sklearn_version": "0.22.2.post1",
    "Hyperparams": [
      {
        "name": "base_estimator",
        "type": "Union",
        "init_args": {
          "semantic_types": [
            "base_estimator"
          ],
          "default": "base_estimator__None",
          "description": "The base estimator to fit on random subsets of the dataset. If None, then the base estimator is a decision tree."
        },
        "hyperparams": [
          {
            "name": "base_estimator__Estimator",
            "type": "Hyperparameter",
            "init_args": {
              "_structural_type": "Estimator",
              "semantic_types": [
                "base_estimator"
              ]
            }
          },
          {
            "type": "Constant",
            "name": "base_estimator__None",
            "init_args": {
              "semantic_types": [
                "base_estimator"
              ],
              "_structural_type": "None",
              "default": "None"
            }
          }
        ]
      },
      {
        "type": "Hyperparameter",
        "name": "n_estimators",
        "init_args": {
          "semantic_types": [
            "n_estimators"
          ],
          "_structural_type": "int",
          "default": 10,
          "description": "The number of base estimators in the ensemble."
        }
      },
      {
        "name": "max_samples",
        "type": "Union",
        "init_args": {
          "semantic_types": [
            "max_samples"
          ],
          "default": "max_samples__float",
          "description": "The number of samples to draw from X to train each base estimator.  - If int, then draw `max_samples` samples. - If float, then draw `max_samples * X.shape[0]` samples."
        },
        "hyperparams": [
          {
            "type": "Hyperparameter",
            "name": "max_samples__float",
            "init_args": {
              "semantic_types": [
                "max_samples"
              ],
              "_structural_type": "float",
              "default": 1.0
            }
          },
          {
            "type": "Hyperparameter",
            "name": "max_samples__int",
            "init_args": {
              "semantic_types": [
                "max_samples"
              ],
              "_structural_type": "int"
            }
          }
        ]
      },
      {
        "name": "max_features",
        "type": "Union",
        "init_args": {
          "semantic_types": [
            "max_features"
          ],
          "default": "max_features__float",
          "description": "The number of features to draw from X to train each base estimator.  - If int, then draw `max_features` features. - If float, then draw `max_features * X.shape[1]` features."
        },
        "hyperparams": [
          {
            "type": "Hyperparameter",
            "name": "max_features__float",
            "init_args": {
              "semantic_types": [
                "max_features"
              ],
              "_structural_type": "float",
              "default": 1.0
            }
          },
          {
            "type": "Hyperparameter",
            "name": "max_features__int",
            "init_args": {
              "semantic_types": [
                "max_features"
              ],
              "_structural_type": "int"
            }
          }
        ]
      },
      {
        "type": "Hyperparameter",
        "name": "bootstrap",
        "init_args": {
          "semantic_types": [
            "bootstrap"
          ],
          "_structural_type": "bool",
          "default": "True",
          "description": "Whether samples are drawn with replacement. If False, sampling without replacement is performed."
        }
      },
      {
        "type": "Hyperparameter",
        "name": "bootstrap_features",
        "init_args": {
          "semantic_types": [
            "bootstrap_features"
          ],
          "_structural_type": "bool",
          "default": "False",
          "description": "Whether features are drawn with replacement."
        }
      },
      {
        "type": "Hyperparameter",
        "name": "oob_score",
        "init_args": {
          "semantic_types": [
            "oob_score"
          ],
          "_structural_type": "bool",
          "default": "False",
          "description": "Whether to use out-of-bag samples to estimate the generalization error."
        }
      },
      {
        "type": "Hyperparameter",
        "name": "warm_start",
        "init_args": {
          "semantic_types": [
            "warm_start"
          ],
          "_structural_type": "bool",
          "default": "False",
          "description": "When set to True, reuse the solution of the previous call to fit and add more estimators to the ensemble, otherwise, just fit a whole new ensemble. See :term:`the Glossary <warm_start>`."
        }
      },
      {
        "name": "n_jobs",
        "type": "Union",
        "init_args": {
          "semantic_types": [
            "n_jobs"
          ],
          "default": "n_jobs__None",
          "description": "The number of jobs to run in parallel for both :meth:`fit` and :meth:`predict`. ``None`` means 1 unless in a :obj:`joblib.parallel_backend` context. ``-1`` means using all processors. See :term:`Glossary <n_jobs>` for more details."
        },
        "hyperparams": [
          {
            "type": "Hyperparameter",
            "name": "n_jobs__int",
            "init_args": {
              "semantic_types": [
                "n_jobs"
              ],
              "_structural_type": "int"
            }
          },
          {
            "type": "Constant",
            "name": "n_jobs__None",
            "init_args": {
              "semantic_types": [
                "n_jobs"
              ],
              "_structural_type": "None",
              "default": "None"
            }
          }
        ]
      },
      {
        "name": "random_state",
        "type": "Union",
        "init_args": {
          "semantic_types": [
            "random_state"
          ],
          "default": "random_state__None",
          "description": "If int, random_state is the seed used by the random number generator; If RandomState instance, random_state is the random number generator; If None, the random number generator is the RandomState instance used by `np.random`."
        },
        "hyperparams": [
          {
            "type": "Hyperparameter",
            "name": "random_state__int",
            "init_args": {
              "semantic_types": [
                "random_state"
              ],
              "_structural_type": "int"
            }
          },
          {
            "type": "Constant",
            "name": "random_state__None",
            "init_args": {
              "semantic_types": [
                "random_state"
              ],
              "_structural_type": "None",
              "default": "None"
            }
          }
        ]
      },
      {
        "type": "Hyperparameter",
        "name": "verbose",
        "init_args": {
          "semantic_types": [
            "verbose"
          ],
          "_structural_type": "int",
          "default": 0,
          "description": "Controls the verbosity when fitting and predicting."
        }
      }
    ]
  },
  "ExtraTreesClassifier": {
    "name": "sklearn.ensemble._forest.ExtraTreesClassifier",
    "common_name": "ExtraTreesClassifier",
    "description": "An extra-trees classifier. This class implements a meta estimator that fits a number of randomized decision trees (a.k.a. extra-trees) on various sub-samples of the dataset and uses averaging to improve the predictive accuracy and control over-fitting.  Read more in the :ref:`User Guide <forest>`.",
    "sklearn_version": "0.22.2.post1",
    "Hyperparams": [
      {
        "type": "Hyperparameter",
        "name": "n_estimators",
        "init_args": {
          "semantic_types": [
            "n_estimators"
          ],
          "_structural_type": "int",
          "default": 100,
          "description": "The number of trees in the forest.  .. versionchanged:: 0.22    The default value of ``n_estimators`` changed from 10 to 100    in 0.22."
        }
      },
      {
        "type": "Enumeration",
        "name": "criterion",
        "init_args": {
          "semantic_types": [
            "criterion"
          ],
          "values": [
            "gini",
            "entropy"
          ],
          "_structural_type": "str",
          "default": "gini",
          "description": "The function to measure the quality of a split. Supported criteria are \"gini\" for the Gini impurity and \"entropy\" for the information gain."
        }
      },
      {
        "name": "max_depth",
        "type": "Union",
        "init_args": {
          "semantic_types": [
            "max_depth"
          ],
          "default": "max_depth__None",
          "description": "The maximum depth of the tree. If None, then nodes are expanded until all leaves are pure or until all leaves contain less than min_samples_split samples."
        },
        "hyperparams": [
          {
            "type": "Hyperparameter",
            "name": "max_depth__int",
            "init_args": {
              "semantic_types": [
                "max_depth"
              ],
              "_structural_type": "int"
            }
          },
          {
            "type": "Constant",
            "name": "max_depth__None",
            "init_args": {
              "semantic_types": [
                "max_depth"
              ],
              "_structural_type": "None",
              "default": "None"
            }
          }
        ]
      },
      {
        "name": "min_samples_split",
        "type": "Union",
        "init_args": {
          "semantic_types": [
            "min_samples_split"
          ],
          "default": "min_samples_split__int",
          "description": "The minimum number of samples required to split an internal node:  - If int, then consider `min_samples_split` as the minimum number. - If float, then `min_samples_split` is a fraction and   `ceil(min_samples_split * n_samples)` are the minimum   number of samples for each split.  .. versionchanged:: 0.18    Added float values for fractions."
        },
        "hyperparams": [
          {
            "type": "Hyperparameter",
            "name": "min_samples_split__int",
            "init_args": {
              "semantic_types": [
                "min_samples_split"
              ],
              "_structural_type": "int",
              "default": 2
            }
          },
          {
            "type": "Hyperparameter",
            "name": "min_samples_split__float",
            "init_args": {
              "semantic_types": [
                "min_samples_split"
              ],
              "_structural_type": "float"
            }
          }
        ]
      },
      {
        "name": "min_samples_leaf",
        "type": "Union",
        "init_args": {
          "semantic_types": [
            "min_samples_leaf"
          ],
          "default": "min_samples_leaf__int",
          "description": "The minimum number of samples required to be at a leaf node. A split point at any depth will only be considered if it leaves at least ``min_samples_leaf`` training samples in each of the left and right branches.  This may have the effect of smoothing the model, especially in regression.  - If int, then consider `min_samples_leaf` as the minimum number. - If float, then `min_samples_leaf` is a fraction and   `ceil(min_samples_leaf * n_samples)` are the minimum   number of samples for each node.  .. versionchanged:: 0.18    Added float values for fractions."
        },
        "hyperparams": [
          {
            "type": "Hyperparameter",
            "name": "min_samples_leaf__int",
            "init_args": {
              "semantic_types": [
                "min_samples_leaf"
              ],
              "_structural_type": "int",
              "default": 1
            }
          },
          {
            "type": "Hyperparameter",
            "name": "min_samples_leaf__float",
            "init_args": {
              "semantic_types": [
                "min_samples_leaf"
              ],
              "_structural_type": "float"
            }
          }
        ]
      },
      {
        "type": "Hyperparameter",
        "name": "min_weight_fraction_leaf",
        "init_args": {
          "semantic_types": [
            "min_weight_fraction_leaf"
          ],
          "_structural_type": "float",
          "default": 0.0,
          "description": "The minimum weighted fraction of the sum total of weights (of all the input samples) required to be at a leaf node. Samples have equal weight when sample_weight is not provided."
        }
      },
      {
        "name": "max_features",
        "type": "Union",
        "init_args": {
          "semantic_types": [
            "max_features"
          ],
          "default": "max_features__str",
          "description": "The number of features to consider when looking for the best split:  - If int, then consider `max_features` features at each split. - If float, then `max_features` is a fraction and   `int(max_features * n_features)` features are considered at each   split. - If \"auto\", then `max_features=sqrt(n_features)`. - If \"sqrt\", then `max_features=sqrt(n_features)`. - If \"log2\", then `max_features=log2(n_features)`. - If None, then `max_features=n_features`.  Note: the search for a split does not stop until at least one valid partition of the node samples is found, even if it requires to effectively inspect more than ``max_features`` features."
        },
        "hyperparams": [
          {
            "type": "Enumeration",
            "name": "max_features__str",
            "init_args": {
              "semantic_types": [
                "max_features"
              ],
              "values": [
                "auto",
                "sqrt",
                "log2"
              ],
              "_structural_type": "str",
              "default": "auto"
            }
          },
          {
            "type": "Hyperparameter",
            "name": "max_features__int",
            "init_args": {
              "semantic_types": [
                "max_features"
              ],
              "_structural_type": "int"
            }
          },
          {
            "type": "Hyperparameter",
            "name": "max_features__float",
            "init_args": {
              "semantic_types": [
                "max_features"
              ],
              "_structural_type": "float"
            }
          }
        ]
      },
      {
        "name": "max_leaf_nodes",
        "type": "Union",
        "init_args": {
          "semantic_types": [
            "max_leaf_nodes"
          ],
          "default": "max_leaf_nodes__None",
          "description": "Grow trees with ``max_leaf_nodes`` in best-first fashion. Best nodes are defined as relative reduction in impurity. If None then unlimited number of leaf nodes."
        },
        "hyperparams": [
          {
            "type": "Hyperparameter",
            "name": "max_leaf_nodes__int",
            "init_args": {
              "semantic_types": [
                "max_leaf_nodes"
              ],
              "_structural_type": "int"
            }
          },
          {
            "type": "Constant",
            "name": "max_leaf_nodes__None",
            "init_args": {
              "semantic_types": [
                "max_leaf_nodes"
              ],
              "_structural_type": "None",
              "default": "None"
            }
          }
        ]
      },
      {
        "type": "Hyperparameter",
        "name": "min_impurity_decrease",
        "init_args": {
          "semantic_types": [
            "min_impurity_decrease"
          ],
          "_structural_type": "float",
          "default": 0.0,
          "description": "A node will be split if this split induces a decrease of the impurity greater than or equal to this value.  The weighted impurity decrease equation is the following::      N_t / N * (impurity - N_t_R / N_t * right_impurity                         - N_t_L / N_t * left_impurity)  where ``N`` is the total number of samples, ``N_t`` is the number of samples at the current node, ``N_t_L`` is the number of samples in the left child, and ``N_t_R`` is the number of samples in the right child.  ``N``, ``N_t``, ``N_t_R`` and ``N_t_L`` all refer to the weighted sum, if ``sample_weight`` is passed.  .. versionadded:: 0.19"
        }
      },
      {
        "name": "min_impurity_split",
        "type": "Union",
        "init_args": {
          "semantic_types": [
            "min_impurity_split"
          ],
          "default": "min_impurity_split__None",
          "description": "Threshold for early stopping in tree growth. A node will split if its impurity is above the threshold, otherwise it is a leaf.  .. deprecated:: 0.19    ``min_impurity_split`` has been deprecated in favor of    ``min_impurity_decrease`` in 0.19. The default value of    ``min_impurity_split`` will change from 1e-7 to 0 in 0.23 and it    will be removed in 0.25. Use ``min_impurity_decrease`` instead."
        },
        "hyperparams": [
          {
            "type": "Hyperparameter",
            "name": "min_impurity_split__float",
            "init_args": {
              "semantic_types": [
                "min_impurity_split"
              ],
              "_structural_type": "float"
            }
          },
          {
            "type": "Constant",
            "name": "min_impurity_split__None",
            "init_args": {
              "semantic_types": [
                "min_impurity_split"
              ],
              "_structural_type": "None",
              "default": "None"
            }
          }
        ]
      },
      {
        "type": "Hyperparameter",
        "name": "bootstrap",
        "init_args": {
          "semantic_types": [
            "bootstrap"
          ],
          "_structural_type": "bool",
          "default": "False",
          "description": "Whether bootstrap samples are used when building trees. If False, the whole dataset is used to build each tree."
        }
      },
      {
        "type": "Hyperparameter",
        "name": "oob_score",
        "init_args": {
          "semantic_types": [
            "oob_score"
          ],
          "_structural_type": "bool",
          "default": "False",
          "description": "Whether to use out-of-bag samples to estimate the generalization accuracy."
        }
      },
      {
        "name": "n_jobs",
        "type": "Union",
        "init_args": {
          "semantic_types": [
            "n_jobs"
          ],
          "default": "n_jobs__None",
          "description": "The number of jobs to run in parallel. :meth:`fit`, :meth:`predict`, :meth:`decision_path` and :meth:`apply` are all parallelized over the trees. ``None`` means 1 unless in a :obj:`joblib.parallel_backend` context. ``-1`` means using all processors. See :term:`Glossary <n_jobs>` for more details."
        },
        "hyperparams": [
          {
            "type": "Hyperparameter",
            "name": "n_jobs__int",
            "init_args": {
              "semantic_types": [
                "n_jobs"
              ],
              "_structural_type": "int"
            }
          },
          {
            "type": "Constant",
            "name": "n_jobs__None",
            "init_args": {
              "semantic_types": [
                "n_jobs"
              ],
              "_structural_type": "None",
              "default": "None"
            }
          }
        ]
      },
      {
        "name": "random_state",
        "type": "Union",
        "init_args": {
          "semantic_types": [
            "random_state"
          ],
          "default": "random_state__None",
          "description": "Controls 3 sources of randomness:  - the bootstrapping of the samples used when building trees   (if ``bootstrap=True``) - the sampling of the features to consider when looking for the best   split at each node (if ``max_features < n_features``) - the draw of the splits for each of the `max_features`  See :term:`Glossary <random_state>` for details."
        },
        "hyperparams": [
          {
            "type": "Hyperparameter",
            "name": "random_state__int",
            "init_args": {
              "semantic_types": [
                "random_state"
              ],
              "_structural_type": "int"
            }
          },
          {
            "type": "Constant",
            "name": "random_state__None",
            "init_args": {
              "semantic_types": [
                "random_state"
              ],
              "_structural_type": "None",
              "default": "None"
            }
          }
        ]
      },
      {
        "type": "Hyperparameter",
        "name": "verbose",
        "init_args": {
          "semantic_types": [
            "verbose"
          ],
          "_structural_type": "int",
          "default": 0,
          "description": "Controls the verbosity when fitting and predicting."
        }
      },
      {
        "type": "Hyperparameter",
        "name": "warm_start",
        "init_args": {
          "semantic_types": [
            "warm_start"
          ],
          "_structural_type": "bool",
          "default": "False",
          "description": "When set to ``True``, reuse the solution of the previous call to fit and add more estimators to the ensemble, otherwise, just fit a whole new forest. See :term:`the Glossary <warm_start>`."
        }
      },
      {
        "name": "class_weight",
        "type": "Union",
        "init_args": {
          "semantic_types": [
            "class_weight"
          ],
          "default": "class_weight__None",
          "description": "Weights associated with classes in the form ``{class_label: weight}``. If not given, all classes are supposed to have weight one. For multi-output problems, a list of dicts can be provided in the same order as the columns of y.  Note that for multioutput (including multilabel) weights should be defined for each class of every column in its own dict. For example, for four-class multilabel classification weights should be [{0: 1, 1: 1}, {0: 1, 1: 5}, {0: 1, 1: 1}, {0: 1, 1: 1}] instead of [{1:1}, {2:5}, {3:1}, {4:1}].  The \"balanced\" mode uses the values of y to automatically adjust weights inversely proportional to class frequencies in the input data as ``n_samples / (n_classes * np.bincount(y))``  The \"balanced_subsample\" mode is the same as \"balanced\" except that weights are computed based on the bootstrap sample for every tree grown.  For multi-output, the weights of each column of y will be multiplied.  Note that these weights will be multiplied with sample_weight (passed through the fit method) if sample_weight is specified."
        },
        "hyperparams": [
          {
            "type": "Enumeration",
            "name": "class_weight__str",
            "init_args": {
              "semantic_types": [
                "class_weight"
              ],
              "values": [
                "balanced",
                "balanced_subsample"
              ],
              "_structural_type": "str"
            }
          },
          {
            "type": "Hyperparameter",
            "name": "class_weight__dict",
            "init_args": {
              "semantic_types": [
                "class_weight"
              ],
              "_structural_type": "dict"
            }
          },
          {
            "type": "Hyperparameter",
            "name": "class_weight__list",
            "init_args": {
              "semantic_types": [
                "class_weight"
              ],
              "_structural_type": "list"
            }
          },
          {
            "type": "Constant",
            "name": "class_weight__None",
            "init_args": {
              "semantic_types": [
                "class_weight"
              ],
              "_structural_type": "None",
              "default": "None"
            }
          }
        ]
      },
      {
        "type": "Hyperparameter",
        "name": "ccp_alpha",
        "init_args": {
          "semantic_types": [
            "ccp_alpha"
          ],
          "_structural_type": "float",
          "default": 0.0,
          "description": "Complexity parameter used for Minimal Cost-Complexity Pruning. The subtree with the largest cost complexity that is smaller than ``ccp_alpha`` will be chosen. By default, no pruning is performed. See :ref:`minimal_cost_complexity_pruning` for details.  .. versionadded:: 0.22"
        }
      },
      {
        "name": "max_samples",
        "type": "Union",
        "init_args": {
          "semantic_types": [
            "max_samples"
          ],
          "default": "max_samples__None",
          "description": "If bootstrap is True, the number of samples to draw from X to train each base estimator.  - If None (default), then draw `X.shape[0]` samples. - If int, then draw `max_samples` samples. - If float, then draw `max_samples * X.shape[0]` samples. Thus,   `max_samples` should be in the interval `(0, 1)`.  .. versionadded:: 0.22"
        },
        "hyperparams": [
          {
            "type": "Hyperparameter",
            "name": "max_samples__int",
            "init_args": {
              "semantic_types": [
                "max_samples"
              ],
              "_structural_type": "int"
            }
          },
          {
            "type": "Hyperparameter",
            "name": "max_samples__float",
            "init_args": {
              "semantic_types": [
                "max_samples"
              ],
              "_structural_type": "float"
            }
          },
          {
            "type": "Constant",
            "name": "max_samples__None",
            "init_args": {
              "semantic_types": [
                "max_samples"
              ],
              "_structural_type": "None",
              "default": "None"
            }
          }
        ]
      }
    ]
  },
  "ExtraTreesRegressor": {
    "name": "sklearn.ensemble._forest.ExtraTreesRegressor",
    "common_name": "ExtraTreesRegressor",
    "description": "An extra-trees regressor. This class implements a meta estimator that fits a number of randomized decision trees (a.k.a. extra-trees) on various sub-samples of the dataset and uses averaging to improve the predictive accuracy and control over-fitting.  Read more in the :ref:`User Guide <forest>`.",
    "sklearn_version": "0.22.2.post1",
    "Hyperparams": [
      {
        "type": "Hyperparameter",
        "name": "n_estimators",
        "init_args": {
          "semantic_types": [
            "n_estimators"
          ],
          "_structural_type": "int",
          "default": 100,
          "description": "The number of trees in the forest.  .. versionchanged:: 0.22    The default value of ``n_estimators`` changed from 10 to 100    in 0.22."
        }
      },
      {
        "type": "Enumeration",
        "name": "criterion",
        "init_args": {
          "semantic_types": [
            "criterion"
          ],
          "values": [
            "mse",
            "mae"
          ],
          "_structural_type": "str",
          "default": "mse",
          "description": "The function to measure the quality of a split. Supported criteria are \"mse\" for the mean squared error, which is equal to variance reduction as feature selection criterion, and \"mae\" for the mean absolute error.  .. versionadded:: 0.18    Mean Absolute Error (MAE) criterion."
        }
      },
      {
        "name": "max_depth",
        "type": "Union",
        "init_args": {
          "semantic_types": [
            "max_depth"
          ],
          "default": "max_depth__None",
          "description": "The maximum depth of the tree. If None, then nodes are expanded until all leaves are pure or until all leaves contain less than min_samples_split samples."
        },
        "hyperparams": [
          {
            "type": "Hyperparameter",
            "name": "max_depth__int",
            "init_args": {
              "semantic_types": [
                "max_depth"
              ],
              "_structural_type": "int"
            }
          },
          {
            "type": "Constant",
            "name": "max_depth__None",
            "init_args": {
              "semantic_types": [
                "max_depth"
              ],
              "_structural_type": "None",
              "default": "None"
            }
          }
        ]
      },
      {
        "name": "min_samples_split",
        "type": "Union",
        "init_args": {
          "semantic_types": [
            "min_samples_split"
          ],
          "default": "min_samples_split__int",
          "description": "The minimum number of samples required to split an internal node:  - If int, then consider `min_samples_split` as the minimum number. - If float, then `min_samples_split` is a fraction and   `ceil(min_samples_split * n_samples)` are the minimum   number of samples for each split.  .. versionchanged:: 0.18    Added float values for fractions."
        },
        "hyperparams": [
          {
            "type": "Hyperparameter",
            "name": "min_samples_split__int",
            "init_args": {
              "semantic_types": [
                "min_samples_split"
              ],
              "_structural_type": "int",
              "default": 2
            }
          },
          {
            "type": "Hyperparameter",
            "name": "min_samples_split__float",
            "init_args": {
              "semantic_types": [
                "min_samples_split"
              ],
              "_structural_type": "float"
            }
          }
        ]
      },
      {
        "name": "min_samples_leaf",
        "type": "Union",
        "init_args": {
          "semantic_types": [
            "min_samples_leaf"
          ],
          "default": "min_samples_leaf__int",
          "description": "The minimum number of samples required to be at a leaf node. A split point at any depth will only be considered if it leaves at least ``min_samples_leaf`` training samples in each of the left and right branches.  This may have the effect of smoothing the model, especially in regression.  - If int, then consider `min_samples_leaf` as the minimum number. - If float, then `min_samples_leaf` is a fraction and   `ceil(min_samples_leaf * n_samples)` are the minimum   number of samples for each node.  .. versionchanged:: 0.18    Added float values for fractions."
        },
        "hyperparams": [
          {
            "type": "Hyperparameter",
            "name": "min_samples_leaf__int",
            "init_args": {
              "semantic_types": [
                "min_samples_leaf"
              ],
              "_structural_type": "int",
              "default": 1
            }
          },
          {
            "type": "Hyperparameter",
            "name": "min_samples_leaf__float",
            "init_args": {
              "semantic_types": [
                "min_samples_leaf"
              ],
              "_structural_type": "float"
            }
          }
        ]
      },
      {
        "type": "Hyperparameter",
        "name": "min_weight_fraction_leaf",
        "init_args": {
          "semantic_types": [
            "min_weight_fraction_leaf"
          ],
          "_structural_type": "float",
          "default": 0.0,
          "description": "The minimum weighted fraction of the sum total of weights (of all the input samples) required to be at a leaf node. Samples have equal weight when sample_weight is not provided."
        }
      },
      {
        "name": "max_features",
        "type": "Union",
        "init_args": {
          "semantic_types": [
            "max_features"
          ],
          "default": "max_features__str",
          "description": "The number of features to consider when looking for the best split:  - If int, then consider `max_features` features at each split. - If float, then `max_features` is a fraction and   `int(max_features * n_features)` features are considered at each   split. - If \"auto\", then `max_features=n_features`. - If \"sqrt\", then `max_features=sqrt(n_features)`. - If \"log2\", then `max_features=log2(n_features)`. - If None, then `max_features=n_features`.  Note: the search for a split does not stop until at least one valid partition of the node samples is found, even if it requires to effectively inspect more than ``max_features`` features."
        },
        "hyperparams": [
          {
            "type": "Enumeration",
            "name": "max_features__str",
            "init_args": {
              "semantic_types": [
                "max_features"
              ],
              "values": [
                "auto",
                "sqrt",
                "log2"
              ],
              "_structural_type": "str",
              "default": "auto"
            }
          },
          {
            "type": "Hyperparameter",
            "name": "max_features__int",
            "init_args": {
              "semantic_types": [
                "max_features"
              ],
              "_structural_type": "int"
            }
          },
          {
            "type": "Hyperparameter",
            "name": "max_features__float",
            "init_args": {
              "semantic_types": [
                "max_features"
              ],
              "_structural_type": "float"
            }
          }
        ]
      },
      {
        "name": "max_leaf_nodes",
        "type": "Union",
        "init_args": {
          "semantic_types": [
            "max_leaf_nodes"
          ],
          "default": "max_leaf_nodes__None",
          "description": "Grow trees with ``max_leaf_nodes`` in best-first fashion. Best nodes are defined as relative reduction in impurity. If None then unlimited number of leaf nodes."
        },
        "hyperparams": [
          {
            "type": "Hyperparameter",
            "name": "max_leaf_nodes__int",
            "init_args": {
              "semantic_types": [
                "max_leaf_nodes"
              ],
              "_structural_type": "int"
            }
          },
          {
            "type": "Constant",
            "name": "max_leaf_nodes__None",
            "init_args": {
              "semantic_types": [
                "max_leaf_nodes"
              ],
              "_structural_type": "None",
              "default": "None"
            }
          }
        ]
      },
      {
        "type": "Hyperparameter",
        "name": "min_impurity_decrease",
        "init_args": {
          "semantic_types": [
            "min_impurity_decrease"
          ],
          "_structural_type": "float",
          "default": 0.0,
          "description": "A node will be split if this split induces a decrease of the impurity greater than or equal to this value.  The weighted impurity decrease equation is the following::      N_t / N * (impurity - N_t_R / N_t * right_impurity                         - N_t_L / N_t * left_impurity)  where ``N`` is the total number of samples, ``N_t`` is the number of samples at the current node, ``N_t_L`` is the number of samples in the left child, and ``N_t_R`` is the number of samples in the right child.  ``N``, ``N_t``, ``N_t_R`` and ``N_t_L`` all refer to the weighted sum, if ``sample_weight`` is passed.  .. versionadded:: 0.19"
        }
      },
      {
        "name": "min_impurity_split",
        "type": "Union",
        "init_args": {
          "semantic_types": [
            "min_impurity_split"
          ],
          "default": "min_impurity_split__None",
          "description": "Threshold for early stopping in tree growth. A node will split if its impurity is above the threshold, otherwise it is a leaf.  .. deprecated:: 0.19    ``min_impurity_split`` has been deprecated in favor of    ``min_impurity_decrease`` in 0.19. The default value of    ``min_impurity_split`` will change from 1e-7 to 0 in 0.23 and it    will be removed in 0.25. Use ``min_impurity_decrease`` instead."
        },
        "hyperparams": [
          {
            "type": "Hyperparameter",
            "name": "min_impurity_split__float",
            "init_args": {
              "semantic_types": [
                "min_impurity_split"
              ],
              "_structural_type": "float"
            }
          },
          {
            "type": "Constant",
            "name": "min_impurity_split__None",
            "init_args": {
              "semantic_types": [
                "min_impurity_split"
              ],
              "_structural_type": "None",
              "default": "None"
            }
          }
        ]
      },
      {
        "type": "Hyperparameter",
        "name": "bootstrap",
        "init_args": {
          "semantic_types": [
            "bootstrap"
          ],
          "_structural_type": "bool",
          "default": "False",
          "description": "Whether bootstrap samples are used when building trees. If False, the whole dataset is used to build each tree."
        }
      },
      {
        "type": "Hyperparameter",
        "name": "oob_score",
        "init_args": {
          "semantic_types": [
            "oob_score"
          ],
          "_structural_type": "bool",
          "default": "False",
          "description": "Whether to use out-of-bag samples to estimate the R^2 on unseen data."
        }
      },
      {
        "name": "n_jobs",
        "type": "Union",
        "init_args": {
          "semantic_types": [
            "n_jobs"
          ],
          "default": "n_jobs__None",
          "description": "The number of jobs to run in parallel. :meth:`fit`, :meth:`predict`, :meth:`decision_path` and :meth:`apply` are all parallelized over the trees. ``None`` means 1 unless in a :obj:`joblib.parallel_backend` context. ``-1`` means using all processors. See :term:`Glossary <n_jobs>` for more details."
        },
        "hyperparams": [
          {
            "type": "Hyperparameter",
            "name": "n_jobs__int",
            "init_args": {
              "semantic_types": [
                "n_jobs"
              ],
              "_structural_type": "int"
            }
          },
          {
            "type": "Constant",
            "name": "n_jobs__None",
            "init_args": {
              "semantic_types": [
                "n_jobs"
              ],
              "_structural_type": "None",
              "default": "None"
            }
          }
        ]
      },
      {
        "name": "random_state",
        "type": "Union",
        "init_args": {
          "semantic_types": [
            "random_state"
          ],
          "default": "random_state__None",
          "description": "Controls 3 sources of randomness:  - the bootstrapping of the samples used when building trees   (if ``bootstrap=True``) - the sampling of the features to consider when looking for the best   split at each node (if ``max_features < n_features``) - the draw of the splits for each of the `max_features`  See :term:`Glossary <random_state>` for details."
        },
        "hyperparams": [
          {
            "type": "Hyperparameter",
            "name": "random_state__int",
            "init_args": {
              "semantic_types": [
                "random_state"
              ],
              "_structural_type": "int"
            }
          },
          {
            "type": "Constant",
            "name": "random_state__None",
            "init_args": {
              "semantic_types": [
                "random_state"
              ],
              "_structural_type": "None",
              "default": "None"
            }
          }
        ]
      },
      {
        "type": "Hyperparameter",
        "name": "verbose",
        "init_args": {
          "semantic_types": [
            "verbose"
          ],
          "_structural_type": "int",
          "default": 0,
          "description": "Controls the verbosity when fitting and predicting."
        }
      },
      {
        "type": "Hyperparameter",
        "name": "warm_start",
        "init_args": {
          "semantic_types": [
            "warm_start"
          ],
          "_structural_type": "bool",
          "default": "False",
          "description": "When set to ``True``, reuse the solution of the previous call to fit and add more estimators to the ensemble, otherwise, just fit a whole new forest. See :term:`the Glossary <warm_start>`."
        }
      },
      {
        "type": "Hyperparameter",
        "name": "ccp_alpha",
        "init_args": {
          "semantic_types": [
            "ccp_alpha"
          ],
          "_structural_type": "float",
          "default": 0.0,
          "description": "Complexity parameter used for Minimal Cost-Complexity Pruning. The subtree with the largest cost complexity that is smaller than ``ccp_alpha`` will be chosen. By default, no pruning is performed. See :ref:`minimal_cost_complexity_pruning` for details.  .. versionadded:: 0.22"
        }
      },
      {
        "name": "max_samples",
        "type": "Union",
        "init_args": {
          "semantic_types": [
            "max_samples"
          ],
          "default": "max_samples__None",
          "description": "If bootstrap is True, the number of samples to draw from X to train each base estimator.  - If None (default), then draw `X.shape[0]` samples. - If int, then draw `max_samples` samples. - If float, then draw `max_samples * X.shape[0]` samples. Thus,   `max_samples` should be in the interval `(0, 1)`.  .. versionadded:: 0.22"
        },
        "hyperparams": [
          {
            "type": "Hyperparameter",
            "name": "max_samples__int",
            "init_args": {
              "semantic_types": [
                "max_samples"
              ],
              "_structural_type": "int"
            }
          },
          {
            "type": "Hyperparameter",
            "name": "max_samples__float",
            "init_args": {
              "semantic_types": [
                "max_samples"
              ],
              "_structural_type": "float"
            }
          },
          {
            "type": "Constant",
            "name": "max_samples__None",
            "init_args": {
              "semantic_types": [
                "max_samples"
              ],
              "_structural_type": "None",
              "default": "None"
            }
          }
        ]
      }
    ]
  },
  "GradientBoostingClassifier": {
    "name": "sklearn.ensemble._gb.GradientBoostingClassifier",
    "common_name": "GradientBoostingClassifier",
    "description": "Gradient Boosting for classification. GB builds an additive model in a forward stage-wise fashion; it allows for the optimization of arbitrary differentiable loss functions. In each stage ``n_classes_`` regression trees are fit on the negative gradient of the binomial or multinomial deviance loss function. Binary classification is a special case where only a single regression tree is induced.  Read more in the :ref:`User Guide <gradient_boosting>`.",
    "sklearn_version": "0.22.2.post1",
    "Hyperparams": [
      {
        "type": "Enumeration",
        "name": "loss",
        "init_args": {
          "semantic_types": [
            "loss"
          ],
          "values": [
            "deviance",
            "exponential"
          ],
          "_structural_type": "str",
          "default": "deviance",
          "description": "loss function to be optimized. 'deviance' refers to deviance (= logistic regression) for classification with probabilistic outputs. For loss 'exponential' gradient boosting recovers the AdaBoost algorithm."
        }
      },
      {
        "type": "Hyperparameter",
        "name": "learning_rate",
        "init_args": {
          "semantic_types": [
            "learning_rate"
          ],
          "_structural_type": "float",
          "default": 0.1,
          "description": "learning rate shrinks the contribution of each tree by `learning_rate`. There is a trade-off between learning_rate and n_estimators."
        }
      },
      {
        "type": "Hyperparameter",
        "name": "n_estimators",
        "init_args": {
          "semantic_types": [
            "n_estimators"
          ],
          "_structural_type": "int",
          "default": 100,
          "description": "The number of boosting stages to perform. Gradient boosting is fairly robust to over-fitting so a large number usually results in better performance."
        }
      },
      {
        "type": "Hyperparameter",
        "name": "subsample",
        "init_args": {
          "semantic_types": [
            "subsample"
          ],
          "_structural_type": "float",
          "default": 1.0,
          "description": "The fraction of samples to be used for fitting the individual base learners. If smaller than 1.0 this results in Stochastic Gradient Boosting. `subsample` interacts with the parameter `n_estimators`. Choosing `subsample < 1.0` leads to a reduction of variance and an increase in bias."
        }
      },
      {
        "type": "Enumeration",
        "name": "criterion",
        "init_args": {
          "semantic_types": [
            "criterion"
          ],
          "values": [
            "friedman_mse",
            "mse",
            "mae"
          ],
          "_structural_type": "str",
          "default": "friedman_mse",
          "description": "The function to measure the quality of a split. Supported criteria are \"friedman_mse\" for the mean squared error with improvement score by Friedman, \"mse\" for mean squared error, and \"mae\" for the mean absolute error. The default value of \"friedman_mse\" is generally the best as it can provide a better approximation in some cases.  .. versionadded:: 0.18"
        }
      },
      {
        "name": "min_samples_split",
        "type": "Union",
        "init_args": {
          "semantic_types": [
            "min_samples_split"
          ],
          "default": "min_samples_split__int",
          "description": "The minimum number of samples required to split an internal node:  - If int, then consider `min_samples_split` as the minimum number. - If float, then `min_samples_split` is a fraction and   `ceil(min_samples_split * n_samples)` are the minimum   number of samples for each split.  .. versionchanged:: 0.18    Added float values for fractions."
        },
        "hyperparams": [
          {
            "type": "Hyperparameter",
            "name": "min_samples_split__int",
            "init_args": {
              "semantic_types": [
                "min_samples_split"
              ],
              "_structural_type": "int",
              "default": 2
            }
          },
          {
            "type": "Hyperparameter",
            "name": "min_samples_split__float",
            "init_args": {
              "semantic_types": [
                "min_samples_split"
              ],
              "_structural_type": "float"
            }
          }
        ]
      },
      {
        "name": "min_samples_leaf",
        "type": "Union",
        "init_args": {
          "semantic_types": [
            "min_samples_leaf"
          ],
          "default": "min_samples_leaf__int",
          "description": "The minimum number of samples required to be at a leaf node. A split point at any depth will only be considered if it leaves at least ``min_samples_leaf`` training samples in each of the left and right branches.  This may have the effect of smoothing the model, especially in regression.  - If int, then consider `min_samples_leaf` as the minimum number. - If float, then `min_samples_leaf` is a fraction and   `ceil(min_samples_leaf * n_samples)` are the minimum   number of samples for each node.  .. versionchanged:: 0.18    Added float values for fractions."
        },
        "hyperparams": [
          {
            "type": "Hyperparameter",
            "name": "min_samples_leaf__int",
            "init_args": {
              "semantic_types": [
                "min_samples_leaf"
              ],
              "_structural_type": "int",
              "default": 1
            }
          },
          {
            "type": "Hyperparameter",
            "name": "min_samples_leaf__float",
            "init_args": {
              "semantic_types": [
                "min_samples_leaf"
              ],
              "_structural_type": "float"
            }
          }
        ]
      },
      {
        "type": "Hyperparameter",
        "name": "min_weight_fraction_leaf",
        "init_args": {
          "semantic_types": [
            "min_weight_fraction_leaf"
          ],
          "_structural_type": "float",
          "default": 0.0,
          "description": "The minimum weighted fraction of the sum total of weights (of all the input samples) required to be at a leaf node. Samples have equal weight when sample_weight is not provided."
        }
      },
      {
        "type": "Hyperparameter",
        "name": "max_depth",
        "init_args": {
          "semantic_types": [
            "max_depth"
          ],
          "_structural_type": "int",
          "default": 3,
          "description": "maximum depth of the individual regression estimators. The maximum depth limits the number of nodes in the tree. Tune this parameter for best performance; the best value depends on the interaction of the input variables."
        }
      },
      {
        "type": "Hyperparameter",
        "name": "min_impurity_decrease",
        "init_args": {
          "semantic_types": [
            "min_impurity_decrease"
          ],
          "_structural_type": "float",
          "default": 0.0,
          "description": "A node will be split if this split induces a decrease of the impurity greater than or equal to this value.  The weighted impurity decrease equation is the following::      N_t / N * (impurity - N_t_R / N_t * right_impurity                         - N_t_L / N_t * left_impurity)  where ``N`` is the total number of samples, ``N_t`` is the number of samples at the current node, ``N_t_L`` is the number of samples in the left child, and ``N_t_R`` is the number of samples in the right child.  ``N``, ``N_t``, ``N_t_R`` and ``N_t_L`` all refer to the weighted sum, if ``sample_weight`` is passed.  .. versionadded:: 0.19"
        }
      },
      {
        "name": "min_impurity_split",
        "type": "Union",
        "init_args": {
          "semantic_types": [
            "min_impurity_split"
          ],
          "default": "min_impurity_split__None",
          "description": "Threshold for early stopping in tree growth. A node will split if its impurity is above the threshold, otherwise it is a leaf.  .. deprecated:: 0.19    ``min_impurity_split`` has been deprecated in favor of    ``min_impurity_decrease`` in 0.19. The default value of    ``min_impurity_split`` will change from 1e-7 to 0 in 0.23 and it    will be removed in 0.25. Use ``min_impurity_decrease`` instead."
        },
        "hyperparams": [
          {
            "type": "Hyperparameter",
            "name": "min_impurity_split__float",
            "init_args": {
              "semantic_types": [
                "min_impurity_split"
              ],
              "_structural_type": "float"
            }
          },
          {
            "type": "Constant",
            "name": "min_impurity_split__None",
            "init_args": {
              "semantic_types": [
                "min_impurity_split"
              ],
              "_structural_type": "None",
              "default": "None"
            }
          }
        ]
      },
      {
        "name": "init",
        "type": "Union",
        "init_args": {
          "semantic_types": [
            "init"
          ],
          "default": "init__None",
          "description": "An estimator object that is used to compute the initial predictions. ``init`` has to provide :meth:`fit` and :meth:`predict_proba`. If 'zero', the initial raw predictions are set to zero. By default, a ``DummyEstimator`` predicting the classes priors is used."
        },
        "hyperparams": [
          {
            "name": "init__Estimator",
            "type": "Hyperparameter",
            "init_args": {
              "_structural_type": "Estimator",
              "semantic_types": [
                "init"
              ]
            }
          },
          {
            "type": "Constant",
            "name": "init__str",
            "init_args": {
              "semantic_types": [
                "init"
              ],
              "_structural_type": "str"
            }
          },
          {
            "type": "Constant",
            "name": "init__None",
            "init_args": {
              "semantic_types": [
                "init"
              ],
              "_structural_type": "None",
              "default": "None"
            }
          }
        ]
      },
      {
        "name": "random_state",
        "type": "Union",
        "init_args": {
          "semantic_types": [
            "random_state"
          ],
          "default": "random_state__None",
          "description": "If int, random_state is the seed used by the random number generator; If RandomState instance, random_state is the random number generator; If None, the random number generator is the RandomState instance used by `np.random`."
        },
        "hyperparams": [
          {
            "type": "Hyperparameter",
            "name": "random_state__int",
            "init_args": {
              "semantic_types": [
                "random_state"
              ],
              "_structural_type": "int"
            }
          },
          {
            "type": "Constant",
            "name": "random_state__None",
            "init_args": {
              "semantic_types": [
                "random_state"
              ],
              "_structural_type": "None",
              "default": "None"
            }
          }
        ]
      },
      {
        "name": "max_features",
        "type": "Union",
        "init_args": {
          "semantic_types": [
            "max_features"
          ],
          "default": "None",
          "description": "The number of features to consider when looking for the best split:  - If int, then consider `max_features` features at each split. - If float, then `max_features` is a fraction and   `int(max_features * n_features)` features are considered at each   split. - If \"auto\", then `max_features=sqrt(n_features)`. - If \"sqrt\", then `max_features=sqrt(n_features)`. - If \"log2\", then `max_features=log2(n_features)`. - If None, then `max_features=n_features`.  Choosing `max_features < n_features` leads to a reduction of variance and an increase in bias.  Note: the search for a split does not stop until at least one valid partition of the node samples is found, even if it requires to effectively inspect more than ``max_features`` features."
        },
        "hyperparams": [
          {
            "type": "Enumeration",
            "name": "max_features__str",
            "init_args": {
              "semantic_types": [
                "max_features"
              ],
              "values": [
                "auto",
                "sqrt",
                "log2"
              ],
              "_structural_type": "str"
            }
          },
          {
            "type": "Hyperparameter",
            "name": "max_features__int",
            "init_args": {
              "semantic_types": [
                "max_features"
              ],
              "_structural_type": "int"
            }
          },
          {
            "type": "Hyperparameter",
            "name": "max_features__float",
            "init_args": {
              "semantic_types": [
                "max_features"
              ],
              "_structural_type": "float"
            }
          }
        ]
      },
      {
        "type": "Hyperparameter",
        "name": "verbose",
        "init_args": {
          "semantic_types": [
            "verbose"
          ],
          "_structural_type": "int",
          "default": 0,
          "description": "Enable verbose output. If 1 then it prints progress and performance once in a while (the more trees the lower the frequency). If greater than 1 then it prints progress and performance for every tree."
        }
      },
      {
        "type": "Constant",
        "name": "max_leaf_nodes",
        "init_args": {
          "semantic_types": [
            "max_leaf_nodes"
          ],
          "_structural_type": "None",
          "default": "None",
          "description": "Grow trees with ``max_leaf_nodes`` in best-first fashion. Best nodes are defined as relative reduction in impurity. If None then unlimited number of leaf nodes."
        }
      },
      {
        "type": "Hyperparameter",
        "name": "warm_start",
        "init_args": {
          "semantic_types": [
            "warm_start"
          ],
          "_structural_type": "bool",
          "default": "False",
          "description": "When set to ``True``, reuse the solution of the previous call to fit and add more estimators to the ensemble, otherwise, just erase the previous solution. See :term:`the Glossary <warm_start>`."
        }
      },
      {
        "name": "presort",
        "type": "Union",
        "init_args": {
          "semantic_types": [
            "presort"
          ],
          "default": "presort__str",
          "description": "This parameter is deprecated and will be removed in v0.24.  .. deprecated :: 0.22"
        },
        "hyperparams": [
          {
            "type": "Hyperparameter",
            "name": "presort__bool",
            "init_args": {
              "semantic_types": [
                "presort"
              ],
              "_structural_type": "bool"
            }
          },
          {
            "type": "Constant",
            "name": "presort__str",
            "init_args": {
              "semantic_types": [
                "presort"
              ],
              "_structural_type": "str",
              "default": "deprecated"
            }
          }
        ]
      },
      {
        "type": "Hyperparameter",
        "name": "validation_fraction",
        "init_args": {
          "semantic_types": [
            "validation_fraction"
          ],
          "_structural_type": "float",
          "default": 0.1,
          "description": "The proportion of training data to set aside as validation set for early stopping. Must be between 0 and 1. Only used if ``n_iter_no_change`` is set to an integer.  .. versionadded:: 0.20"
        }
      },
      {
        "name": "n_iter_no_change",
        "type": "Union",
        "init_args": {
          "semantic_types": [
            "n_iter_no_change"
          ],
          "default": "n_iter_no_change__None",
          "description": "``n_iter_no_change`` is used to decide if early stopping will be used to terminate training when validation score is not improving. By default it is set to None to disable early stopping. If set to a number, it will set aside ``validation_fraction`` size of the training data as validation and terminate training when validation score is not improving in all of the previous ``n_iter_no_change`` numbers of iterations. The split is stratified.  .. versionadded:: 0.20"
        },
        "hyperparams": [
          {
            "type": "Hyperparameter",
            "name": "n_iter_no_change__int",
            "init_args": {
              "semantic_types": [
                "n_iter_no_change"
              ],
              "_structural_type": "int"
            }
          },
          {
            "type": "Constant",
            "name": "n_iter_no_change__None",
            "init_args": {
              "semantic_types": [
                "n_iter_no_change"
              ],
              "_structural_type": "None",
              "default": "None"
            }
          }
        ]
      },
      {
        "type": "Hyperparameter",
        "name": "tol",
        "init_args": {
          "semantic_types": [
            "tol"
          ],
          "_structural_type": "float",
          "default": 0.0001,
          "description": "Tolerance for the early stopping. When the loss is not improving by at least tol for ``n_iter_no_change`` iterations (if set to a number), the training stops.  .. versionadded:: 0.20"
        }
      },
      {
        "type": "Hyperparameter",
        "name": "ccp_alpha",
        "init_args": {
          "semantic_types": [
            "ccp_alpha"
          ],
          "_structural_type": "float",
          "default": 0.0,
          "description": "Complexity parameter used for Minimal Cost-Complexity Pruning. The subtree with the largest cost complexity that is smaller than ``ccp_alpha`` will be chosen. By default, no pruning is performed. See :ref:`minimal_cost_complexity_pruning` for details.  .. versionadded:: 0.22"
        }
      }
    ]
  },
  "GradientBoostingRegressor": {
    "name": "sklearn.ensemble._gb.GradientBoostingRegressor",
    "common_name": "GradientBoostingRegressor",
    "description": "Gradient Boosting for regression. GB builds an additive model in a forward stage-wise fashion; it allows for the optimization of arbitrary differentiable loss functions. In each stage a regression tree is fit on the negative gradient of the given loss function.  Read more in the :ref:`User Guide <gradient_boosting>`.",
    "sklearn_version": "0.22.2.post1",
    "Hyperparams": [
      {
        "type": "Enumeration",
        "name": "loss",
        "init_args": {
          "semantic_types": [
            "loss"
          ],
          "values": [
            "ls",
            "lad",
            "huber",
            "quantile"
          ],
          "_structural_type": "str",
          "default": "ls",
          "description": "loss function to be optimized. 'ls' refers to least squares regression. 'lad' (least absolute deviation) is a highly robust loss function solely based on order information of the input variables. 'huber' is a combination of the two. 'quantile' allows quantile regression (use `alpha` to specify the quantile)."
        }
      },
      {
        "type": "Hyperparameter",
        "name": "learning_rate",
        "init_args": {
          "semantic_types": [
            "learning_rate"
          ],
          "_structural_type": "float",
          "default": 0.1,
          "description": "learning rate shrinks the contribution of each tree by `learning_rate`. There is a trade-off between learning_rate and n_estimators."
        }
      },
      {
        "type": "Hyperparameter",
        "name": "n_estimators",
        "init_args": {
          "semantic_types": [
            "n_estimators"
          ],
          "_structural_type": "int",
          "default": 100,
          "description": "The number of boosting stages to perform. Gradient boosting is fairly robust to over-fitting so a large number usually results in better performance."
        }
      },
      {
        "type": "Hyperparameter",
        "name": "subsample",
        "init_args": {
          "semantic_types": [
            "subsample"
          ],
          "_structural_type": "float",
          "default": 1.0,
          "description": "The fraction of samples to be used for fitting the individual base learners. If smaller than 1.0 this results in Stochastic Gradient Boosting. `subsample` interacts with the parameter `n_estimators`. Choosing `subsample < 1.0` leads to a reduction of variance and an increase in bias."
        }
      },
      {
        "type": "Enumeration",
        "name": "criterion",
        "init_args": {
          "semantic_types": [
            "criterion"
          ],
          "values": [
            "friedman_mse",
            "mse",
            "mae"
          ],
          "_structural_type": "str",
          "default": "friedman_mse",
          "description": "The function to measure the quality of a split. Supported criteria are \"friedman_mse\" for the mean squared error with improvement score by Friedman, \"mse\" for mean squared error, and \"mae\" for the mean absolute error. The default value of \"friedman_mse\" is generally the best as it can provide a better approximation in some cases.  .. versionadded:: 0.18"
        }
      },
      {
        "name": "min_samples_split",
        "type": "Union",
        "init_args": {
          "semantic_types": [
            "min_samples_split"
          ],
          "default": "min_samples_split__int",
          "description": "The minimum number of samples required to split an internal node:  - If int, then consider `min_samples_split` as the minimum number. - If float, then `min_samples_split` is a fraction and   `ceil(min_samples_split * n_samples)` are the minimum   number of samples for each split.  .. versionchanged:: 0.18    Added float values for fractions."
        },
        "hyperparams": [
          {
            "type": "Hyperparameter",
            "name": "min_samples_split__int",
            "init_args": {
              "semantic_types": [
                "min_samples_split"
              ],
              "_structural_type": "int",
              "default": 2
            }
          },
          {
            "type": "Hyperparameter",
            "name": "min_samples_split__float",
            "init_args": {
              "semantic_types": [
                "min_samples_split"
              ],
              "_structural_type": "float"
            }
          }
        ]
      },
      {
        "name": "min_samples_leaf",
        "type": "Union",
        "init_args": {
          "semantic_types": [
            "min_samples_leaf"
          ],
          "default": "min_samples_leaf__int",
          "description": "The minimum number of samples required to be at a leaf node. A split point at any depth will only be considered if it leaves at least ``min_samples_leaf`` training samples in each of the left and right branches.  This may have the effect of smoothing the model, especially in regression.  - If int, then consider `min_samples_leaf` as the minimum number. - If float, then `min_samples_leaf` is a fraction and   `ceil(min_samples_leaf * n_samples)` are the minimum   number of samples for each node.  .. versionchanged:: 0.18    Added float values for fractions."
        },
        "hyperparams": [
          {
            "type": "Hyperparameter",
            "name": "min_samples_leaf__int",
            "init_args": {
              "semantic_types": [
                "min_samples_leaf"
              ],
              "_structural_type": "int",
              "default": 1
            }
          },
          {
            "type": "Hyperparameter",
            "name": "min_samples_leaf__float",
            "init_args": {
              "semantic_types": [
                "min_samples_leaf"
              ],
              "_structural_type": "float"
            }
          }
        ]
      },
      {
        "type": "Hyperparameter",
        "name": "min_weight_fraction_leaf",
        "init_args": {
          "semantic_types": [
            "min_weight_fraction_leaf"
          ],
          "_structural_type": "float",
          "default": 0.0,
          "description": "The minimum weighted fraction of the sum total of weights (of all the input samples) required to be at a leaf node. Samples have equal weight when sample_weight is not provided."
        }
      },
      {
        "type": "Hyperparameter",
        "name": "max_depth",
        "init_args": {
          "semantic_types": [
            "max_depth"
          ],
          "_structural_type": "int",
          "default": 3,
          "description": "maximum depth of the individual regression estimators. The maximum depth limits the number of nodes in the tree. Tune this parameter for best performance; the best value depends on the interaction of the input variables."
        }
      },
      {
        "type": "Hyperparameter",
        "name": "min_impurity_decrease",
        "init_args": {
          "semantic_types": [
            "min_impurity_decrease"
          ],
          "_structural_type": "float",
          "default": 0.0,
          "description": "A node will be split if this split induces a decrease of the impurity greater than or equal to this value.  The weighted impurity decrease equation is the following::      N_t / N * (impurity - N_t_R / N_t * right_impurity                         - N_t_L / N_t * left_impurity)  where ``N`` is the total number of samples, ``N_t`` is the number of samples at the current node, ``N_t_L`` is the number of samples in the left child, and ``N_t_R`` is the number of samples in the right child.  ``N``, ``N_t``, ``N_t_R`` and ``N_t_L`` all refer to the weighted sum, if ``sample_weight`` is passed.  .. versionadded:: 0.19"
        }
      },
      {
        "name": "min_impurity_split",
        "type": "Union",
        "init_args": {
          "semantic_types": [
            "min_impurity_split"
          ],
          "default": "min_impurity_split__None",
          "description": "Threshold for early stopping in tree growth. A node will split if its impurity is above the threshold, otherwise it is a leaf.  .. deprecated:: 0.19    ``min_impurity_split`` has been deprecated in favor of    ``min_impurity_decrease`` in 0.19. The default value of    ``min_impurity_split`` will change from 1e-7 to 0 in 0.23 and it    will be removed in 0.25. Use ``min_impurity_decrease`` instead."
        },
        "hyperparams": [
          {
            "type": "Hyperparameter",
            "name": "min_impurity_split__float",
            "init_args": {
              "semantic_types": [
                "min_impurity_split"
              ],
              "_structural_type": "float"
            }
          },
          {
            "type": "Constant",
            "name": "min_impurity_split__None",
            "init_args": {
              "semantic_types": [
                "min_impurity_split"
              ],
              "_structural_type": "None",
              "default": "None"
            }
          }
        ]
      },
      {
        "name": "init",
        "type": "Union",
        "init_args": {
          "semantic_types": [
            "init"
          ],
          "default": "init__None",
          "description": "An estimator object that is used to compute the initial predictions. ``init`` has to provide :term:`fit` and :term:`predict`. If 'zero', the initial raw predictions are set to zero. By default a ``DummyEstimator`` is used, predicting either the average target value (for loss='ls'), or a quantile for the other losses."
        },
        "hyperparams": [
          {
            "name": "init__Estimator",
            "type": "Hyperparameter",
            "init_args": {
              "_structural_type": "Estimator",
              "semantic_types": [
                "init"
              ]
            }
          },
          {
            "type": "Constant",
            "name": "init__str",
            "init_args": {
              "semantic_types": [
                "init"
              ],
              "_structural_type": "str"
            }
          },
          {
            "type": "Constant",
            "name": "init__None",
            "init_args": {
              "semantic_types": [
                "init"
              ],
              "_structural_type": "None",
              "default": "None"
            }
          }
        ]
      },
      {
        "name": "random_state",
        "type": "Union",
        "init_args": {
          "semantic_types": [
            "random_state"
          ],
          "default": "random_state__None",
          "description": "If int, random_state is the seed used by the random number generator; If RandomState instance, random_state is the random number generator; If None, the random number generator is the RandomState instance used by `np.random`."
        },
        "hyperparams": [
          {
            "type": "Hyperparameter",
            "name": "random_state__int",
            "init_args": {
              "semantic_types": [
                "random_state"
              ],
              "_structural_type": "int"
            }
          },
          {
            "type": "Constant",
            "name": "random_state__None",
            "init_args": {
              "semantic_types": [
                "random_state"
              ],
              "_structural_type": "None",
              "default": "None"
            }
          }
        ]
      },
      {
        "name": "max_features",
        "type": "Union",
        "init_args": {
          "semantic_types": [
            "max_features"
          ],
          "default": "None",
          "description": "The number of features to consider when looking for the best split:  - If int, then consider `max_features` features at each split. - If float, then `max_features` is a fraction and   `int(max_features * n_features)` features are considered at each   split. - If \"auto\", then `max_features=n_features`. - If \"sqrt\", then `max_features=sqrt(n_features)`. - If \"log2\", then `max_features=log2(n_features)`. - If None, then `max_features=n_features`.  Choosing `max_features < n_features` leads to a reduction of variance and an increase in bias.  Note: the search for a split does not stop until at least one valid partition of the node samples is found, even if it requires to effectively inspect more than ``max_features`` features."
        },
        "hyperparams": [
          {
            "type": "Enumeration",
            "name": "max_features__str",
            "init_args": {
              "semantic_types": [
                "max_features"
              ],
              "values": [
                "auto",
                "sqrt",
                "log2"
              ],
              "_structural_type": "str"
            }
          },
          {
            "type": "Hyperparameter",
            "name": "max_features__int",
            "init_args": {
              "semantic_types": [
                "max_features"
              ],
              "_structural_type": "int"
            }
          },
          {
            "type": "Hyperparameter",
            "name": "max_features__float",
            "init_args": {
              "semantic_types": [
                "max_features"
              ],
              "_structural_type": "float"
            }
          }
        ]
      },
      {
        "type": "Hyperparameter",
        "name": "alpha",
        "init_args": {
          "semantic_types": [
            "alpha"
          ],
          "_structural_type": "float",
          "default": 0.9,
          "description": "The alpha-quantile of the huber loss function and the quantile loss function. Only if ``loss='huber'`` or ``loss='quantile'``."
        }
      },
      {
        "type": "Hyperparameter",
        "name": "verbose",
        "init_args": {
          "semantic_types": [
            "verbose"
          ],
          "_structural_type": "int",
          "default": 0,
          "description": "Enable verbose output. If 1 then it prints progress and performance once in a while (the more trees the lower the frequency). If greater than 1 then it prints progress and performance for every tree."
        }
      },
      {
        "name": "max_leaf_nodes",
        "type": "Union",
        "init_args": {
          "semantic_types": [
            "max_leaf_nodes"
          ],
          "default": "max_leaf_nodes__None",
          "description": "Grow trees with ``max_leaf_nodes`` in best-first fashion. Best nodes are defined as relative reduction in impurity. If None then unlimited number of leaf nodes."
        },
        "hyperparams": [
          {
            "type": "Hyperparameter",
            "name": "max_leaf_nodes__int",
            "init_args": {
              "semantic_types": [
                "max_leaf_nodes"
              ],
              "_structural_type": "int"
            }
          },
          {
            "type": "Constant",
            "name": "max_leaf_nodes__None",
            "init_args": {
              "semantic_types": [
                "max_leaf_nodes"
              ],
              "_structural_type": "None",
              "default": "None"
            }
          }
        ]
      },
      {
        "type": "Hyperparameter",
        "name": "warm_start",
        "init_args": {
          "semantic_types": [
            "warm_start"
          ],
          "_structural_type": "bool",
          "default": "False",
          "description": "When set to ``True``, reuse the solution of the previous call to fit and add more estimators to the ensemble, otherwise, just erase the previous solution. See :term:`the Glossary <warm_start>`."
        }
      },
      {
        "name": "presort",
        "type": "Union",
        "init_args": {
          "semantic_types": [
            "presort"
          ],
          "default": "presort__str",
          "description": "This parameter is deprecated and will be removed in v0.24.  .. deprecated :: 0.22"
        },
        "hyperparams": [
          {
            "type": "Hyperparameter",
            "name": "presort__bool",
            "init_args": {
              "semantic_types": [
                "presort"
              ],
              "_structural_type": "bool"
            }
          },
          {
            "type": "Constant",
            "name": "presort__str",
            "init_args": {
              "semantic_types": [
                "presort"
              ],
              "_structural_type": "str",
              "default": "deprecated"
            }
          }
        ]
      },
      {
        "type": "Hyperparameter",
        "name": "validation_fraction",
        "init_args": {
          "semantic_types": [
            "validation_fraction"
          ],
          "_structural_type": "float",
          "default": 0.1,
          "description": "The proportion of training data to set aside as validation set for early stopping. Must be between 0 and 1. Only used if ``n_iter_no_change`` is set to an integer.  .. versionadded:: 0.20"
        }
      },
      {
        "name": "n_iter_no_change",
        "type": "Union",
        "init_args": {
          "semantic_types": [
            "n_iter_no_change"
          ],
          "default": "n_iter_no_change__None",
          "description": "``n_iter_no_change`` is used to decide if early stopping will be used to terminate training when validation score is not improving. By default it is set to None to disable early stopping. If set to a number, it will set aside ``validation_fraction`` size of the training data as validation and terminate training when validation score is not improving in all of the previous ``n_iter_no_change`` numbers of iterations.  .. versionadded:: 0.20"
        },
        "hyperparams": [
          {
            "type": "Hyperparameter",
            "name": "n_iter_no_change__int",
            "init_args": {
              "semantic_types": [
                "n_iter_no_change"
              ],
              "_structural_type": "int"
            }
          },
          {
            "type": "Constant",
            "name": "n_iter_no_change__None",
            "init_args": {
              "semantic_types": [
                "n_iter_no_change"
              ],
              "_structural_type": "None",
              "default": "None"
            }
          }
        ]
      },
      {
        "type": "Hyperparameter",
        "name": "tol",
        "init_args": {
          "semantic_types": [
            "tol"
          ],
          "_structural_type": "float",
          "default": 0.0001,
          "description": "Tolerance for the early stopping. When the loss is not improving by at least tol for ``n_iter_no_change`` iterations (if set to a number), the training stops.  .. versionadded:: 0.20"
        }
      },
      {
        "type": "Hyperparameter",
        "name": "ccp_alpha",
        "init_args": {
          "semantic_types": [
            "ccp_alpha"
          ],
          "_structural_type": "float",
          "default": 0.0,
          "description": "Complexity parameter used for Minimal Cost-Complexity Pruning. The subtree with the largest cost complexity that is smaller than ``ccp_alpha`` will be chosen. By default, no pruning is performed. See :ref:`minimal_cost_complexity_pruning` for details.  .. versionadded:: 0.22"
        }
      }
    ]
  },
  "HistGradientBoostingClassifier": {
    "name": "sklearn.ensemble._hist_gradient_boosting.gradient_boosting.HistGradientBoostingClassifier",
    "common_name": "HistGradientBoostingClassifier",
    "description": "Histogram-based Gradient Boosting Classification Tree. This estimator is much faster than :class:`GradientBoostingClassifier<sklearn.ensemble.GradientBoostingClassifier>` for big datasets (n_samples >= 10 000).  This estimator has native support for missing values (NaNs). During training, the tree grower learns at each split point whether samples with missing values should go to the left or right child, based on the potential gain. When predicting, samples with missing values are assigned to the left or right child consequently. If no missing values were encountered for a given feature during training, then samples with missing values are mapped to whichever child has the most samples.  This implementation is inspired by `LightGBM <https://github.com/Microsoft/LightGBM>`_.  .. note::    This estimator is still **experimental** for now: the predictions   and the API might change without any deprecation cycle. To use it,   you need to explicitly import ``enable_hist_gradient_boosting``::      >>> # explicitly require this experimental feature     >>> from sklearn.experimental import enable_hist_gradient_boosting  # noqa     >>> # now you can import normally from ensemble     >>> from sklearn.ensemble import HistGradientBoostingClassifier  Read more in the :ref:`User Guide <histogram_based_gradient_boosting>`.  .. versionadded:: 0.21",
    "sklearn_version": "0.22.2.post1",
    "Hyperparams": [
      {
        "type": "Enumeration",
        "name": "loss",
        "init_args": {
          "semantic_types": [
            "loss"
          ],
          "values": [
            "auto",
            "binary_crossentropy",
            "categorical_crossentropy"
          ],
          "_structural_type": "str",
          "default": "auto",
          "description": "The loss function to use in the boosting process. 'binary_crossentropy' (also known as logistic loss) is used for binary classification and generalizes to 'categorical_crossentropy' for multiclass classification. 'auto' will automatically choose either loss depending on the nature of the problem."
        }
      },
      {
        "type": "Hyperparameter",
        "name": "learning_rate",
        "init_args": {
          "semantic_types": [
            "learning_rate"
          ],
          "_structural_type": "float",
          "default": 0.1,
          "description": "The learning rate, also known as *shrinkage*. This is used as a multiplicative factor for the leaves values. Use ``1`` for no shrinkage."
        }
      },
      {
        "type": "Hyperparameter",
        "name": "max_iter",
        "init_args": {
          "semantic_types": [
            "max_iter"
          ],
          "_structural_type": "int",
          "default": 100,
          "description": "The maximum number of iterations of the boosting process, i.e. the maximum number of trees for binary classification. For multiclass classification, `n_classes` trees per iteration are built."
        }
      },
      {
        "name": "max_leaf_nodes",
        "type": "Union",
        "init_args": {
          "semantic_types": [
            "max_leaf_nodes"
          ],
          "default": "max_leaf_nodes__int",
          "description": "The maximum number of leaves for each tree. Must be strictly greater than 1. If None, there is no maximum limit."
        },
        "hyperparams": [
          {
            "type": "Hyperparameter",
            "name": "max_leaf_nodes__int",
            "init_args": {
              "semantic_types": [
                "max_leaf_nodes"
              ],
              "_structural_type": "int",
              "default": 31
            }
          },
          {
            "type": "Constant",
            "name": "max_leaf_nodes__None",
            "init_args": {
              "semantic_types": [
                "max_leaf_nodes"
              ],
              "_structural_type": "None"
            }
          }
        ]
      },
      {
        "name": "max_depth",
        "type": "Union",
        "init_args": {
          "semantic_types": [
            "max_depth"
          ],
          "default": "max_depth__None",
          "description": "The maximum depth of each tree. The depth of a tree is the number of nodes to go from the root to the deepest leaf. Must be strictly greater than 1. Depth isn't constrained by default."
        },
        "hyperparams": [
          {
            "type": "Hyperparameter",
            "name": "max_depth__int",
            "init_args": {
              "semantic_types": [
                "max_depth"
              ],
              "_structural_type": "int"
            }
          },
          {
            "type": "Constant",
            "name": "max_depth__None",
            "init_args": {
              "semantic_types": [
                "max_depth"
              ],
              "_structural_type": "None",
              "default": "None"
            }
          }
        ]
      },
      {
        "type": "Hyperparameter",
        "name": "min_samples_leaf",
        "init_args": {
          "semantic_types": [
            "min_samples_leaf"
          ],
          "_structural_type": "int",
          "default": 20,
          "description": "The minimum number of samples per leaf. For small datasets with less than a few hundred samples, it is recommended to lower this value since only very shallow trees would be built."
        }
      },
      {
        "type": "Hyperparameter",
        "name": "l2_regularization",
        "init_args": {
          "semantic_types": [
            "l2_regularization"
          ],
          "_structural_type": "float",
          "default": 0.0,
          "description": "The L2 regularization parameter. Use 0 for no regularization."
        }
      },
      {
        "type": "Hyperparameter",
        "name": "max_bins",
        "init_args": {
          "semantic_types": [
            "max_bins"
          ],
          "_structural_type": "int",
          "default": 255,
          "description": "The maximum number of bins to use for non-missing values. Before training, each feature of the input array `X` is binned into integer-valued bins, which allows for a much faster training stage. Features with a small number of unique values may use less than ``max_bins`` bins. In addition to the ``max_bins`` bins, one more bin is always reserved for missing values. Must be no larger than 255."
        }
      },
      {
        "type": "Hyperparameter",
        "name": "warm_start",
        "init_args": {
          "semantic_types": [
            "warm_start"
          ],
          "_structural_type": "bool",
          "default": "False",
          "description": "When set to ``True``, reuse the solution of the previous call to fit and add more estimators to the ensemble. For results to be valid, the estimator should be re-trained on the same data only. See :term:`the Glossary <warm_start>`."
        }
      },
      {
        "name": "scoring",
        "type": "Union",
        "init_args": {
          "semantic_types": [
            "scoring"
          ],
          "default": "scoring__None",
          "description": "Scoring parameter to use for early stopping. It can be a single string (see :ref:`scoring_parameter`) or a callable (see :ref:`scoring`). If None, the estimator's default scorer is used. If ``scoring='loss'``, early stopping is checked w.r.t the loss value. Only used if ``n_iter_no_change`` is not None."
        },
        "hyperparams": [
          {
            "type": "Hyperparameter",
            "name": "scoring__str",
            "init_args": {
              "semantic_types": [
                "scoring"
              ],
              "_structural_type": "str"
            }
          },
          {
            "type": "Hyperparameter",
            "name": "scoring__Callable",
            "init_args": {
              "semantic_types": [
                "scoring"
              ],
              "_structural_type": "Callable"
            }
          },
          {
            "type": "Constant",
            "name": "scoring__None",
            "init_args": {
              "semantic_types": [
                "scoring"
              ],
              "_structural_type": "None",
              "default": "None"
            }
          }
        ]
      },
      {
        "name": "validation_fraction",
        "type": "Union",
        "init_args": {
          "semantic_types": [
            "validation_fraction"
          ],
          "default": "validation_fraction__float",
          "description": "Proportion (or absolute size) of training data to set aside as validation data for early stopping. If None, early stopping is done on the training data."
        },
        "hyperparams": [
          {
            "type": "Hyperparameter",
            "name": "validation_fraction__int",
            "init_args": {
              "semantic_types": [
                "validation_fraction"
              ],
              "_structural_type": "int"
            }
          },
          {
            "type": "Hyperparameter",
            "name": "validation_fraction__float",
            "init_args": {
              "semantic_types": [
                "validation_fraction"
              ],
              "_structural_type": "float",
              "default": 0.1
            }
          },
          {
            "type": "Constant",
            "name": "validation_fraction__None",
            "init_args": {
              "semantic_types": [
                "validation_fraction"
              ],
              "_structural_type": "None"
            }
          }
        ]
      },
      {
        "name": "n_iter_no_change",
        "type": "Union",
        "init_args": {
          "semantic_types": [
            "n_iter_no_change"
          ],
          "default": "n_iter_no_change__None",
          "description": "Used to determine when to \"early stop\". The fitting process is stopped when none of the last ``n_iter_no_change`` scores are better than the ``n_iter_no_change - 1`` -th-to-last one, up to some tolerance. If None or 0, no early-stopping is done."
        },
        "hyperparams": [
          {
            "type": "Hyperparameter",
            "name": "n_iter_no_change__int",
            "init_args": {
              "semantic_types": [
                "n_iter_no_change"
              ],
              "_structural_type": "int"
            }
          },
          {
            "type": "Constant",
            "name": "n_iter_no_change__None",
            "init_args": {
              "semantic_types": [
                "n_iter_no_change"
              ],
              "_structural_type": "None",
              "default": "None"
            }
          }
        ]
      },
      {
        "name": "tol",
        "type": "Union",
        "init_args": {
          "semantic_types": [
            "tol"
          ],
          "default": "tol__float",
          "description": "The absolute tolerance to use when comparing scores. The higher the tolerance, the more likely we are to early stop: higher tolerance means that it will be harder for subsequent iterations to be considered an improvement upon the reference score."
        },
        "hyperparams": [
          {
            "type": "Hyperparameter",
            "name": "tol__float",
            "init_args": {
              "semantic_types": [
                "tol"
              ],
              "_structural_type": "float",
              "default": 1e-07
            }
          },
          {
            "type": "Constant",
            "name": "tol__None",
            "init_args": {
              "semantic_types": [
                "tol"
              ],
              "_structural_type": "None"
            }
          }
        ]
      },
      {
        "type": "Hyperparameter",
        "name": "verbose",
        "init_args": {
          "semantic_types": [
            "verbose"
          ],
          "_structural_type": "int",
          "default": 0
        }
      },
      {
        "name": "random_state",
        "type": "Union",
        "init_args": {
          "semantic_types": [
            "random_state"
          ],
          "default": "random_state__None",
          "description": "Pseudo-random number generator to control the subsampling in the binning process, and the train/validation data split if early stopping is enabled. See :term:`random_state`."
        },
        "hyperparams": [
          {
            "type": "Hyperparameter",
            "name": "random_state__int",
            "init_args": {
              "semantic_types": [
                "random_state"
              ],
              "_structural_type": "int"
            }
          },
          {
            "type": "Constant",
            "name": "random_state__None",
            "init_args": {
              "semantic_types": [
                "random_state"
              ],
              "_structural_type": "None",
              "default": "None"
            }
          }
        ]
      }
    ]
  },
  "HistGradientBoostingRegressor": {
    "name": "sklearn.ensemble._hist_gradient_boosting.gradient_boosting.HistGradientBoostingRegressor",
    "common_name": "HistGradientBoostingRegressor",
    "description": "Histogram-based Gradient Boosting Regression Tree. This estimator is much faster than :class:`GradientBoostingRegressor<sklearn.ensemble.GradientBoostingRegressor>` for big datasets (n_samples >= 10 000).  This estimator has native support for missing values (NaNs). During training, the tree grower learns at each split point whether samples with missing values should go to the left or right child, based on the potential gain. When predicting, samples with missing values are assigned to the left or right child consequently. If no missing values were encountered for a given feature during training, then samples with missing values are mapped to whichever child has the most samples.  This implementation is inspired by `LightGBM <https://github.com/Microsoft/LightGBM>`_.  .. note::    This estimator is still **experimental** for now: the predictions   and the API might change without any deprecation cycle. To use it,   you need to explicitly import ``enable_hist_gradient_boosting``::      >>> # explicitly require this experimental feature     >>> from sklearn.experimental import enable_hist_gradient_boosting  # noqa     >>> # now you can import normally from ensemble     >>> from sklearn.ensemble import HistGradientBoostingClassifier  Read more in the :ref:`User Guide <histogram_based_gradient_boosting>`.  .. versionadded:: 0.21",
    "sklearn_version": "0.22.2.post1",
    "Hyperparams": [
      {
        "type": "Enumeration",
        "name": "loss",
        "init_args": {
          "semantic_types": [
            "loss"
          ],
          "values": [
            "least_squares",
            "least_absolute_deviation"
          ],
          "_structural_type": "str",
          "default": "least_squares",
          "description": "The loss function to use in the boosting process. Note that the \"least squares\" loss actually implements an \"half least squares loss\" to simplify the computation of the gradient."
        }
      },
      {
        "type": "Hyperparameter",
        "name": "learning_rate",
        "init_args": {
          "semantic_types": [
            "learning_rate"
          ],
          "_structural_type": "float",
          "default": 0.1,
          "description": "The learning rate, also known as *shrinkage*. This is used as a multiplicative factor for the leaves values. Use ``1`` for no shrinkage."
        }
      },
      {
        "type": "Hyperparameter",
        "name": "max_iter",
        "init_args": {
          "semantic_types": [
            "max_iter"
          ],
          "_structural_type": "int",
          "default": 100,
          "description": "The maximum number of iterations of the boosting process, i.e. the maximum number of trees."
        }
      },
      {
        "name": "max_leaf_nodes",
        "type": "Union",
        "init_args": {
          "semantic_types": [
            "max_leaf_nodes"
          ],
          "default": "max_leaf_nodes__int",
          "description": "The maximum number of leaves for each tree. Must be strictly greater than 1. If None, there is no maximum limit."
        },
        "hyperparams": [
          {
            "type": "Hyperparameter",
            "name": "max_leaf_nodes__int",
            "init_args": {
              "semantic_types": [
                "max_leaf_nodes"
              ],
              "_structural_type": "int",
              "default": 31
            }
          },
          {
            "type": "Constant",
            "name": "max_leaf_nodes__None",
            "init_args": {
              "semantic_types": [
                "max_leaf_nodes"
              ],
              "_structural_type": "None"
            }
          }
        ]
      },
      {
        "name": "max_depth",
        "type": "Union",
        "init_args": {
          "semantic_types": [
            "max_depth"
          ],
          "default": "max_depth__None",
          "description": "The maximum depth of each tree. The depth of a tree is the number of nodes to go from the root to the deepest leaf. Must be strictly greater than 1. Depth isn't constrained by default."
        },
        "hyperparams": [
          {
            "type": "Hyperparameter",
            "name": "max_depth__int",
            "init_args": {
              "semantic_types": [
                "max_depth"
              ],
              "_structural_type": "int"
            }
          },
          {
            "type": "Constant",
            "name": "max_depth__None",
            "init_args": {
              "semantic_types": [
                "max_depth"
              ],
              "_structural_type": "None",
              "default": "None"
            }
          }
        ]
      },
      {
        "type": "Hyperparameter",
        "name": "min_samples_leaf",
        "init_args": {
          "semantic_types": [
            "min_samples_leaf"
          ],
          "_structural_type": "int",
          "default": 20,
          "description": "The minimum number of samples per leaf. For small datasets with less than a few hundred samples, it is recommended to lower this value since only very shallow trees would be built."
        }
      },
      {
        "type": "Hyperparameter",
        "name": "l2_regularization",
        "init_args": {
          "semantic_types": [
            "l2_regularization"
          ],
          "_structural_type": "float",
          "default": 0.0,
          "description": "The L2 regularization parameter. Use ``0`` for no regularization (default)."
        }
      },
      {
        "type": "Hyperparameter",
        "name": "max_bins",
        "init_args": {
          "semantic_types": [
            "max_bins"
          ],
          "_structural_type": "int",
          "default": 255,
          "description": "The maximum number of bins to use for non-missing values. Before training, each feature of the input array `X` is binned into integer-valued bins, which allows for a much faster training stage. Features with a small number of unique values may use less than ``max_bins`` bins. In addition to the ``max_bins`` bins, one more bin is always reserved for missing values. Must be no larger than 255."
        }
      },
      {
        "type": "Hyperparameter",
        "name": "warm_start",
        "init_args": {
          "semantic_types": [
            "warm_start"
          ],
          "_structural_type": "bool",
          "default": "False",
          "description": "When set to ``True``, reuse the solution of the previous call to fit and add more estimators to the ensemble. For results to be valid, the estimator should be re-trained on the same data only. See :term:`the Glossary <warm_start>`."
        }
      },
      {
        "name": "scoring",
        "type": "Union",
        "init_args": {
          "semantic_types": [
            "scoring"
          ],
          "default": "scoring__None",
          "description": "Scoring parameter to use for early stopping. It can be a single string (see :ref:`scoring_parameter`) or a callable (see :ref:`scoring`). If None, the estimator's default scorer is used. If ``scoring='loss'``, early stopping is checked w.r.t the loss value. Only used if ``n_iter_no_change`` is not None."
        },
        "hyperparams": [
          {
            "type": "Hyperparameter",
            "name": "scoring__str",
            "init_args": {
              "semantic_types": [
                "scoring"
              ],
              "_structural_type": "str"
            }
          },
          {
            "type": "Hyperparameter",
            "name": "scoring__Callable",
            "init_args": {
              "semantic_types": [
                "scoring"
              ],
              "_structural_type": "Callable"
            }
          },
          {
            "type": "Constant",
            "name": "scoring__None",
            "init_args": {
              "semantic_types": [
                "scoring"
              ],
              "_structural_type": "None",
              "default": "None"
            }
          }
        ]
      },
      {
        "name": "validation_fraction",
        "type": "Union",
        "init_args": {
          "semantic_types": [
            "validation_fraction"
          ],
          "default": "validation_fraction__float",
          "description": "Proportion (or absolute size) of training data to set aside as validation data for early stopping. If None, early stopping is done on the training data. Only used if ``n_iter_no_change`` is not None."
        },
        "hyperparams": [
          {
            "type": "Hyperparameter",
            "name": "validation_fraction__int",
            "init_args": {
              "semantic_types": [
                "validation_fraction"
              ],
              "_structural_type": "int"
            }
          },
          {
            "type": "Hyperparameter",
            "name": "validation_fraction__float",
            "init_args": {
              "semantic_types": [
                "validation_fraction"
              ],
              "_structural_type": "float",
              "default": 0.1
            }
          },
          {
            "type": "Constant",
            "name": "validation_fraction__None",
            "init_args": {
              "semantic_types": [
                "validation_fraction"
              ],
              "_structural_type": "None"
            }
          }
        ]
      },
      {
        "name": "n_iter_no_change",
        "type": "Union",
        "init_args": {
          "semantic_types": [
            "n_iter_no_change"
          ],
          "default": "n_iter_no_change__None",
          "description": "Used to determine when to \"early stop\". The fitting process is stopped when none of the last ``n_iter_no_change`` scores are better than the ``n_iter_no_change - 1`` -th-to-last one, up to some tolerance. If None or 0, no early-stopping is done."
        },
        "hyperparams": [
          {
            "type": "Hyperparameter",
            "name": "n_iter_no_change__int",
            "init_args": {
              "semantic_types": [
                "n_iter_no_change"
              ],
              "_structural_type": "int"
            }
          },
          {
            "type": "Constant",
            "name": "n_iter_no_change__None",
            "init_args": {
              "semantic_types": [
                "n_iter_no_change"
              ],
              "_structural_type": "None",
              "default": "None"
            }
          }
        ]
      },
      {
        "name": "tol",
        "type": "Union",
        "init_args": {
          "semantic_types": [
            "tol"
          ],
          "default": "tol__float",
          "description": "The absolute tolerance to use when comparing scores during early stopping. The higher the tolerance, the more likely we are to early stop: higher tolerance means that it will be harder for subsequent iterations to be considered an improvement upon the reference score."
        },
        "hyperparams": [
          {
            "type": "Hyperparameter",
            "name": "tol__float",
            "init_args": {
              "semantic_types": [
                "tol"
              ],
              "_structural_type": "float",
              "default": 1e-07
            }
          },
          {
            "type": "Constant",
            "name": "tol__None",
            "init_args": {
              "semantic_types": [
                "tol"
              ],
              "_structural_type": "None"
            }
          }
        ]
      },
      {
        "type": "Hyperparameter",
        "name": "verbose",
        "init_args": {
          "semantic_types": [
            "verbose"
          ],
          "_structural_type": "int",
          "default": 0
        }
      },
      {
        "name": "random_state",
        "type": "Union",
        "init_args": {
          "semantic_types": [
            "random_state"
          ],
          "default": "random_state__None",
          "description": "Pseudo-random number generator to control the subsampling in the binning process, and the train/validation data split if early stopping is enabled. See :term:`random_state`."
        },
        "hyperparams": [
          {
            "type": "Hyperparameter",
            "name": "random_state__int",
            "init_args": {
              "semantic_types": [
                "random_state"
              ],
              "_structural_type": "int"
            }
          },
          {
            "type": "Constant",
            "name": "random_state__None",
            "init_args": {
              "semantic_types": [
                "random_state"
              ],
              "_structural_type": "None",
              "default": "None"
            }
          }
        ]
      }
    ]
  },
  "IsolationForest": {
    "name": "sklearn.ensemble._iforest.IsolationForest",
    "common_name": "IsolationForest",
    "description": "Isolation Forest Algorithm. Return the anomaly score of each sample using the IsolationForest algorithm  The IsolationForest 'isolates' observations by randomly selecting a feature and then randomly selecting a split value between the maximum and minimum values of the selected feature.  Since recursive partitioning can be represented by a tree structure, the number of splittings required to isolate a sample is equivalent to the path length from the root node to the terminating node.  This path length, averaged over a forest of such random trees, is a measure of normality and our decision function.  Random partitioning produces noticeably shorter paths for anomalies. Hence, when a forest of random trees collectively produce shorter path lengths for particular samples, they are highly likely to be anomalies.  Read more in the :ref:`User Guide <isolation_forest>`.  .. versionadded:: 0.18",
    "sklearn_version": "0.22.2.post1",
    "Hyperparams": [
      {
        "type": "Hyperparameter",
        "name": "n_estimators",
        "init_args": {
          "semantic_types": [
            "n_estimators"
          ],
          "_structural_type": "int",
          "default": 100,
          "description": "The number of base estimators in the ensemble."
        }
      },
      {
        "name": "max_samples",
        "type": "Union",
        "init_args": {
          "semantic_types": [
            "max_samples"
          ],
          "default": "max_samples__str",
          "description": "The number of samples to draw from X to train each base estimator.     - If int, then draw `max_samples` samples.     - If float, then draw `max_samples * X.shape[0]` samples.     - If \"auto\", then `max_samples=min(256, n_samples)`.  If max_samples is larger than the number of samples provided, all samples will be used for all trees (no sampling)."
        },
        "hyperparams": [
          {
            "type": "Constant",
            "name": "max_samples__str",
            "init_args": {
              "semantic_types": [
                "max_samples"
              ],
              "_structural_type": "str",
              "default": "auto"
            }
          },
          {
            "type": "Hyperparameter",
            "name": "max_samples__int",
            "init_args": {
              "semantic_types": [
                "max_samples"
              ],
              "_structural_type": "int"
            }
          },
          {
            "type": "Hyperparameter",
            "name": "max_samples__float",
            "init_args": {
              "semantic_types": [
                "max_samples"
              ],
              "_structural_type": "float"
            }
          }
        ]
      },
      {
        "name": "contamination",
        "type": "Union",
        "init_args": {
          "semantic_types": [
            "contamination"
          ],
          "default": "contamination__str",
          "description": "The amount of contamination of the data set, i.e. the proportion of outliers in the data set. Used when fitting to define the threshold on the scores of the samples.      - If 'auto', the threshold is determined as in the       original paper.     - If float, the contamination should be in the range [0, 0.5].  .. versionchanged:: 0.22    The default value of ``contamination`` changed from 0.1    to ``'auto'``."
        },
        "hyperparams": [
          {
            "type": "Constant",
            "name": "contamination__str",
            "init_args": {
              "semantic_types": [
                "contamination"
              ],
              "_structural_type": "str",
              "default": "auto"
            }
          },
          {
            "type": "Hyperparameter",
            "name": "contamination__float",
            "init_args": {
              "semantic_types": [
                "contamination"
              ],
              "_structural_type": "float"
            }
          }
        ]
      },
      {
        "name": "max_features",
        "type": "Union",
        "init_args": {
          "semantic_types": [
            "max_features"
          ],
          "default": "max_features__float",
          "description": "The number of features to draw from X to train each base estimator.      - If int, then draw `max_features` features.     - If float, then draw `max_features * X.shape[1]` features."
        },
        "hyperparams": [
          {
            "type": "Hyperparameter",
            "name": "max_features__int",
            "init_args": {
              "semantic_types": [
                "max_features"
              ],
              "_structural_type": "int"
            }
          },
          {
            "type": "Hyperparameter",
            "name": "max_features__float",
            "init_args": {
              "semantic_types": [
                "max_features"
              ],
              "_structural_type": "float",
              "default": 1.0
            }
          }
        ]
      },
      {
        "type": "Hyperparameter",
        "name": "bootstrap",
        "init_args": {
          "semantic_types": [
            "bootstrap"
          ],
          "_structural_type": "bool",
          "default": "False",
          "description": "If True, individual trees are fit on random subsets of the training data sampled with replacement. If False, sampling without replacement is performed."
        }
      },
      {
        "name": "n_jobs",
        "type": "Union",
        "init_args": {
          "semantic_types": [
            "n_jobs"
          ],
          "default": "n_jobs__None",
          "description": "The number of jobs to run in parallel for both :meth:`fit` and :meth:`predict`. ``None`` means 1 unless in a :obj:`joblib.parallel_backend` context. ``-1`` means using all processors. See :term:`Glossary <n_jobs>` for more details."
        },
        "hyperparams": [
          {
            "type": "Hyperparameter",
            "name": "n_jobs__int",
            "init_args": {
              "semantic_types": [
                "n_jobs"
              ],
              "_structural_type": "int"
            }
          },
          {
            "type": "Constant",
            "name": "n_jobs__None",
            "init_args": {
              "semantic_types": [
                "n_jobs"
              ],
              "_structural_type": "None",
              "default": "None"
            }
          }
        ]
      },
      {
        "type": "Hyperparameter",
        "name": "behaviour",
        "init_args": {
          "semantic_types": [
            "behaviour"
          ],
          "_structural_type": "str",
          "default": "deprecated",
          "description": "This parameter has not effect, is deprecated, and will be removed.  .. versionadded:: 0.20    ``behaviour`` is added in 0.20 for back-compatibility purpose.  .. deprecated:: 0.20    ``behaviour='old'`` is deprecated in 0.20 and will not be possible    in 0.22.  .. deprecated:: 0.22    ``behaviour`` parameter is deprecated in 0.22 and removed in    0.24."
        }
      },
      {
        "name": "random_state",
        "type": "Union",
        "init_args": {
          "semantic_types": [
            "random_state"
          ],
          "default": "random_state__None",
          "description": "If int, random_state is the seed used by the random number generator; If RandomState instance, random_state is the random number generator; If None, the random number generator is the RandomState instance used by `np.random`."
        },
        "hyperparams": [
          {
            "type": "Hyperparameter",
            "name": "random_state__int",
            "init_args": {
              "semantic_types": [
                "random_state"
              ],
              "_structural_type": "int"
            }
          },
          {
            "type": "Constant",
            "name": "random_state__None",
            "init_args": {
              "semantic_types": [
                "random_state"
              ],
              "_structural_type": "None",
              "default": "None"
            }
          }
        ]
      },
      {
        "type": "Hyperparameter",
        "name": "verbose",
        "init_args": {
          "semantic_types": [
            "verbose"
          ],
          "_structural_type": "int",
          "default": 0,
          "description": "Controls the verbosity of the tree building process."
        }
      },
      {
        "type": "Hyperparameter",
        "name": "warm_start",
        "init_args": {
          "semantic_types": [
            "warm_start"
          ],
          "_structural_type": "bool",
          "default": "False",
          "description": "When set to ``True``, reuse the solution of the previous call to fit and add more estimators to the ensemble, otherwise, just fit a whole new forest. See :term:`the Glossary <warm_start>`.  .. versionadded:: 0.21"
        }
      }
    ]
  },
  "RandomForestClassifier": {
    "name": "sklearn.ensemble._forest.RandomForestClassifier",
    "common_name": "RandomForestClassifier",
    "description": "A random forest classifier. A random forest is a meta estimator that fits a number of decision tree classifiers on various sub-samples of the dataset and uses averaging to improve the predictive accuracy and control over-fitting. The sub-sample size is always the same as the original input sample size but the samples are drawn with replacement if `bootstrap=True` (default).  Read more in the :ref:`User Guide <forest>`.",
    "sklearn_version": "0.22.2.post1",
    "Hyperparams": [
      {
        "type": "Hyperparameter",
        "name": "n_estimators",
        "init_args": {
          "semantic_types": [
            "n_estimators"
          ],
          "_structural_type": "int",
          "default": 100,
          "description": "The number of trees in the forest.  .. versionchanged:: 0.22    The default value of ``n_estimators`` changed from 10 to 100    in 0.22."
        }
      },
      {
        "type": "Enumeration",
        "name": "criterion",
        "init_args": {
          "semantic_types": [
            "criterion"
          ],
          "values": [
            "gini",
            "entropy"
          ],
          "_structural_type": "str",
          "default": "gini",
          "description": "The function to measure the quality of a split. Supported criteria are \"gini\" for the Gini impurity and \"entropy\" for the information gain. Note: this parameter is tree-specific."
        }
      },
      {
        "name": "max_depth",
        "type": "Union",
        "init_args": {
          "semantic_types": [
            "max_depth"
          ],
          "default": "max_depth__None",
          "description": "The maximum depth of the tree. If None, then nodes are expanded until all leaves are pure or until all leaves contain less than min_samples_split samples."
        },
        "hyperparams": [
          {
            "type": "Hyperparameter",
            "name": "max_depth__int",
            "init_args": {
              "semantic_types": [
                "max_depth"
              ],
              "_structural_type": "int"
            }
          },
          {
            "type": "Constant",
            "name": "max_depth__None",
            "init_args": {
              "semantic_types": [
                "max_depth"
              ],
              "_structural_type": "None",
              "default": "None"
            }
          }
        ]
      },
      {
        "name": "min_samples_split",
        "type": "Union",
        "init_args": {
          "semantic_types": [
            "min_samples_split"
          ],
          "default": "min_samples_split__int",
          "description": "The minimum number of samples required to split an internal node:  - If int, then consider `min_samples_split` as the minimum number. - If float, then `min_samples_split` is a fraction and   `ceil(min_samples_split * n_samples)` are the minimum   number of samples for each split.  .. versionchanged:: 0.18    Added float values for fractions."
        },
        "hyperparams": [
          {
            "type": "Hyperparameter",
            "name": "min_samples_split__int",
            "init_args": {
              "semantic_types": [
                "min_samples_split"
              ],
              "_structural_type": "int",
              "default": 2
            }
          },
          {
            "type": "Hyperparameter",
            "name": "min_samples_split__float",
            "init_args": {
              "semantic_types": [
                "min_samples_split"
              ],
              "_structural_type": "float"
            }
          }
        ]
      },
      {
        "name": "min_samples_leaf",
        "type": "Union",
        "init_args": {
          "semantic_types": [
            "min_samples_leaf"
          ],
          "default": "min_samples_leaf__int",
          "description": "The minimum number of samples required to be at a leaf node. A split point at any depth will only be considered if it leaves at least ``min_samples_leaf`` training samples in each of the left and right branches.  This may have the effect of smoothing the model, especially in regression.  - If int, then consider `min_samples_leaf` as the minimum number. - If float, then `min_samples_leaf` is a fraction and   `ceil(min_samples_leaf * n_samples)` are the minimum   number of samples for each node.  .. versionchanged:: 0.18    Added float values for fractions."
        },
        "hyperparams": [
          {
            "type": "Hyperparameter",
            "name": "min_samples_leaf__int",
            "init_args": {
              "semantic_types": [
                "min_samples_leaf"
              ],
              "_structural_type": "int",
              "default": 1
            }
          },
          {
            "type": "Hyperparameter",
            "name": "min_samples_leaf__float",
            "init_args": {
              "semantic_types": [
                "min_samples_leaf"
              ],
              "_structural_type": "float"
            }
          }
        ]
      },
      {
        "type": "Hyperparameter",
        "name": "min_weight_fraction_leaf",
        "init_args": {
          "semantic_types": [
            "min_weight_fraction_leaf"
          ],
          "_structural_type": "float",
          "default": 0.0,
          "description": "The minimum weighted fraction of the sum total of weights (of all the input samples) required to be at a leaf node. Samples have equal weight when sample_weight is not provided."
        }
      },
      {
        "name": "max_features",
        "type": "Union",
        "init_args": {
          "semantic_types": [
            "max_features"
          ],
          "default": "max_features__str",
          "description": "The number of features to consider when looking for the best split:  - If int, then consider `max_features` features at each split. - If float, then `max_features` is a fraction and   `int(max_features * n_features)` features are considered at each   split. - If \"auto\", then `max_features=sqrt(n_features)`. - If \"sqrt\", then `max_features=sqrt(n_features)` (same as \"auto\"). - If \"log2\", then `max_features=log2(n_features)`. - If None, then `max_features=n_features`.  Note: the search for a split does not stop until at least one valid partition of the node samples is found, even if it requires to effectively inspect more than ``max_features`` features."
        },
        "hyperparams": [
          {
            "type": "Enumeration",
            "name": "max_features__str",
            "init_args": {
              "semantic_types": [
                "max_features"
              ],
              "values": [
                "auto",
                "sqrt",
                "log2"
              ],
              "_structural_type": "str",
              "default": "auto"
            }
          },
          {
            "type": "Hyperparameter",
            "name": "max_features__int",
            "init_args": {
              "semantic_types": [
                "max_features"
              ],
              "_structural_type": "int"
            }
          },
          {
            "type": "Hyperparameter",
            "name": "max_features__float",
            "init_args": {
              "semantic_types": [
                "max_features"
              ],
              "_structural_type": "float"
            }
          }
        ]
      },
      {
        "name": "max_leaf_nodes",
        "type": "Union",
        "init_args": {
          "semantic_types": [
            "max_leaf_nodes"
          ],
          "default": "max_leaf_nodes__None",
          "description": "Grow trees with ``max_leaf_nodes`` in best-first fashion. Best nodes are defined as relative reduction in impurity. If None then unlimited number of leaf nodes."
        },
        "hyperparams": [
          {
            "type": "Hyperparameter",
            "name": "max_leaf_nodes__int",
            "init_args": {
              "semantic_types": [
                "max_leaf_nodes"
              ],
              "_structural_type": "int"
            }
          },
          {
            "type": "Constant",
            "name": "max_leaf_nodes__None",
            "init_args": {
              "semantic_types": [
                "max_leaf_nodes"
              ],
              "_structural_type": "None",
              "default": "None"
            }
          }
        ]
      },
      {
        "type": "Hyperparameter",
        "name": "min_impurity_decrease",
        "init_args": {
          "semantic_types": [
            "min_impurity_decrease"
          ],
          "_structural_type": "float",
          "default": 0.0,
          "description": "A node will be split if this split induces a decrease of the impurity greater than or equal to this value.  The weighted impurity decrease equation is the following::      N_t / N * (impurity - N_t_R / N_t * right_impurity                         - N_t_L / N_t * left_impurity)  where ``N`` is the total number of samples, ``N_t`` is the number of samples at the current node, ``N_t_L`` is the number of samples in the left child, and ``N_t_R`` is the number of samples in the right child.  ``N``, ``N_t``, ``N_t_R`` and ``N_t_L`` all refer to the weighted sum, if ``sample_weight`` is passed.  .. versionadded:: 0.19"
        }
      },
      {
        "name": "min_impurity_split",
        "type": "Union",
        "init_args": {
          "semantic_types": [
            "min_impurity_split"
          ],
          "default": "min_impurity_split__None",
          "description": "Threshold for early stopping in tree growth. A node will split if its impurity is above the threshold, otherwise it is a leaf.  .. deprecated:: 0.19    ``min_impurity_split`` has been deprecated in favor of    ``min_impurity_decrease`` in 0.19. The default value of    ``min_impurity_split`` will change from 1e-7 to 0 in 0.23 and it    will be removed in 0.25. Use ``min_impurity_decrease`` instead."
        },
        "hyperparams": [
          {
            "type": "Hyperparameter",
            "name": "min_impurity_split__float",
            "init_args": {
              "semantic_types": [
                "min_impurity_split"
              ],
              "_structural_type": "float"
            }
          },
          {
            "type": "Constant",
            "name": "min_impurity_split__None",
            "init_args": {
              "semantic_types": [
                "min_impurity_split"
              ],
              "_structural_type": "None",
              "default": "None"
            }
          }
        ]
      },
      {
        "type": "Hyperparameter",
        "name": "bootstrap",
        "init_args": {
          "semantic_types": [
            "bootstrap"
          ],
          "_structural_type": "bool",
          "default": "True",
          "description": "Whether bootstrap samples are used when building trees. If False, the whole datset is used to build each tree."
        }
      },
      {
        "type": "Hyperparameter",
        "name": "oob_score",
        "init_args": {
          "semantic_types": [
            "oob_score"
          ],
          "_structural_type": "bool",
          "default": "False",
          "description": "Whether to use out-of-bag samples to estimate the generalization accuracy."
        }
      },
      {
        "name": "n_jobs",
        "type": "Union",
        "init_args": {
          "semantic_types": [
            "n_jobs"
          ],
          "default": "n_jobs__None",
          "description": "The number of jobs to run in parallel. :meth:`fit`, :meth:`predict`, :meth:`decision_path` and :meth:`apply` are all parallelized over the trees. ``None`` means 1 unless in a :obj:`joblib.parallel_backend` context. ``-1`` means using all processors. See :term:`Glossary <n_jobs>` for more details."
        },
        "hyperparams": [
          {
            "type": "Hyperparameter",
            "name": "n_jobs__int",
            "init_args": {
              "semantic_types": [
                "n_jobs"
              ],
              "_structural_type": "int"
            }
          },
          {
            "type": "Constant",
            "name": "n_jobs__None",
            "init_args": {
              "semantic_types": [
                "n_jobs"
              ],
              "_structural_type": "None",
              "default": "None"
            }
          }
        ]
      },
      {
        "name": "random_state",
        "type": "Union",
        "init_args": {
          "semantic_types": [
            "random_state"
          ],
          "default": "random_state__None",
          "description": "Controls both the randomness of the bootstrapping of the samples used when building trees (if ``bootstrap=True``) and the sampling of the features to consider when looking for the best split at each node (if ``max_features < n_features``). See :term:`Glossary <random_state>` for details."
        },
        "hyperparams": [
          {
            "type": "Hyperparameter",
            "name": "random_state__int",
            "init_args": {
              "semantic_types": [
                "random_state"
              ],
              "_structural_type": "int"
            }
          },
          {
            "type": "Constant",
            "name": "random_state__None",
            "init_args": {
              "semantic_types": [
                "random_state"
              ],
              "_structural_type": "None",
              "default": "None"
            }
          }
        ]
      },
      {
        "type": "Hyperparameter",
        "name": "verbose",
        "init_args": {
          "semantic_types": [
            "verbose"
          ],
          "_structural_type": "int",
          "default": 0,
          "description": "Controls the verbosity when fitting and predicting."
        }
      },
      {
        "type": "Hyperparameter",
        "name": "warm_start",
        "init_args": {
          "semantic_types": [
            "warm_start"
          ],
          "_structural_type": "bool",
          "default": "False",
          "description": "When set to ``True``, reuse the solution of the previous call to fit and add more estimators to the ensemble, otherwise, just fit a whole new forest. See :term:`the Glossary <warm_start>`."
        }
      },
      {
        "name": "class_weight",
        "type": "Union",
        "init_args": {
          "semantic_types": [
            "class_weight"
          ],
          "default": "class_weight__None",
          "description": "Weights associated with classes in the form ``{class_label: weight}``. If not given, all classes are supposed to have weight one. For multi-output problems, a list of dicts can be provided in the same order as the columns of y.  Note that for multioutput (including multilabel) weights should be defined for each class of every column in its own dict. For example, for four-class multilabel classification weights should be [{0: 1, 1: 1}, {0: 1, 1: 5}, {0: 1, 1: 1}, {0: 1, 1: 1}] instead of [{1:1}, {2:5}, {3:1}, {4:1}].  The \"balanced\" mode uses the values of y to automatically adjust weights inversely proportional to class frequencies in the input data as ``n_samples / (n_classes * np.bincount(y))``  The \"balanced_subsample\" mode is the same as \"balanced\" except that weights are computed based on the bootstrap sample for every tree grown.  For multi-output, the weights of each column of y will be multiplied.  Note that these weights will be multiplied with sample_weight (passed through the fit method) if sample_weight is specified."
        },
        "hyperparams": [
          {
            "type": "Enumeration",
            "name": "class_weight__str",
            "init_args": {
              "semantic_types": [
                "class_weight"
              ],
              "values": [
                "balanced",
                "balanced_subsample"
              ],
              "_structural_type": "str"
            }
          },
          {
            "type": "Hyperparameter",
            "name": "class_weight__dict",
            "init_args": {
              "semantic_types": [
                "class_weight"
              ],
              "_structural_type": "dict"
            }
          },
          {
            "type": "Hyperparameter",
            "name": "class_weight__list",
            "init_args": {
              "semantic_types": [
                "class_weight"
              ],
              "_structural_type": "list"
            }
          },
          {
            "type": "Constant",
            "name": "class_weight__None",
            "init_args": {
              "semantic_types": [
                "class_weight"
              ],
              "_structural_type": "None",
              "default": "None"
            }
          }
        ]
      },
      {
        "type": "Hyperparameter",
        "name": "ccp_alpha",
        "init_args": {
          "semantic_types": [
            "ccp_alpha"
          ],
          "_structural_type": "float",
          "default": 0.0,
          "description": "Complexity parameter used for Minimal Cost-Complexity Pruning. The subtree with the largest cost complexity that is smaller than ``ccp_alpha`` will be chosen. By default, no pruning is performed. See :ref:`minimal_cost_complexity_pruning` for details.  .. versionadded:: 0.22"
        }
      },
      {
        "name": "max_samples",
        "type": "Union",
        "init_args": {
          "semantic_types": [
            "max_samples"
          ],
          "default": "max_samples__None",
          "description": "If bootstrap is True, the number of samples to draw from X to train each base estimator.  - If None (default), then draw `X.shape[0]` samples. - If int, then draw `max_samples` samples. - If float, then draw `max_samples * X.shape[0]` samples. Thus,   `max_samples` should be in the interval `(0, 1)`.  .. versionadded:: 0.22"
        },
        "hyperparams": [
          {
            "type": "Hyperparameter",
            "name": "max_samples__int",
            "init_args": {
              "semantic_types": [
                "max_samples"
              ],
              "_structural_type": "int"
            }
          },
          {
            "type": "Hyperparameter",
            "name": "max_samples__float",
            "init_args": {
              "semantic_types": [
                "max_samples"
              ],
              "_structural_type": "float"
            }
          },
          {
            "type": "Constant",
            "name": "max_samples__None",
            "init_args": {
              "semantic_types": [
                "max_samples"
              ],
              "_structural_type": "None",
              "default": "None"
            }
          }
        ]
      }
    ]
  },
  "RandomForestRegressor": {
    "name": "sklearn.ensemble._forest.RandomForestRegressor",
    "common_name": "RandomForestRegressor",
    "description": "A random forest regressor. A random forest is a meta estimator that fits a number of classifying decision trees on various sub-samples of the dataset and uses averaging to improve the predictive accuracy and control over-fitting. The sub-sample size is always the same as the original input sample size but the samples are drawn with replacement if `bootstrap=True` (default).  Read more in the :ref:`User Guide <forest>`.",
    "sklearn_version": "0.22.2.post1",
    "Hyperparams": [
      {
        "type": "Hyperparameter",
        "name": "n_estimators",
        "init_args": {
          "semantic_types": [
            "n_estimators"
          ],
          "_structural_type": "int",
          "default": 100,
          "description": "The number of trees in the forest.  .. versionchanged:: 0.22    The default value of ``n_estimators`` changed from 10 to 100    in 0.22."
        }
      },
      {
        "type": "Enumeration",
        "name": "criterion",
        "init_args": {
          "semantic_types": [
            "criterion"
          ],
          "values": [
            "mse",
            "mae"
          ],
          "_structural_type": "str",
          "default": "mse",
          "description": "The function to measure the quality of a split. Supported criteria are \"mse\" for the mean squared error, which is equal to variance reduction as feature selection criterion, and \"mae\" for the mean absolute error.  .. versionadded:: 0.18    Mean Absolute Error (MAE) criterion."
        }
      },
      {
        "name": "max_depth",
        "type": "Union",
        "init_args": {
          "semantic_types": [
            "max_depth"
          ],
          "default": "max_depth__None",
          "description": "The maximum depth of the tree. If None, then nodes are expanded until all leaves are pure or until all leaves contain less than min_samples_split samples."
        },
        "hyperparams": [
          {
            "type": "Hyperparameter",
            "name": "max_depth__int",
            "init_args": {
              "semantic_types": [
                "max_depth"
              ],
              "_structural_type": "int"
            }
          },
          {
            "type": "Constant",
            "name": "max_depth__None",
            "init_args": {
              "semantic_types": [
                "max_depth"
              ],
              "_structural_type": "None",
              "default": "None"
            }
          }
        ]
      },
      {
        "name": "min_samples_split",
        "type": "Union",
        "init_args": {
          "semantic_types": [
            "min_samples_split"
          ],
          "default": "min_samples_split__int",
          "description": "The minimum number of samples required to split an internal node:  - If int, then consider `min_samples_split` as the minimum number. - If float, then `min_samples_split` is a fraction and   `ceil(min_samples_split * n_samples)` are the minimum   number of samples for each split.  .. versionchanged:: 0.18    Added float values for fractions."
        },
        "hyperparams": [
          {
            "type": "Hyperparameter",
            "name": "min_samples_split__int",
            "init_args": {
              "semantic_types": [
                "min_samples_split"
              ],
              "_structural_type": "int",
              "default": 2
            }
          },
          {
            "type": "Hyperparameter",
            "name": "min_samples_split__float",
            "init_args": {
              "semantic_types": [
                "min_samples_split"
              ],
              "_structural_type": "float"
            }
          }
        ]
      },
      {
        "name": "min_samples_leaf",
        "type": "Union",
        "init_args": {
          "semantic_types": [
            "min_samples_leaf"
          ],
          "default": "min_samples_leaf__int",
          "description": "The minimum number of samples required to be at a leaf node. A split point at any depth will only be considered if it leaves at least ``min_samples_leaf`` training samples in each of the left and right branches.  This may have the effect of smoothing the model, especially in regression.  - If int, then consider `min_samples_leaf` as the minimum number. - If float, then `min_samples_leaf` is a fraction and   `ceil(min_samples_leaf * n_samples)` are the minimum   number of samples for each node.  .. versionchanged:: 0.18    Added float values for fractions."
        },
        "hyperparams": [
          {
            "type": "Hyperparameter",
            "name": "min_samples_leaf__int",
            "init_args": {
              "semantic_types": [
                "min_samples_leaf"
              ],
              "_structural_type": "int",
              "default": 1
            }
          },
          {
            "type": "Hyperparameter",
            "name": "min_samples_leaf__float",
            "init_args": {
              "semantic_types": [
                "min_samples_leaf"
              ],
              "_structural_type": "float"
            }
          }
        ]
      },
      {
        "type": "Hyperparameter",
        "name": "min_weight_fraction_leaf",
        "init_args": {
          "semantic_types": [
            "min_weight_fraction_leaf"
          ],
          "_structural_type": "float",
          "default": 0.0,
          "description": "The minimum weighted fraction of the sum total of weights (of all the input samples) required to be at a leaf node. Samples have equal weight when sample_weight is not provided."
        }
      },
      {
        "name": "max_features",
        "type": "Union",
        "init_args": {
          "semantic_types": [
            "max_features"
          ],
          "default": "max_features__str",
          "description": "The number of features to consider when looking for the best split:  - If int, then consider `max_features` features at each split. - If float, then `max_features` is a fraction and   `int(max_features * n_features)` features are considered at each   split. - If \"auto\", then `max_features=n_features`. - If \"sqrt\", then `max_features=sqrt(n_features)`. - If \"log2\", then `max_features=log2(n_features)`. - If None, then `max_features=n_features`.  Note: the search for a split does not stop until at least one valid partition of the node samples is found, even if it requires to effectively inspect more than ``max_features`` features."
        },
        "hyperparams": [
          {
            "type": "Enumeration",
            "name": "max_features__str",
            "init_args": {
              "semantic_types": [
                "max_features"
              ],
              "values": [
                "auto",
                "sqrt",
                "log2"
              ],
              "_structural_type": "str",
              "default": "auto"
            }
          },
          {
            "type": "Hyperparameter",
            "name": "max_features__int",
            "init_args": {
              "semantic_types": [
                "max_features"
              ],
              "_structural_type": "int"
            }
          },
          {
            "type": "Hyperparameter",
            "name": "max_features__float",
            "init_args": {
              "semantic_types": [
                "max_features"
              ],
              "_structural_type": "float"
            }
          }
        ]
      },
      {
        "name": "max_leaf_nodes",
        "type": "Union",
        "init_args": {
          "semantic_types": [
            "max_leaf_nodes"
          ],
          "default": "max_leaf_nodes__None",
          "description": "Grow trees with ``max_leaf_nodes`` in best-first fashion. Best nodes are defined as relative reduction in impurity. If None then unlimited number of leaf nodes."
        },
        "hyperparams": [
          {
            "type": "Hyperparameter",
            "name": "max_leaf_nodes__int",
            "init_args": {
              "semantic_types": [
                "max_leaf_nodes"
              ],
              "_structural_type": "int"
            }
          },
          {
            "type": "Constant",
            "name": "max_leaf_nodes__None",
            "init_args": {
              "semantic_types": [
                "max_leaf_nodes"
              ],
              "_structural_type": "None",
              "default": "None"
            }
          }
        ]
      },
      {
        "type": "Hyperparameter",
        "name": "min_impurity_decrease",
        "init_args": {
          "semantic_types": [
            "min_impurity_decrease"
          ],
          "_structural_type": "float",
          "default": 0.0,
          "description": "A node will be split if this split induces a decrease of the impurity greater than or equal to this value.  The weighted impurity decrease equation is the following::      N_t / N * (impurity - N_t_R / N_t * right_impurity                         - N_t_L / N_t * left_impurity)  where ``N`` is the total number of samples, ``N_t`` is the number of samples at the current node, ``N_t_L`` is the number of samples in the left child, and ``N_t_R`` is the number of samples in the right child.  ``N``, ``N_t``, ``N_t_R`` and ``N_t_L`` all refer to the weighted sum, if ``sample_weight`` is passed.  .. versionadded:: 0.19"
        }
      },
      {
        "name": "min_impurity_split",
        "type": "Union",
        "init_args": {
          "semantic_types": [
            "min_impurity_split"
          ],
          "default": "min_impurity_split__None",
          "description": "Threshold for early stopping in tree growth. A node will split if its impurity is above the threshold, otherwise it is a leaf.  .. deprecated:: 0.19    ``min_impurity_split`` has been deprecated in favor of    ``min_impurity_decrease`` in 0.19. The default value of    ``min_impurity_split`` will change from 1e-7 to 0 in 0.23 and it    will be removed in 0.25. Use ``min_impurity_decrease`` instead."
        },
        "hyperparams": [
          {
            "type": "Hyperparameter",
            "name": "min_impurity_split__float",
            "init_args": {
              "semantic_types": [
                "min_impurity_split"
              ],
              "_structural_type": "float"
            }
          },
          {
            "type": "Constant",
            "name": "min_impurity_split__None",
            "init_args": {
              "semantic_types": [
                "min_impurity_split"
              ],
              "_structural_type": "None",
              "default": "None"
            }
          }
        ]
      },
      {
        "type": "Hyperparameter",
        "name": "bootstrap",
        "init_args": {
          "semantic_types": [
            "bootstrap"
          ],
          "_structural_type": "bool",
          "default": "True",
          "description": "Whether bootstrap samples are used when building trees. If False, the whole datset is used to build each tree."
        }
      },
      {
        "type": "Hyperparameter",
        "name": "oob_score",
        "init_args": {
          "semantic_types": [
            "oob_score"
          ],
          "_structural_type": "bool",
          "default": "False",
          "description": "whether to use out-of-bag samples to estimate the R^2 on unseen data."
        }
      },
      {
        "name": "n_jobs",
        "type": "Union",
        "init_args": {
          "semantic_types": [
            "n_jobs"
          ],
          "default": "n_jobs__None",
          "description": "The number of jobs to run in parallel. :meth:`fit`, :meth:`predict`, :meth:`decision_path` and :meth:`apply` are all parallelized over the trees. ``None`` means 1 unless in a :obj:`joblib.parallel_backend` context. ``-1`` means using all processors. See :term:`Glossary <n_jobs>` for more details."
        },
        "hyperparams": [
          {
            "type": "Hyperparameter",
            "name": "n_jobs__int",
            "init_args": {
              "semantic_types": [
                "n_jobs"
              ],
              "_structural_type": "int"
            }
          },
          {
            "type": "Constant",
            "name": "n_jobs__None",
            "init_args": {
              "semantic_types": [
                "n_jobs"
              ],
              "_structural_type": "None",
              "default": "None"
            }
          }
        ]
      },
      {
        "name": "random_state",
        "type": "Union",
        "init_args": {
          "semantic_types": [
            "random_state"
          ],
          "default": "random_state__None",
          "description": "Controls both the randomness of the bootstrapping of the samples used when building trees (if ``bootstrap=True``) and the sampling of the features to consider when looking for the best split at each node (if ``max_features < n_features``). See :term:`Glossary <random_state>` for details."
        },
        "hyperparams": [
          {
            "type": "Hyperparameter",
            "name": "random_state__int",
            "init_args": {
              "semantic_types": [
                "random_state"
              ],
              "_structural_type": "int"
            }
          },
          {
            "type": "Constant",
            "name": "random_state__None",
            "init_args": {
              "semantic_types": [
                "random_state"
              ],
              "_structural_type": "None",
              "default": "None"
            }
          }
        ]
      },
      {
        "type": "Hyperparameter",
        "name": "verbose",
        "init_args": {
          "semantic_types": [
            "verbose"
          ],
          "_structural_type": "int",
          "default": 0,
          "description": "Controls the verbosity when fitting and predicting."
        }
      },
      {
        "type": "Hyperparameter",
        "name": "warm_start",
        "init_args": {
          "semantic_types": [
            "warm_start"
          ],
          "_structural_type": "bool",
          "default": "False",
          "description": "When set to ``True``, reuse the solution of the previous call to fit and add more estimators to the ensemble, otherwise, just fit a whole new forest. See :term:`the Glossary <warm_start>`."
        }
      },
      {
        "type": "Hyperparameter",
        "name": "ccp_alpha",
        "init_args": {
          "semantic_types": [
            "ccp_alpha"
          ],
          "_structural_type": "float",
          "default": 0.0,
          "description": "Complexity parameter used for Minimal Cost-Complexity Pruning. The subtree with the largest cost complexity that is smaller than ``ccp_alpha`` will be chosen. By default, no pruning is performed. See :ref:`minimal_cost_complexity_pruning` for details.  .. versionadded:: 0.22"
        }
      },
      {
        "name": "max_samples",
        "type": "Union",
        "init_args": {
          "semantic_types": [
            "max_samples"
          ],
          "default": "max_samples__None",
          "description": "If bootstrap is True, the number of samples to draw from X to train each base estimator.  - If None (default), then draw `X.shape[0]` samples. - If int, then draw `max_samples` samples. - If float, then draw `max_samples * X.shape[0]` samples. Thus,   `max_samples` should be in the interval `(0, 1)`.  .. versionadded:: 0.22"
        },
        "hyperparams": [
          {
            "type": "Hyperparameter",
            "name": "max_samples__int",
            "init_args": {
              "semantic_types": [
                "max_samples"
              ],
              "_structural_type": "int"
            }
          },
          {
            "type": "Hyperparameter",
            "name": "max_samples__float",
            "init_args": {
              "semantic_types": [
                "max_samples"
              ],
              "_structural_type": "float"
            }
          },
          {
            "type": "Constant",
            "name": "max_samples__None",
            "init_args": {
              "semantic_types": [
                "max_samples"
              ],
              "_structural_type": "None",
              "default": "None"
            }
          }
        ]
      }
    ]
  },
  "RandomTreesEmbedding": {
    "name": "sklearn.ensemble._forest.RandomTreesEmbedding",
    "common_name": "RandomTreesEmbedding",
    "description": "An ensemble of totally random trees. An unsupervised transformation of a dataset to a high-dimensional sparse representation. A datapoint is coded according to which leaf of each tree it is sorted into. Using a one-hot encoding of the leaves, this leads to a binary coding with as many ones as there are trees in the forest.  The dimensionality of the resulting representation is ``n_out <= n_estimators * max_leaf_nodes``. If ``max_leaf_nodes == None``, the number of leaf nodes is at most ``n_estimators * 2 ** max_depth``.  Read more in the :ref:`User Guide <random_trees_embedding>`.",
    "sklearn_version": "0.22.2.post1",
    "Hyperparams": [
      {
        "type": "Hyperparameter",
        "name": "n_estimators",
        "init_args": {
          "semantic_types": [
            "n_estimators"
          ],
          "_structural_type": "int",
          "default": 100,
          "description": "Number of trees in the forest.  .. versionchanged:: 0.22    The default value of ``n_estimators`` changed from 10 to 100    in 0.22."
        }
      },
      {
        "type": "Hyperparameter",
        "name": "max_depth",
        "init_args": {
          "semantic_types": [
            "max_depth"
          ],
          "_structural_type": "int",
          "default": 5,
          "description": "The maximum depth of each tree. If None, then nodes are expanded until all leaves are pure or until all leaves contain less than min_samples_split samples."
        }
      },
      {
        "name": "min_samples_split",
        "type": "Union",
        "init_args": {
          "semantic_types": [
            "min_samples_split"
          ],
          "default": "min_samples_split__int",
          "description": "The minimum number of samples required to split an internal node:  - If int, then consider `min_samples_split` as the minimum number. - If float, then `min_samples_split` is a fraction and   `ceil(min_samples_split * n_samples)` is the minimum   number of samples for each split.  .. versionchanged:: 0.18    Added float values for fractions."
        },
        "hyperparams": [
          {
            "type": "Hyperparameter",
            "name": "min_samples_split__int",
            "init_args": {
              "semantic_types": [
                "min_samples_split"
              ],
              "_structural_type": "int",
              "default": 2
            }
          },
          {
            "type": "Hyperparameter",
            "name": "min_samples_split__float",
            "init_args": {
              "semantic_types": [
                "min_samples_split"
              ],
              "_structural_type": "float"
            }
          }
        ]
      },
      {
        "name": "min_samples_leaf",
        "type": "Union",
        "init_args": {
          "semantic_types": [
            "min_samples_leaf"
          ],
          "default": "min_samples_leaf__int",
          "description": "The minimum number of samples required to be at a leaf node. A split point at any depth will only be considered if it leaves at least ``min_samples_leaf`` training samples in each of the left and right branches.  This may have the effect of smoothing the model, especially in regression.  - If int, then consider `min_samples_leaf` as the minimum number. - If float, then `min_samples_leaf` is a fraction and   `ceil(min_samples_leaf * n_samples)` is the minimum   number of samples for each node.  .. versionchanged:: 0.18    Added float values for fractions."
        },
        "hyperparams": [
          {
            "type": "Hyperparameter",
            "name": "min_samples_leaf__int",
            "init_args": {
              "semantic_types": [
                "min_samples_leaf"
              ],
              "_structural_type": "int",
              "default": 1
            }
          },
          {
            "type": "Hyperparameter",
            "name": "min_samples_leaf__float",
            "init_args": {
              "semantic_types": [
                "min_samples_leaf"
              ],
              "_structural_type": "float"
            }
          }
        ]
      },
      {
        "type": "Hyperparameter",
        "name": "min_weight_fraction_leaf",
        "init_args": {
          "semantic_types": [
            "min_weight_fraction_leaf"
          ],
          "_structural_type": "float",
          "default": 0.0,
          "description": "The minimum weighted fraction of the sum total of weights (of all the input samples) required to be at a leaf node. Samples have equal weight when sample_weight is not provided."
        }
      },
      {
        "name": "max_leaf_nodes",
        "type": "Union",
        "init_args": {
          "semantic_types": [
            "max_leaf_nodes"
          ],
          "default": "max_leaf_nodes__None",
          "description": "Grow trees with ``max_leaf_nodes`` in best-first fashion. Best nodes are defined as relative reduction in impurity. If None then unlimited number of leaf nodes."
        },
        "hyperparams": [
          {
            "type": "Hyperparameter",
            "name": "max_leaf_nodes__float",
            "init_args": {
              "semantic_types": [
                "max_leaf_nodes"
              ],
              "_structural_type": "float"
            }
          },
          {
            "type": "Constant",
            "name": "max_leaf_nodes__None",
            "init_args": {
              "semantic_types": [
                "max_leaf_nodes"
              ],
              "_structural_type": "None",
              "default": "None"
            }
          }
        ]
      },
      {
        "type": "Hyperparameter",
        "name": "min_impurity_decrease",
        "init_args": {
          "semantic_types": [
            "min_impurity_decrease"
          ],
          "_structural_type": "float",
          "default": 0.0,
          "description": "A node will be split if this split induces a decrease of the impurity greater than or equal to this value.  The weighted impurity decrease equation is the following::      N_t / N * (impurity - N_t_R / N_t * right_impurity                         - N_t_L / N_t * left_impurity)  where ``N`` is the total number of samples, ``N_t`` is the number of samples at the current node, ``N_t_L`` is the number of samples in the left child, and ``N_t_R`` is the number of samples in the right child.  ``N``, ``N_t``, ``N_t_R`` and ``N_t_L`` all refer to the weighted sum, if ``sample_weight`` is passed.  .. versionadded:: 0.19"
        }
      },
      {
        "name": "min_impurity_split",
        "type": "Union",
        "init_args": {
          "semantic_types": [
            "min_impurity_split"
          ],
          "default": "min_impurity_split__None",
          "description": "Threshold for early stopping in tree growth. A node will split if its impurity is above the threshold, otherwise it is a leaf.  .. deprecated:: 0.19    ``min_impurity_split`` has been deprecated in favor of    ``min_impurity_decrease`` in 0.19. The default value of    ``min_impurity_split`` will change from 1e-7 to 0 in 0.23 and it    will be removed in 0.25. Use ``min_impurity_decrease`` instead."
        },
        "hyperparams": [
          {
            "type": "Hyperparameter",
            "name": "min_impurity_split__float",
            "init_args": {
              "semantic_types": [
                "min_impurity_split"
              ],
              "_structural_type": "float"
            }
          },
          {
            "type": "Constant",
            "name": "min_impurity_split__None",
            "init_args": {
              "semantic_types": [
                "min_impurity_split"
              ],
              "_structural_type": "None",
              "default": "None"
            }
          }
        ]
      },
      {
        "type": "Hyperparameter",
        "name": "sparse_output",
        "init_args": {
          "semantic_types": [
            "sparse_output"
          ],
          "_structural_type": "bool",
          "default": "True",
          "description": "Whether or not to return a sparse CSR matrix, as default behavior, or to return a dense array compatible with dense pipeline operators."
        }
      },
      {
        "name": "n_jobs",
        "type": "Union",
        "init_args": {
          "semantic_types": [
            "n_jobs"
          ],
          "default": "n_jobs__None",
          "description": "The number of jobs to run in parallel. :meth:`fit`, :meth:`transform`, :meth:`decision_path` and :meth:`apply` are all parallelized over the trees. ``None`` means 1 unless in a :obj:`joblib.parallel_backend` context. ``-1`` means using all processors. See :term:`Glossary <n_jobs>` for more details."
        },
        "hyperparams": [
          {
            "type": "Hyperparameter",
            "name": "n_jobs__int",
            "init_args": {
              "semantic_types": [
                "n_jobs"
              ],
              "_structural_type": "int"
            }
          },
          {
            "type": "Constant",
            "name": "n_jobs__None",
            "init_args": {
              "semantic_types": [
                "n_jobs"
              ],
              "_structural_type": "None",
              "default": "None"
            }
          }
        ]
      },
      {
        "name": "random_state",
        "type": "Union",
        "init_args": {
          "semantic_types": [
            "random_state"
          ],
          "default": "random_state__None",
          "description": "Controls the generation of the random `y` used to fit the trees and the draw of the splits for each feature at the trees' nodes. See :term:`Glossary <random_state>` for details."
        },
        "hyperparams": [
          {
            "type": "Hyperparameter",
            "name": "random_state__int",
            "init_args": {
              "semantic_types": [
                "random_state"
              ],
              "_structural_type": "int"
            }
          },
          {
            "type": "Constant",
            "name": "random_state__None",
            "init_args": {
              "semantic_types": [
                "random_state"
              ],
              "_structural_type": "None",
              "default": "None"
            }
          }
        ]
      },
      {
        "type": "Hyperparameter",
        "name": "verbose",
        "init_args": {
          "semantic_types": [
            "verbose"
          ],
          "_structural_type": "int",
          "default": 0,
          "description": "Controls the verbosity when fitting and predicting."
        }
      },
      {
        "type": "Hyperparameter",
        "name": "warm_start",
        "init_args": {
          "semantic_types": [
            "warm_start"
          ],
          "_structural_type": "bool",
          "default": "False",
          "description": "When set to ``True``, reuse the solution of the previous call to fit and add more estimators to the ensemble, otherwise, just fit a whole new forest. See :term:`the Glossary <warm_start>`."
        }
      }
    ]
  },
  "StackingClassifier": {
    "name": "sklearn.ensemble._stacking.StackingClassifier",
    "common_name": "StackingClassifier",
    "description": "Stack of estimators with a final classifier. Stacked generalization consists in stacking the output of individual estimator and use a classifier to compute the final prediction. Stacking allows to use the strength of each individual estimator by using their output as input of a final estimator.  Note that `estimators_` are fitted on the full `X` while `final_estimator_` is trained using cross-validated predictions of the base estimators using `cross_val_predict`.  .. versionadded:: 0.22  Read more in the :ref:`User Guide <stacking>`.",
    "sklearn_version": "0.22.2.post1",
    "Hyperparams": [
      {
        "name": "final_estimator",
        "type": "Union",
        "init_args": {
          "semantic_types": [
            "final_estimator"
          ],
          "default": "final_estimator__None",
          "description": "A classifier which will be used to combine the base estimators. The default classifier is a `LogisticRegression`."
        },
        "hyperparams": [
          {
            "name": "final_estimator__Estimator",
            "type": "Hyperparameter",
            "init_args": {
              "_structural_type": "Estimator",
              "semantic_types": [
                "final_estimator"
              ]
            }
          },
          {
            "type": "Constant",
            "name": "final_estimator__None",
            "init_args": {
              "semantic_types": [
                "final_estimator"
              ],
              "_structural_type": "None",
              "default": "None"
            }
          }
        ]
      },
      {
        "name": "cv",
        "type": "Union",
        "init_args": {
          "semantic_types": [
            "cv"
          ],
          "default": "cv__None",
          "description": "Determines the cross-validation splitting strategy used in `cross_val_predict` to train `final_estimator`. Possible inputs for cv are:  * None, to use the default 5-fold cross validation, * integer, to specify the number of folds in a (Stratified) KFold, * An object to be used as a cross-validation generator, * An iterable yielding train, test splits.  For integer/None inputs, if the estimator is a classifier and y is either binary or multiclass, `StratifiedKFold` is used. In all other cases, `KFold` is used.  Refer :ref:`User Guide <cross_validation>` for the various cross-validation strategies that can be used here.  .. note::    A larger number of split will provide no benefits if the number    of training samples is large enough. Indeed, the training time    will increase. ``cv`` is not used for model evaluation but for    prediction."
        },
        "hyperparams": [
          {
            "type": "Hyperparameter",
            "name": "cv__int",
            "init_args": {
              "semantic_types": [
                "cv"
              ],
              "_structural_type": "int"
            }
          },
          {
            "type": "Constant",
            "name": "cv__None",
            "init_args": {
              "semantic_types": [
                "cv"
              ],
              "_structural_type": "None",
              "default": "None"
            }
          }
        ]
      },
      {
        "type": "Enumeration",
        "name": "stack_method",
        "init_args": {
          "semantic_types": [
            "stack_method"
          ],
          "values": [
            "auto",
            "predict_proba",
            "decision_function",
            "predict"
          ],
          "_structural_type": "str",
          "default": "auto",
          "description": "Methods called for each base estimator. It can be:  * if 'auto', it will try to invoke, for each estimator,   `'predict_proba'`, `'decision_function'` or `'predict'` in that   order. * otherwise, one of `'predict_proba'`, `'decision_function'` or   `'predict'`. If the method is not implemented by the estimator, it   will raise an error."
        }
      },
      {
        "name": "n_jobs",
        "type": "Union",
        "init_args": {
          "semantic_types": [
            "n_jobs"
          ],
          "default": "n_jobs__None",
          "description": "The number of jobs to run in parallel all `estimators` `fit`. `None` means 1 unless in a `joblib.parallel_backend` context. -1 means using all processors. See Glossary for more details."
        },
        "hyperparams": [
          {
            "type": "Hyperparameter",
            "name": "n_jobs__int",
            "init_args": {
              "semantic_types": [
                "n_jobs"
              ],
              "_structural_type": "int"
            }
          },
          {
            "type": "Constant",
            "name": "n_jobs__None",
            "init_args": {
              "semantic_types": [
                "n_jobs"
              ],
              "_structural_type": "None",
              "default": "None"
            }
          }
        ]
      },
      {
        "type": "Hyperparameter",
        "name": "passthrough",
        "init_args": {
          "semantic_types": [
            "passthrough"
          ],
          "_structural_type": "bool",
          "default": "False",
          "description": "When False, only the predictions of estimators will be used as training data for `final_estimator`. When True, the `final_estimator` is trained on the predictions as well as the original training data."
        }
      },
      {
        "type": "Hyperparameter",
        "name": "verbose",
        "init_args": {
          "semantic_types": [
            "verbose"
          ],
          "_structural_type": "int",
          "default": 0
        }
      }
    ]
  },
  "StackingRegressor": {
    "name": "sklearn.ensemble._stacking.StackingRegressor",
    "common_name": "StackingRegressor",
    "description": "Stack of estimators with a final regressor. Stacked generalization consists in stacking the output of individual estimator and use a regressor to compute the final prediction. Stacking allows to use the strength of each individual estimator by using their output as input of a final estimator.  Note that `estimators_` are fitted on the full `X` while `final_estimator_` is trained using cross-validated predictions of the base estimators using `cross_val_predict`.  .. versionadded:: 0.22  Read more in the :ref:`User Guide <stacking>`.",
    "sklearn_version": "0.22.2.post1",
    "Hyperparams": [
      {
        "name": "final_estimator",
        "type": "Union",
        "init_args": {
          "semantic_types": [
            "final_estimator"
          ],
          "default": "final_estimator__None",
          "description": "A regressor which will be used to combine the base estimators. The default regressor is a `RidgeCV`."
        },
        "hyperparams": [
          {
            "name": "final_estimator__Estimator",
            "type": "Hyperparameter",
            "init_args": {
              "_structural_type": "Estimator",
              "semantic_types": [
                "final_estimator"
              ]
            }
          },
          {
            "type": "Constant",
            "name": "final_estimator__None",
            "init_args": {
              "semantic_types": [
                "final_estimator"
              ],
              "_structural_type": "None",
              "default": "None"
            }
          }
        ]
      },
      {
        "name": "cv",
        "type": "Union",
        "init_args": {
          "semantic_types": [
            "cv"
          ],
          "default": "cv__None",
          "description": "Determines the cross-validation splitting strategy used in `cross_val_predict` to train `final_estimator`. Possible inputs for cv are:  * None, to use the default 5-fold cross validation, * integer, to specify the number of folds in a (Stratified) KFold, * An object to be used as a cross-validation generator, * An iterable yielding train, test splits.  For integer/None inputs, if the estimator is a classifier and y is either binary or multiclass, `StratifiedKFold` is used. In all other cases, `KFold` is used.  Refer :ref:`User Guide <cross_validation>` for the various cross-validation strategies that can be used here.  .. note::    A larger number of split will provide no benefits if the number    of training samples is large enough. Indeed, the training time    will increase. ``cv`` is not used for model evaluation but for    prediction."
        },
        "hyperparams": [
          {
            "type": "Hyperparameter",
            "name": "cv__int",
            "init_args": {
              "semantic_types": [
                "cv"
              ],
              "_structural_type": "int"
            }
          },
          {
            "type": "Constant",
            "name": "cv__None",
            "init_args": {
              "semantic_types": [
                "cv"
              ],
              "_structural_type": "None",
              "default": "None"
            }
          }
        ]
      },
      {
        "name": "n_jobs",
        "type": "Union",
        "init_args": {
          "semantic_types": [
            "n_jobs"
          ],
          "default": "n_jobs__None",
          "description": "The number of jobs to run in parallel for `fit` of all `estimators`. `None` means 1 unless in a `joblib.parallel_backend` context. -1 means using all processors. See Glossary for more details."
        },
        "hyperparams": [
          {
            "type": "Hyperparameter",
            "name": "n_jobs__int",
            "init_args": {
              "semantic_types": [
                "n_jobs"
              ],
              "_structural_type": "int"
            }
          },
          {
            "type": "Constant",
            "name": "n_jobs__None",
            "init_args": {
              "semantic_types": [
                "n_jobs"
              ],
              "_structural_type": "None",
              "default": "None"
            }
          }
        ]
      },
      {
        "type": "Hyperparameter",
        "name": "passthrough",
        "init_args": {
          "semantic_types": [
            "passthrough"
          ],
          "_structural_type": "bool",
          "default": "False",
          "description": "When False, only the predictions of estimators will be used as training data for `final_estimator`. When True, the `final_estimator` is trained on the predictions as well as the original training data."
        }
      },
      {
        "type": "Hyperparameter",
        "name": "verbose",
        "init_args": {
          "semantic_types": [
            "verbose"
          ],
          "_structural_type": "int",
          "default": 0
        }
      }
    ]
  },
  "VotingClassifier": {
    "name": "sklearn.ensemble._voting.VotingClassifier",
    "common_name": "VotingClassifier",
    "description": "Soft Voting/Majority Rule classifier for unfitted estimators. .. versionadded:: 0.17  Read more in the :ref:`User Guide <voting_classifier>`.",
    "sklearn_version": "0.22.2.post1",
    "Hyperparams": [
      {
        "type": "Enumeration",
        "name": "voting",
        "init_args": {
          "semantic_types": [
            "voting"
          ],
          "values": [
            "hard",
            "soft"
          ],
          "_structural_type": "str",
          "default": "hard",
          "description": "If 'hard', uses predicted class labels for majority rule voting. Else if 'soft', predicts the class label based on the argmax of the sums of the predicted probabilities, which is recommended for an ensemble of well-calibrated classifiers."
        }
      },
      {
        "name": "weights",
        "type": "Union",
        "init_args": {
          "semantic_types": [
            "weights"
          ],
          "default": "weights__None",
          "description": "Sequence of weights (`float` or `int`) to weight the occurrences of predicted class labels (`hard` voting) or class probabilities before averaging (`soft` voting). Uses uniform weights if `None`."
        },
        "hyperparams": [
          {
            "name": "weights__ndarray",
            "type": "Hyperparameter",
            "init_args": {
              "_structural_type": "ndarray",
              "semantic_types": [
                "weights"
              ]
            }
          },
          {
            "type": "Constant",
            "name": "weights__None",
            "init_args": {
              "semantic_types": [
                "weights"
              ],
              "_structural_type": "None",
              "default": "None"
            }
          }
        ]
      },
      {
        "name": "n_jobs",
        "type": "Union",
        "init_args": {
          "semantic_types": [
            "n_jobs"
          ],
          "default": "n_jobs__None",
          "description": "The number of jobs to run in parallel for ``fit``. ``None`` means 1 unless in a :obj:`joblib.parallel_backend` context. ``-1`` means using all processors. See :term:`Glossary <n_jobs>` for more details."
        },
        "hyperparams": [
          {
            "type": "Hyperparameter",
            "name": "n_jobs__int",
            "init_args": {
              "semantic_types": [
                "n_jobs"
              ],
              "_structural_type": "int"
            }
          },
          {
            "type": "Constant",
            "name": "n_jobs__None",
            "init_args": {
              "semantic_types": [
                "n_jobs"
              ],
              "_structural_type": "None",
              "default": "None"
            }
          }
        ]
      },
      {
        "type": "Hyperparameter",
        "name": "flatten_transform",
        "init_args": {
          "semantic_types": [
            "flatten_transform"
          ],
          "_structural_type": "bool",
          "default": "True",
          "description": "Affects shape of transform output only when voting='soft' If voting='soft' and flatten_transform=True, transform method returns matrix with shape (n_samples, n_classifiers * n_classes). If flatten_transform=False, it returns (n_classifiers, n_samples, n_classes)."
        }
      }
    ]
  },
  "VotingRegressor": {
    "name": "sklearn.ensemble._voting.VotingRegressor",
    "common_name": "VotingRegressor",
    "description": "Prediction voting regressor for unfitted estimators. .. versionadded:: 0.21  A voting regressor is an ensemble meta-estimator that fits base regressors each on the whole dataset. It, then, averages the individual predictions to form a final prediction.  Read more in the :ref:`User Guide <voting_regressor>`.",
    "sklearn_version": "0.22.2.post1",
    "Hyperparams": [
      {
        "name": "weights",
        "type": "Union",
        "init_args": {
          "semantic_types": [
            "weights"
          ],
          "default": "weights__None",
          "description": "Sequence of weights (`float` or `int`) to weight the occurrences of predicted values before averaging. Uses uniform weights if `None`."
        },
        "hyperparams": [
          {
            "name": "weights__ndarray",
            "type": "Hyperparameter",
            "init_args": {
              "_structural_type": "ndarray",
              "semantic_types": [
                "weights"
              ]
            }
          },
          {
            "type": "Constant",
            "name": "weights__None",
            "init_args": {
              "semantic_types": [
                "weights"
              ],
              "_structural_type": "None",
              "default": "None"
            }
          }
        ]
      },
      {
        "name": "n_jobs",
        "type": "Union",
        "init_args": {
          "semantic_types": [
            "n_jobs"
          ],
          "default": "n_jobs__None",
          "description": "The number of jobs to run in parallel for ``fit``. ``None`` means 1 unless in a :obj:`joblib.parallel_backend` context. ``-1`` means using all processors. See :term:`Glossary <n_jobs>` for more details."
        },
        "hyperparams": [
          {
            "type": "Hyperparameter",
            "name": "n_jobs__int",
            "init_args": {
              "semantic_types": [
                "n_jobs"
              ],
              "_structural_type": "int"
            }
          },
          {
            "type": "Constant",
            "name": "n_jobs__None",
            "init_args": {
              "semantic_types": [
                "n_jobs"
              ],
              "_structural_type": "None",
              "default": "None"
            }
          }
        ]
      }
    ]
  }
}