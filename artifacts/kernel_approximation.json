{
  "AdditiveChi2Sampler": {
    "name": "sklearn.kernel_approximation.AdditiveChi2Sampler",
    "common_name": "AdditiveChi2Sampler",
    "description": "Approximate feature map for additive chi2 kernel. Uses sampling the fourier transform of the kernel characteristic at regular intervals.  Since the kernel that is to be approximated is additive, the components of the input vectors can be treated separately.  Each entry in the original space is transformed into 2*sample_steps+1 features, where sample_steps is a parameter of the method. Typical values of sample_steps include 1, 2 and 3.  Optimal choices for the sampling interval for certain data ranges can be computed (see the reference). The default values should be reasonable.  Read more in the :ref:`User Guide <additive_chi_kernel_approx>`.",
    "sklearn_version": "0.24.0",
    "Hyperparams": [
      {
        "type": "Hyperparameter",
        "name": "sample_steps",
        "init_args": {
          "semantic_types": [
            "sample_steps"
          ],
          "_structural_type": "int",
          "default": 2,
          "description": "Gives the number of (complex) sampling points."
        }
      },
      {
        "name": "sample_interval",
        "type": "Union",
        "init_args": {
          "semantic_types": [
            "sample_interval"
          ],
          "default": "sample_interval__None",
          "description": "Sampling interval. Must be specified when sample_steps not in {1,2,3}."
        },
        "hyperparams": [
          {
            "type": "Hyperparameter",
            "name": "sample_interval__float",
            "init_args": {
              "semantic_types": [
                "sample_interval"
              ],
              "_structural_type": "float"
            }
          },
          {
            "type": "Constant",
            "name": "sample_interval__None",
            "init_args": {
              "semantic_types": [
                "sample_interval"
              ],
              "_structural_type": "None",
              "default": "None"
            }
          }
        ]
      }
    ],
    "Params": []
  },
  "Nystroem": {
    "name": "sklearn.kernel_approximation.Nystroem",
    "common_name": "Nystroem",
    "description": "Approximate a kernel map using a subset of the training data. Constructs an approximate feature map for an arbitrary kernel using a subset of the data as basis.  Read more in the :ref:`User Guide <nystroem_kernel_approx>`.  .. versionadded:: 0.13",
    "sklearn_version": "0.24.0",
    "Hyperparams": [
      {
        "name": "kernel",
        "type": "Union",
        "init_args": {
          "semantic_types": [
            "kernel"
          ],
          "default": "kernel__str",
          "description": "Kernel map to be approximated. A callable should accept two arguments and the keyword arguments passed to this object as kernel_params, and should return a floating point number."
        },
        "hyperparams": [
          {
            "type": "Hyperparameter",
            "name": "kernel__str",
            "init_args": {
              "semantic_types": [
                "kernel"
              ],
              "_structural_type": "str",
              "default": "rbf"
            }
          },
          {
            "type": "Hyperparameter",
            "name": "kernel__Callable",
            "init_args": {
              "semantic_types": [
                "kernel"
              ],
              "_structural_type": "Callable"
            }
          }
        ]
      },
      {
        "name": "gamma",
        "type": "Union",
        "init_args": {
          "semantic_types": [
            "gamma"
          ],
          "default": "gamma__None",
          "description": "Gamma parameter for the RBF, laplacian, polynomial, exponential chi2 and sigmoid kernels. Interpretation of the default value is left to the kernel; see the documentation for sklearn.metrics.pairwise. Ignored by other kernels."
        },
        "hyperparams": [
          {
            "type": "Hyperparameter",
            "name": "gamma__float",
            "init_args": {
              "semantic_types": [
                "gamma"
              ],
              "_structural_type": "float"
            }
          },
          {
            "type": "Constant",
            "name": "gamma__None",
            "init_args": {
              "semantic_types": [
                "gamma"
              ],
              "_structural_type": "None",
              "default": "None"
            }
          }
        ]
      },
      {
        "name": "coef0",
        "type": "Union",
        "init_args": {
          "semantic_types": [
            "coef0"
          ],
          "default": "coef0__None",
          "description": "Zero coefficient for polynomial and sigmoid kernels. Ignored by other kernels."
        },
        "hyperparams": [
          {
            "type": "Hyperparameter",
            "name": "coef0__float",
            "init_args": {
              "semantic_types": [
                "coef0"
              ],
              "_structural_type": "float"
            }
          },
          {
            "type": "Constant",
            "name": "coef0__None",
            "init_args": {
              "semantic_types": [
                "coef0"
              ],
              "_structural_type": "None",
              "default": "None"
            }
          }
        ]
      },
      {
        "name": "degree",
        "type": "Union",
        "init_args": {
          "semantic_types": [
            "degree"
          ],
          "default": "degree__None",
          "description": "Degree of the polynomial kernel. Ignored by other kernels."
        },
        "hyperparams": [
          {
            "type": "Hyperparameter",
            "name": "degree__float",
            "init_args": {
              "semantic_types": [
                "degree"
              ],
              "_structural_type": "float"
            }
          },
          {
            "type": "Constant",
            "name": "degree__None",
            "init_args": {
              "semantic_types": [
                "degree"
              ],
              "_structural_type": "None",
              "default": "None"
            }
          }
        ]
      },
      {
        "name": "kernel_params",
        "type": "Union",
        "init_args": {
          "semantic_types": [
            "kernel_params"
          ],
          "default": "kernel_params__None",
          "description": "Additional parameters (keyword arguments) for kernel function passed as callable object."
        },
        "hyperparams": [
          {
            "type": "Hyperparameter",
            "name": "kernel_params__dict",
            "init_args": {
              "semantic_types": [
                "kernel_params"
              ],
              "_structural_type": "dict"
            }
          },
          {
            "type": "Constant",
            "name": "kernel_params__None",
            "init_args": {
              "semantic_types": [
                "kernel_params"
              ],
              "_structural_type": "None",
              "default": "None"
            }
          }
        ]
      },
      {
        "type": "Hyperparameter",
        "name": "n_components",
        "init_args": {
          "semantic_types": [
            "n_components"
          ],
          "_structural_type": "int",
          "default": 100,
          "description": "Number of features to construct. How many data points will be used to construct the mapping."
        }
      },
      {
        "name": "random_state",
        "type": "Union",
        "init_args": {
          "semantic_types": [
            "random_state"
          ],
          "default": "random_state__None",
          "description": "Pseudo-random number generator to control the uniform sampling without replacement of n_components of the training data to construct the basis kernel. Pass an int for reproducible output across multiple function calls. See :term:`Glossary <random_state>`."
        },
        "hyperparams": [
          {
            "type": "Hyperparameter",
            "name": "random_state__int",
            "init_args": {
              "semantic_types": [
                "random_state"
              ],
              "_structural_type": "int"
            }
          },
          {
            "type": "Constant",
            "name": "random_state__None",
            "init_args": {
              "semantic_types": [
                "random_state"
              ],
              "_structural_type": "None",
              "default": "None"
            }
          }
        ]
      },
      {
        "name": "n_jobs",
        "type": "Union",
        "init_args": {
          "semantic_types": [
            "n_jobs"
          ],
          "default": "n_jobs__None",
          "description": "The number of jobs to use for the computation. This works by breaking down the kernel matrix into n_jobs even slices and computing them in parallel.  ``None`` means 1 unless in a :obj:`joblib.parallel_backend` context. ``-1`` means using all processors. See :term:`Glossary <n_jobs>` for more details.  .. versionadded:: 0.24"
        },
        "hyperparams": [
          {
            "type": "Hyperparameter",
            "name": "n_jobs__int",
            "init_args": {
              "semantic_types": [
                "n_jobs"
              ],
              "_structural_type": "int"
            }
          },
          {
            "type": "Constant",
            "name": "n_jobs__None",
            "init_args": {
              "semantic_types": [
                "n_jobs"
              ],
              "_structural_type": "None",
              "default": "None"
            }
          }
        ]
      }
    ],
    "Params": []
  },
  "PolynomialCountSketch": {
    "name": "sklearn.kernel_approximation.PolynomialCountSketch",
    "common_name": "PolynomialCountSketch",
    "description": "Polynomial kernel approximation via Tensor Sketch. Implements Tensor Sketch, which approximates the feature map of the polynomial kernel::      K(X, Y) = (gamma * <X, Y> + coef0)^degree  by efficiently computing a Count Sketch of the outer product of a vector with itself using Fast Fourier Transforms (FFT). Read more in the :ref:`User Guide <polynomial_kernel_approx>`.  .. versionadded:: 0.24",
    "sklearn_version": "0.24.0",
    "Hyperparams": [
      {
        "type": "Hyperparameter",
        "name": "gamma",
        "init_args": {
          "semantic_types": [
            "gamma"
          ],
          "_structural_type": "float",
          "default": 1.0,
          "description": "Parameter of the polynomial kernel whose feature map will be approximated."
        }
      },
      {
        "type": "Hyperparameter",
        "name": "degree",
        "init_args": {
          "semantic_types": [
            "degree"
          ],
          "_structural_type": "int",
          "default": 2,
          "description": "Degree of the polynomial kernel whose feature map will be approximated."
        }
      },
      {
        "type": "Hyperparameter",
        "name": "coef0",
        "init_args": {
          "semantic_types": [
            "coef0"
          ],
          "_structural_type": "int",
          "default": 0,
          "description": "Constant term of the polynomial kernel whose feature map will be approximated."
        }
      },
      {
        "type": "Hyperparameter",
        "name": "n_components",
        "init_args": {
          "semantic_types": [
            "n_components"
          ],
          "_structural_type": "int",
          "default": 100,
          "description": "Dimensionality of the output feature space. Usually, n_components should be greater than the number of features in input samples in order to achieve good performance. The optimal score / run time balance is typically achieved around n_components = 10 * n_features, but this depends on the specific dataset being used."
        }
      },
      {
        "name": "random_state",
        "type": "Union",
        "init_args": {
          "semantic_types": [
            "random_state"
          ],
          "default": "random_state__None",
          "description": "Determines random number generation for indexHash and bitHash initialization. Pass an int for reproducible results across multiple function calls. See :term:`Glossary <random_state>`."
        },
        "hyperparams": [
          {
            "type": "Hyperparameter",
            "name": "random_state__int",
            "init_args": {
              "semantic_types": [
                "random_state"
              ],
              "_structural_type": "int"
            }
          },
          {
            "type": "Constant",
            "name": "random_state__None",
            "init_args": {
              "semantic_types": [
                "random_state"
              ],
              "_structural_type": "None",
              "default": "None"
            }
          }
        ]
      }
    ],
    "Params": []
  },
  "RBFSampler": {
    "name": "sklearn.kernel_approximation.RBFSampler",
    "common_name": "RBFSampler",
    "description": "Approximates feature map of an RBF kernel by Monte Carlo approximation of its Fourier transform. It implements a variant of Random Kitchen Sinks.[1]  Read more in the :ref:`User Guide <rbf_kernel_approx>`.",
    "sklearn_version": "0.24.0",
    "Hyperparams": [
      {
        "type": "Hyperparameter",
        "name": "gamma",
        "init_args": {
          "semantic_types": [
            "gamma"
          ],
          "_structural_type": "float",
          "default": 1.0,
          "description": "Parameter of RBF kernel: exp(-gamma * x^2)"
        }
      },
      {
        "type": "Hyperparameter",
        "name": "n_components",
        "init_args": {
          "semantic_types": [
            "n_components"
          ],
          "_structural_type": "int",
          "default": 100,
          "description": "Number of Monte Carlo samples per original feature. Equals the dimensionality of the computed feature space."
        }
      },
      {
        "name": "random_state",
        "type": "Union",
        "init_args": {
          "semantic_types": [
            "random_state"
          ],
          "default": "random_state__None",
          "description": "Pseudo-random number generator to control the generation of the random weights and random offset when fitting the training data. Pass an int for reproducible output across multiple function calls. See :term:`Glossary <random_state>`."
        },
        "hyperparams": [
          {
            "type": "Hyperparameter",
            "name": "random_state__int",
            "init_args": {
              "semantic_types": [
                "random_state"
              ],
              "_structural_type": "int"
            }
          },
          {
            "type": "Constant",
            "name": "random_state__None",
            "init_args": {
              "semantic_types": [
                "random_state"
              ],
              "_structural_type": "None",
              "default": "None"
            }
          }
        ]
      }
    ],
    "Params": []
  },
  "SkewedChi2Sampler": {
    "name": "sklearn.kernel_approximation.SkewedChi2Sampler",
    "common_name": "SkewedChi2Sampler",
    "description": "Approximates feature map of the \"skewed chi-squared\" kernel by Monte Carlo approximation of its Fourier transform. Read more in the :ref:`User Guide <skewed_chi_kernel_approx>`.",
    "sklearn_version": "0.24.0",
    "Hyperparams": [
      {
        "type": "Hyperparameter",
        "name": "skewedness",
        "init_args": {
          "semantic_types": [
            "skewedness"
          ],
          "_structural_type": "float",
          "default": 1.0,
          "description": "\"skewedness\" parameter of the kernel. Needs to be cross-validated."
        }
      },
      {
        "type": "Hyperparameter",
        "name": "n_components",
        "init_args": {
          "semantic_types": [
            "n_components"
          ],
          "_structural_type": "int",
          "default": 100,
          "description": "number of Monte Carlo samples per original feature. Equals the dimensionality of the computed feature space."
        }
      },
      {
        "name": "random_state",
        "type": "Union",
        "init_args": {
          "semantic_types": [
            "random_state"
          ],
          "default": "random_state__None",
          "description": "Pseudo-random number generator to control the generation of the random weights and random offset when fitting the training data. Pass an int for reproducible output across multiple function calls. See :term:`Glossary <random_state>`."
        },
        "hyperparams": [
          {
            "type": "Hyperparameter",
            "name": "random_state__int",
            "init_args": {
              "semantic_types": [
                "random_state"
              ],
              "_structural_type": "int"
            }
          },
          {
            "type": "Constant",
            "name": "random_state__None",
            "init_args": {
              "semantic_types": [
                "random_state"
              ],
              "_structural_type": "None",
              "default": "None"
            }
          }
        ]
      }
    ],
    "Params": []
  }
}